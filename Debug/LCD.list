
LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000642c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  080066c4  080066c4  000166c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006780  08006780  00016780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006788  08006788  00016788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800678c  0800678c  0001678c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000020  24000000  08006790  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000730  24000020  080067b0  00020020  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000750  080067b0  00020750  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 10 .debug_info   000183c1  00000000  00000000  0002004e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002b16  00000000  00000000  0003840f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001158  00000000  00000000  0003af28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001060  00000000  00000000  0003c080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00036a0f  00000000  00000000  0003d0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00016889  00000000  00000000  00073aef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00158de1  00000000  00000000  0008a378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001e3159  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004918  00000000  00000000  001e31ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000020 	.word	0x24000020
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080066ac 	.word	0x080066ac

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000024 	.word	0x24000024
 80002d4:	080066ac 	.word	0x080066ac

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 80005e6:	4a38      	ldr	r2, [pc, #224]	; (80006c8 <HD44780_Init+0xec>)
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 80005ec:	4b37      	ldr	r3, [pc, #220]	; (80006cc <HD44780_Init+0xf0>)
 80005ee:	2208      	movs	r2, #8
 80005f0:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80005f2:	4b37      	ldr	r3, [pc, #220]	; (80006d0 <HD44780_Init+0xf4>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 80005f8:	4b33      	ldr	r3, [pc, #204]	; (80006c8 <HD44780_Init+0xec>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d907      	bls.n	8000610 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000600:	4b33      	ldr	r3, [pc, #204]	; (80006d0 <HD44780_Init+0xf4>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	f043 0308 	orr.w	r3, r3, #8
 8000608:	b2da      	uxtb	r2, r3
 800060a:	4b31      	ldr	r3, [pc, #196]	; (80006d0 <HD44780_Init+0xf4>)
 800060c:	701a      	strb	r2, [r3, #0]
 800060e:	e006      	b.n	800061e <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000610:	4b2f      	ldr	r3, [pc, #188]	; (80006d0 <HD44780_Init+0xf4>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	f043 0304 	orr.w	r3, r3, #4
 8000618:	b2da      	uxtb	r2, r3
 800061a:	4b2d      	ldr	r3, [pc, #180]	; (80006d0 <HD44780_Init+0xf4>)
 800061c:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 800061e:	f000 f9b3 	bl	8000988 <DelayInit>
  HAL_Delay(50);
 8000622:	2032      	movs	r0, #50	; 0x32
 8000624:	f001 f8f0 	bl	8001808 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000628:	4b28      	ldr	r3, [pc, #160]	; (80006cc <HD44780_Init+0xf0>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	4618      	mov	r0, r3
 800062e:	f000 f971 	bl	8000914 <ExpanderWrite>
  HAL_Delay(1000);
 8000632:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000636:	f001 f8e7 	bl	8001808 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 800063a:	2030      	movs	r0, #48	; 0x30
 800063c:	f000 f959 	bl	80008f2 <Write4Bits>
  DelayUS(4500);
 8000640:	f241 1094 	movw	r0, #4500	; 0x1194
 8000644:	f000 f9ca 	bl	80009dc <DelayUS>

  Write4Bits(0x03 << 4);
 8000648:	2030      	movs	r0, #48	; 0x30
 800064a:	f000 f952 	bl	80008f2 <Write4Bits>
  DelayUS(4500);
 800064e:	f241 1094 	movw	r0, #4500	; 0x1194
 8000652:	f000 f9c3 	bl	80009dc <DelayUS>

  Write4Bits(0x03 << 4);
 8000656:	2030      	movs	r0, #48	; 0x30
 8000658:	f000 f94b 	bl	80008f2 <Write4Bits>
  DelayUS(4500);
 800065c:	f241 1094 	movw	r0, #4500	; 0x1194
 8000660:	f000 f9bc 	bl	80009dc <DelayUS>

  Write4Bits(0x02 << 4);
 8000664:	2020      	movs	r0, #32
 8000666:	f000 f944 	bl	80008f2 <Write4Bits>
  DelayUS(100);
 800066a:	2064      	movs	r0, #100	; 0x64
 800066c:	f000 f9b6 	bl	80009dc <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000670:	4b17      	ldr	r3, [pc, #92]	; (80006d0 <HD44780_Init+0xf4>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	f043 0320 	orr.w	r3, r3, #32
 8000678:	b2db      	uxtb	r3, r3
 800067a:	4618      	mov	r0, r3
 800067c:	f000 f8fc 	bl	8000878 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000680:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <HD44780_Init+0xf8>)
 8000682:	2204      	movs	r2, #4
 8000684:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8000686:	f000 f875 	bl	8000774 <HD44780_Display>
  HD44780_Clear();
 800068a:	f000 f82b 	bl	80006e4 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800068e:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <HD44780_Init+0xfc>)
 8000690:	2202      	movs	r2, #2
 8000692:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000694:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <HD44780_Init+0xfc>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	f043 0304 	orr.w	r3, r3, #4
 800069c:	b2db      	uxtb	r3, r3
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 f8ea 	bl	8000878 <SendCommand>
  DelayUS(4500);
 80006a4:	f241 1094 	movw	r0, #4500	; 0x1194
 80006a8:	f000 f998 	bl	80009dc <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 80006ac:	490b      	ldr	r1, [pc, #44]	; (80006dc <HD44780_Init+0x100>)
 80006ae:	2000      	movs	r0, #0
 80006b0:	f000 f88c 	bl	80007cc <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 80006b4:	490a      	ldr	r1, [pc, #40]	; (80006e0 <HD44780_Init+0x104>)
 80006b6:	2001      	movs	r0, #1
 80006b8:	f000 f888 	bl	80007cc <HD44780_CreateSpecialChar>

  HD44780_Home();
 80006bc:	f000 f81d 	bl	80006fa <HD44780_Home>
}
 80006c0:	bf00      	nop
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	2400003f 	.word	0x2400003f
 80006cc:	24000040 	.word	0x24000040
 80006d0:	2400003c 	.word	0x2400003c
 80006d4:	2400003d 	.word	0x2400003d
 80006d8:	2400003e 	.word	0x2400003e
 80006dc:	24000000 	.word	0x24000000
 80006e0:	24000008 	.word	0x24000008

080006e4 <HD44780_Clear>:

void HD44780_Clear()
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 80006e8:	2001      	movs	r0, #1
 80006ea:	f000 f8c5 	bl	8000878 <SendCommand>
  DelayUS(2000);
 80006ee:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006f2:	f000 f973 	bl	80009dc <DelayUS>
}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}

080006fa <HD44780_Home>:

void HD44780_Home()
{
 80006fa:	b580      	push	{r7, lr}
 80006fc:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 80006fe:	2002      	movs	r0, #2
 8000700:	f000 f8ba 	bl	8000878 <SendCommand>
  DelayUS(2000);
 8000704:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000708:	f000 f968 	bl	80009dc <DelayUS>
}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}

08000710 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000710:	b590      	push	{r4, r7, lr}
 8000712:	b087      	sub	sp, #28
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	460a      	mov	r2, r1
 800071a:	71fb      	strb	r3, [r7, #7]
 800071c:	4613      	mov	r3, r2
 800071e:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000720:	4b12      	ldr	r3, [pc, #72]	; (800076c <HD44780_SetCursor+0x5c>)
 8000722:	f107 0408 	add.w	r4, r7, #8
 8000726:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000728:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 800072c:	4b10      	ldr	r3, [pc, #64]	; (8000770 <HD44780_SetCursor+0x60>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	79ba      	ldrb	r2, [r7, #6]
 8000732:	429a      	cmp	r2, r3
 8000734:	d303      	bcc.n	800073e <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <HD44780_SetCursor+0x60>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	3b01      	subs	r3, #1
 800073c:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 800073e:	79bb      	ldrb	r3, [r7, #6]
 8000740:	009b      	lsls	r3, r3, #2
 8000742:	3318      	adds	r3, #24
 8000744:	443b      	add	r3, r7
 8000746:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800074a:	b2da      	uxtb	r2, r3
 800074c:	79fb      	ldrb	r3, [r7, #7]
 800074e:	4413      	add	r3, r2
 8000750:	b2db      	uxtb	r3, r3
 8000752:	b25b      	sxtb	r3, r3
 8000754:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000758:	b25b      	sxtb	r3, r3
 800075a:	b2db      	uxtb	r3, r3
 800075c:	4618      	mov	r0, r3
 800075e:	f000 f88b 	bl	8000878 <SendCommand>
}
 8000762:	bf00      	nop
 8000764:	371c      	adds	r7, #28
 8000766:	46bd      	mov	sp, r7
 8000768:	bd90      	pop	{r4, r7, pc}
 800076a:	bf00      	nop
 800076c:	080066c4 	.word	0x080066c4
 8000770:	2400003f 	.word	0x2400003f

08000774 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000778:	4b08      	ldr	r3, [pc, #32]	; (800079c <HD44780_Display+0x28>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	f043 0304 	orr.w	r3, r3, #4
 8000780:	b2da      	uxtb	r2, r3
 8000782:	4b06      	ldr	r3, [pc, #24]	; (800079c <HD44780_Display+0x28>)
 8000784:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000786:	4b05      	ldr	r3, [pc, #20]	; (800079c <HD44780_Display+0x28>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	f043 0308 	orr.w	r3, r3, #8
 800078e:	b2db      	uxtb	r3, r3
 8000790:	4618      	mov	r0, r3
 8000792:	f000 f871 	bl	8000878 <SendCommand>
}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	2400003d 	.word	0x2400003d

080007a0 <HD44780_Cursor>:
  dpControl &= ~LCD_CURSORON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Cursor()
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  dpControl |= LCD_CURSORON;
 80007a4:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <HD44780_Cursor+0x28>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	f043 0302 	orr.w	r3, r3, #2
 80007ac:	b2da      	uxtb	r2, r3
 80007ae:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <HD44780_Cursor+0x28>)
 80007b0:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80007b2:	4b05      	ldr	r3, [pc, #20]	; (80007c8 <HD44780_Cursor+0x28>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	f043 0308 	orr.w	r3, r3, #8
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 f85b 	bl	8000878 <SendCommand>
}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	2400003d 	.word	0x2400003d

080007cc <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	6039      	str	r1, [r7, #0]
 80007d6:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 80007d8:	79fb      	ldrb	r3, [r7, #7]
 80007da:	f003 0307 	and.w	r3, r3, #7
 80007de:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 80007e0:	79fb      	ldrb	r3, [r7, #7]
 80007e2:	00db      	lsls	r3, r3, #3
 80007e4:	b25b      	sxtb	r3, r3
 80007e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007ea:	b25b      	sxtb	r3, r3
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	4618      	mov	r0, r3
 80007f0:	f000 f842 	bl	8000878 <SendCommand>
  for (int i=0; i<8; i++)
 80007f4:	2300      	movs	r3, #0
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	e009      	b.n	800080e <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	683a      	ldr	r2, [r7, #0]
 80007fe:	4413      	add	r3, r2
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	4618      	mov	r0, r3
 8000804:	f000 f846 	bl	8000894 <SendChar>
  for (int i=0; i<8; i++)
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	3301      	adds	r3, #1
 800080c:	60fb      	str	r3, [r7, #12]
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	2b07      	cmp	r3, #7
 8000812:	ddf2      	ble.n	80007fa <HD44780_CreateSpecialChar+0x2e>
  }
}
 8000814:	bf00      	nop
 8000816:	bf00      	nop
 8000818:	3710      	adds	r7, #16
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 800081e:	b580      	push	{r7, lr}
 8000820:	b082      	sub	sp, #8
 8000822:	af00      	add	r7, sp, #0
 8000824:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8000826:	e006      	b.n	8000836 <HD44780_PrintStr+0x18>
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	1c5a      	adds	r2, r3, #1
 800082c:	607a      	str	r2, [r7, #4]
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	4618      	mov	r0, r3
 8000832:	f000 f82f 	bl	8000894 <SendChar>
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d1f4      	bne.n	8000828 <HD44780_PrintStr+0xa>
}
 800083e:	bf00      	nop
 8000840:	bf00      	nop
 8000842:	3708      	adds	r7, #8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <HD44780_NoBacklight>:
  if(new_val) HD44780_Backlight();
  else HD44780_NoBacklight();
}

void HD44780_NoBacklight(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  dpBacklight=LCD_NOBACKLIGHT;
 800084c:	4b03      	ldr	r3, [pc, #12]	; (800085c <HD44780_NoBacklight+0x14>)
 800084e:	2200      	movs	r2, #0
 8000850:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(0);
 8000852:	2000      	movs	r0, #0
 8000854:	f000 f85e 	bl	8000914 <ExpanderWrite>
}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}
 800085c:	24000040 	.word	0x24000040

08000860 <HD44780_Backlight>:

void HD44780_Backlight(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  dpBacklight=LCD_BACKLIGHT;
 8000864:	4b03      	ldr	r3, [pc, #12]	; (8000874 <HD44780_Backlight+0x14>)
 8000866:	2208      	movs	r2, #8
 8000868:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(0);
 800086a:	2000      	movs	r0, #0
 800086c:	f000 f852 	bl	8000914 <ExpanderWrite>
}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}
 8000874:	24000040 	.word	0x24000040

08000878 <SendCommand>:

static void SendCommand(uint8_t cmd)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	2100      	movs	r1, #0
 8000886:	4618      	mov	r0, r3
 8000888:	f000 f812 	bl	80008b0 <Send>
}
 800088c:	bf00      	nop
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <SendChar>:

static void SendChar(uint8_t ch)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	2101      	movs	r1, #1
 80008a2:	4618      	mov	r0, r3
 80008a4:	f000 f804 	bl	80008b0 <Send>
}
 80008a8:	bf00      	nop
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	460a      	mov	r2, r1
 80008ba:	71fb      	strb	r3, [r7, #7]
 80008bc:	4613      	mov	r3, r2
 80008be:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	f023 030f 	bic.w	r3, r3, #15
 80008c6:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	011b      	lsls	r3, r3, #4
 80008cc:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 80008ce:	7bfa      	ldrb	r2, [r7, #15]
 80008d0:	79bb      	ldrb	r3, [r7, #6]
 80008d2:	4313      	orrs	r3, r2
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	4618      	mov	r0, r3
 80008d8:	f000 f80b 	bl	80008f2 <Write4Bits>
  Write4Bits((lownib)|mode);
 80008dc:	7bba      	ldrb	r2, [r7, #14]
 80008de:	79bb      	ldrb	r3, [r7, #6]
 80008e0:	4313      	orrs	r3, r2
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	4618      	mov	r0, r3
 80008e6:	f000 f804 	bl	80008f2 <Write4Bits>
}
 80008ea:	bf00      	nop
 80008ec:	3710      	adds	r7, #16
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}

080008f2 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 80008f2:	b580      	push	{r7, lr}
 80008f4:	b082      	sub	sp, #8
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	4603      	mov	r3, r0
 80008fa:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 80008fc:	79fb      	ldrb	r3, [r7, #7]
 80008fe:	4618      	mov	r0, r3
 8000900:	f000 f808 	bl	8000914 <ExpanderWrite>
  PulseEnable(value);
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	4618      	mov	r0, r3
 8000908:	f000 f820 	bl	800094c <PulseEnable>
}
 800090c:	bf00      	nop
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}

08000914 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af02      	add	r7, sp, #8
 800091a:	4603      	mov	r3, r0
 800091c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 800091e:	4b09      	ldr	r3, [pc, #36]	; (8000944 <ExpanderWrite+0x30>)
 8000920:	781a      	ldrb	r2, [r3, #0]
 8000922:	79fb      	ldrb	r3, [r7, #7]
 8000924:	4313      	orrs	r3, r2
 8000926:	b2db      	uxtb	r3, r3
 8000928:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 800092a:	f107 020f 	add.w	r2, r7, #15
 800092e:	230a      	movs	r3, #10
 8000930:	9300      	str	r3, [sp, #0]
 8000932:	2301      	movs	r3, #1
 8000934:	214e      	movs	r1, #78	; 0x4e
 8000936:	4804      	ldr	r0, [pc, #16]	; (8000948 <ExpanderWrite+0x34>)
 8000938:	f001 fad4 	bl	8001ee4 <HAL_I2C_Master_Transmit>
}
 800093c:	bf00      	nop
 800093e:	3710      	adds	r7, #16
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	24000040 	.word	0x24000040
 8000948:	24000044 	.word	0x24000044

0800094c <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	f043 0304 	orr.w	r3, r3, #4
 800095c:	b2db      	uxtb	r3, r3
 800095e:	4618      	mov	r0, r3
 8000960:	f7ff ffd8 	bl	8000914 <ExpanderWrite>
  DelayUS(20);
 8000964:	2014      	movs	r0, #20
 8000966:	f000 f839 	bl	80009dc <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	f023 0304 	bic.w	r3, r3, #4
 8000970:	b2db      	uxtb	r3, r3
 8000972:	4618      	mov	r0, r3
 8000974:	f7ff ffce 	bl	8000914 <ExpanderWrite>
  DelayUS(20);
 8000978:	2014      	movs	r0, #20
 800097a:	f000 f82f 	bl	80009dc <DelayUS>
}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
	...

08000988 <DelayInit>:

static void DelayInit(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 800098c:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <DelayInit+0x4c>)
 800098e:	68db      	ldr	r3, [r3, #12]
 8000990:	4a10      	ldr	r2, [pc, #64]	; (80009d4 <DelayInit+0x4c>)
 8000992:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000996:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8000998:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <DelayInit+0x4c>)
 800099a:	68db      	ldr	r3, [r3, #12]
 800099c:	4a0d      	ldr	r2, [pc, #52]	; (80009d4 <DelayInit+0x4c>)
 800099e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80009a2:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80009a4:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <DelayInit+0x50>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a0b      	ldr	r2, [pc, #44]	; (80009d8 <DelayInit+0x50>)
 80009aa:	f023 0301 	bic.w	r3, r3, #1
 80009ae:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80009b0:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <DelayInit+0x50>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a08      	ldr	r2, [pc, #32]	; (80009d8 <DelayInit+0x50>)
 80009b6:	f043 0301 	orr.w	r3, r3, #1
 80009ba:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <DelayInit+0x50>)
 80009be:	2200      	movs	r2, #0
 80009c0:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80009c2:	bf00      	nop
  __ASM volatile ("NOP");
 80009c4:	bf00      	nop
  __ASM volatile ("NOP");
 80009c6:	bf00      	nop
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	e000edf0 	.word	0xe000edf0
 80009d8:	e0001000 	.word	0xe0001000

080009dc <DelayUS>:

static void DelayUS(uint32_t us) {
 80009dc:	b480      	push	{r7}
 80009de:	b087      	sub	sp, #28
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 80009e4:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <DelayUS+0x44>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a0e      	ldr	r2, [pc, #56]	; (8000a24 <DelayUS+0x48>)
 80009ea:	fba2 2303 	umull	r2, r3, r2, r3
 80009ee:	0c9a      	lsrs	r2, r3, #18
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	fb02 f303 	mul.w	r3, r2, r3
 80009f6:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 80009f8:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <DelayUS+0x4c>)
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 80009fe:	4b0a      	ldr	r3, [pc, #40]	; (8000a28 <DelayUS+0x4c>)
 8000a00:	685a      	ldr	r2, [r3, #4]
 8000a02:	693b      	ldr	r3, [r7, #16]
 8000a04:	1ad3      	subs	r3, r2, r3
 8000a06:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	697a      	ldr	r2, [r7, #20]
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	d8f6      	bhi.n	80009fe <DelayUS+0x22>
}
 8000a10:	bf00      	nop
 8000a12:	bf00      	nop
 8000a14:	371c      	adds	r7, #28
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	24000010 	.word	0x24000010
 8000a24:	431bde83 	.word	0x431bde83
 8000a28:	e0001000 	.word	0xe0001000

08000a2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a30:	f000 fe58 	bl	80016e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a34:	f000 f870 	bl	8000b18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a38:	f000 fa44 	bl	8000ec4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000a3c:	f000 f9c4 	bl	8000dc8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000a40:	f000 fa0e 	bl	8000e60 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8000a44:	f000 f8e8 	bl	8000c18 <MX_I2C1_Init>
  MX_UART4_Init();
 8000a48:	f000 f926 	bl	8000c98 <MX_UART4_Init>
  MX_USART2_UART_Init();
 8000a4c:	f000 f970 	bl	8000d30 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HD44780_Init(2);
 8000a50:	2002      	movs	r0, #2
 8000a52:	f7ff fdc3 	bl	80005dc <HD44780_Init>
  		  //break;
  		  //default:
  		  //eNextState = AllStopNorthSouthHandler();
  		  //break;
  	  //}
    HD44780_Clear();
 8000a56:	f7ff fe45 	bl	80006e4 <HD44780_Clear>
    HD44780_SetCursor(0,0);
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	f7ff fe57 	bl	8000710 <HD44780_SetCursor>
    //HD44780_PrintStr("Welcome to V2X");
    HD44780_PrintStr("We love JP");
 8000a62:	4824      	ldr	r0, [pc, #144]	; (8000af4 <main+0xc8>)
 8000a64:	f7ff fedb 	bl	800081e <HD44780_PrintStr>
    HD44780_SetCursor(0,1);
 8000a68:	2101      	movs	r1, #1
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	f7ff fe50 	bl	8000710 <HD44780_SetCursor>
    HD44780_PrintStr("By: Team 2");
 8000a70:	4821      	ldr	r0, [pc, #132]	; (8000af8 <main+0xcc>)
 8000a72:	f7ff fed4 	bl	800081e <HD44780_PrintStr>
    HD44780_SetCursor(84,18);
 8000a76:	2112      	movs	r1, #18
 8000a78:	2054      	movs	r0, #84	; 0x54
 8000a7a:	f7ff fe49 	bl	8000710 <HD44780_SetCursor>
    HD44780_PrintStr("Version 1.0");
 8000a7e:	481f      	ldr	r0, [pc, #124]	; (8000afc <main+0xd0>)
 8000a80:	f7ff fecd 	bl	800081e <HD44780_PrintStr>
    HD44780_SetCursor(20,24);
 8000a84:	2118      	movs	r1, #24
 8000a86:	2014      	movs	r0, #20
 8000a88:	f7ff fe42 	bl	8000710 <HD44780_SetCursor>
    HD44780_PrintStr("Press Button 1");
 8000a8c:	481c      	ldr	r0, [pc, #112]	; (8000b00 <main+0xd4>)
 8000a8e:	f7ff fec6 	bl	800081e <HD44780_PrintStr>
    HAL_Delay(100000);
 8000a92:	481c      	ldr	r0, [pc, #112]	; (8000b04 <main+0xd8>)
 8000a94:	f000 feb8 	bl	8001808 <HAL_Delay>

    HD44780_Clear();
 8000a98:	f7ff fe24 	bl	80006e4 <HD44780_Clear>
    HD44780_SetCursor(0,0);
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f7ff fe36 	bl	8000710 <HD44780_SetCursor>
    HD44780_PrintStr("Oil Temperature");
 8000aa4:	4818      	ldr	r0, [pc, #96]	; (8000b08 <main+0xdc>)
 8000aa6:	f7ff feba 	bl	800081e <HD44780_PrintStr>
    HD44780_SetCursor(0,1);
 8000aaa:	2101      	movs	r1, #1
 8000aac:	2000      	movs	r0, #0
 8000aae:	f7ff fe2f 	bl	8000710 <HD44780_SetCursor>
    HD44780_PrintStr("Coolant Temperature");
 8000ab2:	4816      	ldr	r0, [pc, #88]	; (8000b0c <main+0xe0>)
 8000ab4:	f7ff feb3 	bl	800081e <HD44780_PrintStr>
    HD44780_SetCursor(84,18);
 8000ab8:	2112      	movs	r1, #18
 8000aba:	2054      	movs	r0, #84	; 0x54
 8000abc:	f7ff fe28 	bl	8000710 <HD44780_SetCursor>
    HD44780_PrintStr("Tire Pressure");
 8000ac0:	4813      	ldr	r0, [pc, #76]	; (8000b10 <main+0xe4>)
 8000ac2:	f7ff feac 	bl	800081e <HD44780_PrintStr>
    HD44780_SetCursor(20,24);
 8000ac6:	2118      	movs	r1, #24
 8000ac8:	2014      	movs	r0, #20
 8000aca:	f7ff fe21 	bl	8000710 <HD44780_SetCursor>
    HD44780_PrintStr("RSU Alerts");
 8000ace:	4811      	ldr	r0, [pc, #68]	; (8000b14 <main+0xe8>)
 8000ad0:	f7ff fea5 	bl	800081e <HD44780_PrintStr>
    HAL_Delay(20000);
 8000ad4:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000ad8:	f000 fe96 	bl	8001808 <HAL_Delay>
    HD44780_NoBacklight();
 8000adc:	f7ff feb4 	bl	8000848 <HD44780_NoBacklight>
    HAL_Delay(2000);
 8000ae0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ae4:	f000 fe90 	bl	8001808 <HAL_Delay>
    HD44780_Backlight();
 8000ae8:	f7ff feba 	bl	8000860 <HD44780_Backlight>

    //HAL_Delay(2000);
    HD44780_Cursor();
 8000aec:	f7ff fe58 	bl	80007a0 <HD44780_Cursor>
    //}
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <main+0xc4>
 8000af2:	bf00      	nop
 8000af4:	080066d4 	.word	0x080066d4
 8000af8:	080066e0 	.word	0x080066e0
 8000afc:	080066ec 	.word	0x080066ec
 8000b00:	080066f8 	.word	0x080066f8
 8000b04:	000186a0 	.word	0x000186a0
 8000b08:	08006708 	.word	0x08006708
 8000b0c:	08006718 	.word	0x08006718
 8000b10:	0800672c 	.word	0x0800672c
 8000b14:	0800673c 	.word	0x0800673c

08000b18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b09c      	sub	sp, #112	; 0x70
 8000b1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b22:	224c      	movs	r2, #76	; 0x4c
 8000b24:	2100      	movs	r1, #0
 8000b26:	4618      	mov	r0, r3
 8000b28:	f005 fdb8 	bl	800669c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b2c:	1d3b      	adds	r3, r7, #4
 8000b2e:	2220      	movs	r2, #32
 8000b30:	2100      	movs	r1, #0
 8000b32:	4618      	mov	r0, r3
 8000b34:	f005 fdb2 	bl	800669c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b38:	2002      	movs	r0, #2
 8000b3a:	f001 fea5 	bl	8002888 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b3e:	2300      	movs	r3, #0
 8000b40:	603b      	str	r3, [r7, #0]
 8000b42:	4b33      	ldr	r3, [pc, #204]	; (8000c10 <SystemClock_Config+0xf8>)
 8000b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b46:	4a32      	ldr	r2, [pc, #200]	; (8000c10 <SystemClock_Config+0xf8>)
 8000b48:	f023 0301 	bic.w	r3, r3, #1
 8000b4c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000b4e:	4b30      	ldr	r3, [pc, #192]	; (8000c10 <SystemClock_Config+0xf8>)
 8000b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	603b      	str	r3, [r7, #0]
 8000b58:	4b2e      	ldr	r3, [pc, #184]	; (8000c14 <SystemClock_Config+0xfc>)
 8000b5a:	699b      	ldr	r3, [r3, #24]
 8000b5c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b60:	4a2c      	ldr	r2, [pc, #176]	; (8000c14 <SystemClock_Config+0xfc>)
 8000b62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b66:	6193      	str	r3, [r2, #24]
 8000b68:	4b2a      	ldr	r3, [pc, #168]	; (8000c14 <SystemClock_Config+0xfc>)
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b70:	603b      	str	r3, [r7, #0]
 8000b72:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b74:	bf00      	nop
 8000b76:	4b27      	ldr	r3, [pc, #156]	; (8000c14 <SystemClock_Config+0xfc>)
 8000b78:	699b      	ldr	r3, [r3, #24]
 8000b7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b82:	d1f8      	bne.n	8000b76 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000b84:	2303      	movs	r3, #3
 8000b86:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b88:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b8c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b92:	2340      	movs	r3, #64	; 0x40
 8000b94:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b96:	2302      	movs	r3, #2
 8000b98:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000ba2:	2318      	movs	r3, #24
 8000ba4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000baa:	2304      	movs	r3, #4
 8000bac:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000bb2:	230c      	movs	r3, #12
 8000bb4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f001 feaa 	bl	800291c <HAL_RCC_OscConfig>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000bce:	f000 fab1 	bl	8001134 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bd2:	233f      	movs	r3, #63	; 0x3f
 8000bd4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000bde:	2300      	movs	r3, #0
 8000be0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000be2:	2300      	movs	r3, #0
 8000be4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000bf2:	1d3b      	adds	r3, r7, #4
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f002 fabe 	bl	8003178 <HAL_RCC_ClockConfig>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000c02:	f000 fa97 	bl	8001134 <Error_Handler>
  }
}
 8000c06:	bf00      	nop
 8000c08:	3770      	adds	r7, #112	; 0x70
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	58000400 	.word	0x58000400
 8000c14:	58024800 	.word	0x58024800

08000c18 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c1c:	4b1b      	ldr	r3, [pc, #108]	; (8000c8c <MX_I2C1_Init+0x74>)
 8000c1e:	4a1c      	ldr	r2, [pc, #112]	; (8000c90 <MX_I2C1_Init+0x78>)
 8000c20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8000c22:	4b1a      	ldr	r3, [pc, #104]	; (8000c8c <MX_I2C1_Init+0x74>)
 8000c24:	4a1b      	ldr	r2, [pc, #108]	; (8000c94 <MX_I2C1_Init+0x7c>)
 8000c26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c28:	4b18      	ldr	r3, [pc, #96]	; (8000c8c <MX_I2C1_Init+0x74>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c2e:	4b17      	ldr	r3, [pc, #92]	; (8000c8c <MX_I2C1_Init+0x74>)
 8000c30:	2201      	movs	r2, #1
 8000c32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c34:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <MX_I2C1_Init+0x74>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c3a:	4b14      	ldr	r3, [pc, #80]	; (8000c8c <MX_I2C1_Init+0x74>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c40:	4b12      	ldr	r3, [pc, #72]	; (8000c8c <MX_I2C1_Init+0x74>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c46:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <MX_I2C1_Init+0x74>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c4c:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <MX_I2C1_Init+0x74>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c52:	480e      	ldr	r0, [pc, #56]	; (8000c8c <MX_I2C1_Init+0x74>)
 8000c54:	f001 f8b6 	bl	8001dc4 <HAL_I2C_Init>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c5e:	f000 fa69 	bl	8001134 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c62:	2100      	movs	r1, #0
 8000c64:	4809      	ldr	r0, [pc, #36]	; (8000c8c <MX_I2C1_Init+0x74>)
 8000c66:	f001 fc2f 	bl	80024c8 <HAL_I2CEx_ConfigAnalogFilter>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c70:	f000 fa60 	bl	8001134 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c74:	2100      	movs	r1, #0
 8000c76:	4805      	ldr	r0, [pc, #20]	; (8000c8c <MX_I2C1_Init+0x74>)
 8000c78:	f001 fc71 	bl	800255e <HAL_I2CEx_ConfigDigitalFilter>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c82:	f000 fa57 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	24000044 	.word	0x24000044
 8000c90:	40005400 	.word	0x40005400
 8000c94:	10707dbc 	.word	0x10707dbc

08000c98 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000c9c:	4b22      	ldr	r3, [pc, #136]	; (8000d28 <MX_UART4_Init+0x90>)
 8000c9e:	4a23      	ldr	r2, [pc, #140]	; (8000d2c <MX_UART4_Init+0x94>)
 8000ca0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000ca2:	4b21      	ldr	r3, [pc, #132]	; (8000d28 <MX_UART4_Init+0x90>)
 8000ca4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ca8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000caa:	4b1f      	ldr	r3, [pc, #124]	; (8000d28 <MX_UART4_Init+0x90>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000cb0:	4b1d      	ldr	r3, [pc, #116]	; (8000d28 <MX_UART4_Init+0x90>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000cb6:	4b1c      	ldr	r3, [pc, #112]	; (8000d28 <MX_UART4_Init+0x90>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000cbc:	4b1a      	ldr	r3, [pc, #104]	; (8000d28 <MX_UART4_Init+0x90>)
 8000cbe:	220c      	movs	r2, #12
 8000cc0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cc2:	4b19      	ldr	r3, [pc, #100]	; (8000d28 <MX_UART4_Init+0x90>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc8:	4b17      	ldr	r3, [pc, #92]	; (8000d28 <MX_UART4_Init+0x90>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cce:	4b16      	ldr	r3, [pc, #88]	; (8000d28 <MX_UART4_Init+0x90>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cd4:	4b14      	ldr	r3, [pc, #80]	; (8000d28 <MX_UART4_Init+0x90>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cda:	4b13      	ldr	r3, [pc, #76]	; (8000d28 <MX_UART4_Init+0x90>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000ce0:	4811      	ldr	r0, [pc, #68]	; (8000d28 <MX_UART4_Init+0x90>)
 8000ce2:	f004 f93d 	bl	8004f60 <HAL_UART_Init>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000cec:	f000 fa22 	bl	8001134 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	480d      	ldr	r0, [pc, #52]	; (8000d28 <MX_UART4_Init+0x90>)
 8000cf4:	f005 f8da 	bl	8005eac <HAL_UARTEx_SetTxFifoThreshold>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000cfe:	f000 fa19 	bl	8001134 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d02:	2100      	movs	r1, #0
 8000d04:	4808      	ldr	r0, [pc, #32]	; (8000d28 <MX_UART4_Init+0x90>)
 8000d06:	f005 f90f 	bl	8005f28 <HAL_UARTEx_SetRxFifoThreshold>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000d10:	f000 fa10 	bl	8001134 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000d14:	4804      	ldr	r0, [pc, #16]	; (8000d28 <MX_UART4_Init+0x90>)
 8000d16:	f005 f890 	bl	8005e3a <HAL_UARTEx_DisableFifoMode>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000d20:	f000 fa08 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	24000090 	.word	0x24000090
 8000d2c:	40004c00 	.word	0x40004c00

08000d30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d34:	4b22      	ldr	r3, [pc, #136]	; (8000dc0 <MX_USART2_UART_Init+0x90>)
 8000d36:	4a23      	ldr	r2, [pc, #140]	; (8000dc4 <MX_USART2_UART_Init+0x94>)
 8000d38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000d3a:	4b21      	ldr	r3, [pc, #132]	; (8000dc0 <MX_USART2_UART_Init+0x90>)
 8000d3c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d42:	4b1f      	ldr	r3, [pc, #124]	; (8000dc0 <MX_USART2_UART_Init+0x90>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d48:	4b1d      	ldr	r3, [pc, #116]	; (8000dc0 <MX_USART2_UART_Init+0x90>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d4e:	4b1c      	ldr	r3, [pc, #112]	; (8000dc0 <MX_USART2_UART_Init+0x90>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d54:	4b1a      	ldr	r3, [pc, #104]	; (8000dc0 <MX_USART2_UART_Init+0x90>)
 8000d56:	220c      	movs	r2, #12
 8000d58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d5a:	4b19      	ldr	r3, [pc, #100]	; (8000dc0 <MX_USART2_UART_Init+0x90>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d60:	4b17      	ldr	r3, [pc, #92]	; (8000dc0 <MX_USART2_UART_Init+0x90>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d66:	4b16      	ldr	r3, [pc, #88]	; (8000dc0 <MX_USART2_UART_Init+0x90>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d6c:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <MX_USART2_UART_Init+0x90>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d72:	4b13      	ldr	r3, [pc, #76]	; (8000dc0 <MX_USART2_UART_Init+0x90>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d78:	4811      	ldr	r0, [pc, #68]	; (8000dc0 <MX_USART2_UART_Init+0x90>)
 8000d7a:	f004 f8f1 	bl	8004f60 <HAL_UART_Init>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000d84:	f000 f9d6 	bl	8001134 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d88:	2100      	movs	r1, #0
 8000d8a:	480d      	ldr	r0, [pc, #52]	; (8000dc0 <MX_USART2_UART_Init+0x90>)
 8000d8c:	f005 f88e 	bl	8005eac <HAL_UARTEx_SetTxFifoThreshold>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000d96:	f000 f9cd 	bl	8001134 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	4808      	ldr	r0, [pc, #32]	; (8000dc0 <MX_USART2_UART_Init+0x90>)
 8000d9e:	f005 f8c3 	bl	8005f28 <HAL_UARTEx_SetRxFifoThreshold>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000da8:	f000 f9c4 	bl	8001134 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000dac:	4804      	ldr	r0, [pc, #16]	; (8000dc0 <MX_USART2_UART_Init+0x90>)
 8000dae:	f005 f844 	bl	8005e3a <HAL_UARTEx_DisableFifoMode>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000db8:	f000 f9bc 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	24000120 	.word	0x24000120
 8000dc4:	40004400 	.word	0x40004400

08000dc8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000dcc:	4b22      	ldr	r3, [pc, #136]	; (8000e58 <MX_USART3_UART_Init+0x90>)
 8000dce:	4a23      	ldr	r2, [pc, #140]	; (8000e5c <MX_USART3_UART_Init+0x94>)
 8000dd0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000dd2:	4b21      	ldr	r3, [pc, #132]	; (8000e58 <MX_USART3_UART_Init+0x90>)
 8000dd4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000dd8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dda:	4b1f      	ldr	r3, [pc, #124]	; (8000e58 <MX_USART3_UART_Init+0x90>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000de0:	4b1d      	ldr	r3, [pc, #116]	; (8000e58 <MX_USART3_UART_Init+0x90>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000de6:	4b1c      	ldr	r3, [pc, #112]	; (8000e58 <MX_USART3_UART_Init+0x90>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000dec:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <MX_USART3_UART_Init+0x90>)
 8000dee:	220c      	movs	r2, #12
 8000df0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000df2:	4b19      	ldr	r3, [pc, #100]	; (8000e58 <MX_USART3_UART_Init+0x90>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000df8:	4b17      	ldr	r3, [pc, #92]	; (8000e58 <MX_USART3_UART_Init+0x90>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dfe:	4b16      	ldr	r3, [pc, #88]	; (8000e58 <MX_USART3_UART_Init+0x90>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e04:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <MX_USART3_UART_Init+0x90>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e0a:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <MX_USART3_UART_Init+0x90>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e10:	4811      	ldr	r0, [pc, #68]	; (8000e58 <MX_USART3_UART_Init+0x90>)
 8000e12:	f004 f8a5 	bl	8004f60 <HAL_UART_Init>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000e1c:	f000 f98a 	bl	8001134 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e20:	2100      	movs	r1, #0
 8000e22:	480d      	ldr	r0, [pc, #52]	; (8000e58 <MX_USART3_UART_Init+0x90>)
 8000e24:	f005 f842 	bl	8005eac <HAL_UARTEx_SetTxFifoThreshold>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000e2e:	f000 f981 	bl	8001134 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e32:	2100      	movs	r1, #0
 8000e34:	4808      	ldr	r0, [pc, #32]	; (8000e58 <MX_USART3_UART_Init+0x90>)
 8000e36:	f005 f877 	bl	8005f28 <HAL_UARTEx_SetRxFifoThreshold>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000e40:	f000 f978 	bl	8001134 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000e44:	4804      	ldr	r0, [pc, #16]	; (8000e58 <MX_USART3_UART_Init+0x90>)
 8000e46:	f004 fff8 	bl	8005e3a <HAL_UARTEx_DisableFifoMode>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000e50:	f000 f970 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e54:	bf00      	nop
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	240001b0 	.word	0x240001b0
 8000e5c:	40004800 	.word	0x40004800

08000e60 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000e64:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e66:	4a16      	ldr	r2, [pc, #88]	; (8000ec0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000e68:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000e6a:	4b14      	ldr	r3, [pc, #80]	; (8000ebc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e6c:	2209      	movs	r2, #9
 8000e6e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000e70:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e72:	2202      	movs	r2, #2
 8000e74:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000e76:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e7c:	4b0f      	ldr	r3, [pc, #60]	; (8000ebc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e7e:	2202      	movs	r2, #2
 8000e80:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000e82:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e84:	2204      	movs	r2, #4
 8000e86:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000e88:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000e8e:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000e94:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e96:	2204      	movs	r2, #4
 8000e98:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000e9a:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e9c:	2204      	movs	r2, #4
 8000e9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000ea6:	4805      	ldr	r0, [pc, #20]	; (8000ebc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ea8:	f001 fba5 	bl	80025f6 <HAL_PCD_Init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000eb2:	f000 f93f 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	24000240 	.word	0x24000240
 8000ec0:	40080000 	.word	0x40080000

08000ec4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08c      	sub	sp, #48	; 0x30
 8000ec8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eca:	f107 031c 	add.w	r3, r7, #28
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	605a      	str	r2, [r3, #4]
 8000ed4:	609a      	str	r2, [r3, #8]
 8000ed6:	60da      	str	r2, [r3, #12]
 8000ed8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eda:	4b8f      	ldr	r3, [pc, #572]	; (8001118 <MX_GPIO_Init+0x254>)
 8000edc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee0:	4a8d      	ldr	r2, [pc, #564]	; (8001118 <MX_GPIO_Init+0x254>)
 8000ee2:	f043 0304 	orr.w	r3, r3, #4
 8000ee6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eea:	4b8b      	ldr	r3, [pc, #556]	; (8001118 <MX_GPIO_Init+0x254>)
 8000eec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef0:	f003 0304 	and.w	r3, r3, #4
 8000ef4:	61bb      	str	r3, [r7, #24]
 8000ef6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ef8:	4b87      	ldr	r3, [pc, #540]	; (8001118 <MX_GPIO_Init+0x254>)
 8000efa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000efe:	4a86      	ldr	r2, [pc, #536]	; (8001118 <MX_GPIO_Init+0x254>)
 8000f00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f08:	4b83      	ldr	r3, [pc, #524]	; (8001118 <MX_GPIO_Init+0x254>)
 8000f0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f12:	617b      	str	r3, [r7, #20]
 8000f14:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f16:	4b80      	ldr	r3, [pc, #512]	; (8001118 <MX_GPIO_Init+0x254>)
 8000f18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f1c:	4a7e      	ldr	r2, [pc, #504]	; (8001118 <MX_GPIO_Init+0x254>)
 8000f1e:	f043 0301 	orr.w	r3, r3, #1
 8000f22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f26:	4b7c      	ldr	r3, [pc, #496]	; (8001118 <MX_GPIO_Init+0x254>)
 8000f28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f2c:	f003 0301 	and.w	r3, r3, #1
 8000f30:	613b      	str	r3, [r7, #16]
 8000f32:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f34:	4b78      	ldr	r3, [pc, #480]	; (8001118 <MX_GPIO_Init+0x254>)
 8000f36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f3a:	4a77      	ldr	r2, [pc, #476]	; (8001118 <MX_GPIO_Init+0x254>)
 8000f3c:	f043 0302 	orr.w	r3, r3, #2
 8000f40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f44:	4b74      	ldr	r3, [pc, #464]	; (8001118 <MX_GPIO_Init+0x254>)
 8000f46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f4a:	f003 0302 	and.w	r3, r3, #2
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f52:	4b71      	ldr	r3, [pc, #452]	; (8001118 <MX_GPIO_Init+0x254>)
 8000f54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f58:	4a6f      	ldr	r2, [pc, #444]	; (8001118 <MX_GPIO_Init+0x254>)
 8000f5a:	f043 0308 	orr.w	r3, r3, #8
 8000f5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f62:	4b6d      	ldr	r3, [pc, #436]	; (8001118 <MX_GPIO_Init+0x254>)
 8000f64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f68:	f003 0308 	and.w	r3, r3, #8
 8000f6c:	60bb      	str	r3, [r7, #8]
 8000f6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f70:	4b69      	ldr	r3, [pc, #420]	; (8001118 <MX_GPIO_Init+0x254>)
 8000f72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f76:	4a68      	ldr	r2, [pc, #416]	; (8001118 <MX_GPIO_Init+0x254>)
 8000f78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f80:	4b65      	ldr	r3, [pc, #404]	; (8001118 <MX_GPIO_Init+0x254>)
 8000f82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f8e:	4b62      	ldr	r3, [pc, #392]	; (8001118 <MX_GPIO_Init+0x254>)
 8000f90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f94:	4a60      	ldr	r2, [pc, #384]	; (8001118 <MX_GPIO_Init+0x254>)
 8000f96:	f043 0310 	orr.w	r3, r3, #16
 8000f9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f9e:	4b5e      	ldr	r3, [pc, #376]	; (8001118 <MX_GPIO_Init+0x254>)
 8000fa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa4:	f003 0310 	and.w	r3, r3, #16
 8000fa8:	603b      	str	r3, [r7, #0]
 8000faa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000fac:	2200      	movs	r2, #0
 8000fae:	f244 0101 	movw	r1, #16385	; 0x4001
 8000fb2:	485a      	ldr	r0, [pc, #360]	; (800111c <MX_GPIO_Init+0x258>)
 8000fb4:	f000 feec 	bl	8001d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fbe:	4858      	ldr	r0, [pc, #352]	; (8001120 <MX_GPIO_Init+0x25c>)
 8000fc0:	f000 fee6 	bl	8001d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	2102      	movs	r1, #2
 8000fc8:	4856      	ldr	r0, [pc, #344]	; (8001124 <MX_GPIO_Init+0x260>)
 8000fca:	f000 fee1 	bl	8001d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin button_1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|button_1_Pin;
 8000fce:	f242 0301 	movw	r3, #8193	; 0x2001
 8000fd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fdc:	f107 031c 	add.w	r3, r7, #28
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4851      	ldr	r0, [pc, #324]	; (8001128 <MX_GPIO_Init+0x264>)
 8000fe4:	f000 fd24 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000fe8:	2332      	movs	r3, #50	; 0x32
 8000fea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fec:	2302      	movs	r3, #2
 8000fee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ff8:	230b      	movs	r3, #11
 8000ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ffc:	f107 031c 	add.w	r3, r7, #28
 8001000:	4619      	mov	r1, r3
 8001002:	4849      	ldr	r0, [pc, #292]	; (8001128 <MX_GPIO_Init+0x264>)
 8001004:	f000 fd14 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001008:	2380      	movs	r3, #128	; 0x80
 800100a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100c:	2302      	movs	r3, #2
 800100e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001014:	2300      	movs	r3, #0
 8001016:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001018:	230b      	movs	r3, #11
 800101a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101c:	f107 031c 	add.w	r3, r7, #28
 8001020:	4619      	mov	r1, r3
 8001022:	4842      	ldr	r0, [pc, #264]	; (800112c <MX_GPIO_Init+0x268>)
 8001024:	f000 fd04 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8001028:	f244 0301 	movw	r3, #16385	; 0x4001
 800102c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102e:	2301      	movs	r3, #1
 8001030:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001036:	2300      	movs	r3, #0
 8001038:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103a:	f107 031c 	add.w	r3, r7, #28
 800103e:	4619      	mov	r1, r3
 8001040:	4836      	ldr	r0, [pc, #216]	; (800111c <MX_GPIO_Init+0x258>)
 8001042:	f000 fcf5 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001046:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800104a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104c:	2302      	movs	r3, #2
 800104e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001054:	2300      	movs	r3, #0
 8001056:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001058:	230b      	movs	r3, #11
 800105a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105c:	f107 031c 	add.w	r3, r7, #28
 8001060:	4619      	mov	r1, r3
 8001062:	482e      	ldr	r0, [pc, #184]	; (800111c <MX_GPIO_Init+0x258>)
 8001064:	f000 fce4 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8001068:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800106c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106e:	2301      	movs	r3, #1
 8001070:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001076:	2300      	movs	r3, #0
 8001078:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800107a:	f107 031c 	add.w	r3, r7, #28
 800107e:	4619      	mov	r1, r3
 8001080:	4827      	ldr	r0, [pc, #156]	; (8001120 <MX_GPIO_Init+0x25c>)
 8001082:	f000 fcd5 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : button_3_Pin button_4_Pin */
  GPIO_InitStruct.Pin = button_3_Pin|button_4_Pin;
 8001086:	230c      	movs	r3, #12
 8001088:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800108a:	2300      	movs	r3, #0
 800108c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001092:	f107 031c 	add.w	r3, r7, #28
 8001096:	4619      	mov	r1, r3
 8001098:	4825      	ldr	r0, [pc, #148]	; (8001130 <MX_GPIO_Init+0x26c>)
 800109a:	f000 fcc9 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 800109e:	2380      	movs	r3, #128	; 0x80
 80010a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010a2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80010ac:	f107 031c 	add.w	r3, r7, #28
 80010b0:	4619      	mov	r1, r3
 80010b2:	481f      	ldr	r0, [pc, #124]	; (8001130 <MX_GPIO_Init+0x26c>)
 80010b4:	f000 fcbc 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : button_2_Pin */
  GPIO_InitStruct.Pin = button_2_Pin;
 80010b8:	2308      	movs	r3, #8
 80010ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010bc:	2300      	movs	r3, #0
 80010be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(button_2_GPIO_Port, &GPIO_InitStruct);
 80010c4:	f107 031c 	add.w	r3, r7, #28
 80010c8:	4619      	mov	r1, r3
 80010ca:	4815      	ldr	r0, [pc, #84]	; (8001120 <MX_GPIO_Init+0x25c>)
 80010cc:	f000 fcb0 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80010d0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80010d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d6:	2302      	movs	r3, #2
 80010d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010de:	2300      	movs	r3, #0
 80010e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010e2:	230b      	movs	r3, #11
 80010e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010e6:	f107 031c 	add.w	r3, r7, #28
 80010ea:	4619      	mov	r1, r3
 80010ec:	4810      	ldr	r0, [pc, #64]	; (8001130 <MX_GPIO_Init+0x26c>)
 80010ee:	f000 fc9f 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80010f2:	2302      	movs	r3, #2
 80010f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f6:	2301      	movs	r3, #1
 80010f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fe:	2300      	movs	r3, #0
 8001100:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001102:	f107 031c 	add.w	r3, r7, #28
 8001106:	4619      	mov	r1, r3
 8001108:	4806      	ldr	r0, [pc, #24]	; (8001124 <MX_GPIO_Init+0x260>)
 800110a:	f000 fc91 	bl	8001a30 <HAL_GPIO_Init>

}
 800110e:	bf00      	nop
 8001110:	3730      	adds	r7, #48	; 0x30
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	58024400 	.word	0x58024400
 800111c:	58020400 	.word	0x58020400
 8001120:	58020c00 	.word	0x58020c00
 8001124:	58021000 	.word	0x58021000
 8001128:	58020800 	.word	0x58020800
 800112c:	58020000 	.word	0x58020000
 8001130:	58021800 	.word	0x58021800

08001134 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001138:	b672      	cpsid	i
}
 800113a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800113c:	e7fe      	b.n	800113c <Error_Handler+0x8>
	...

08001140 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001146:	4b0a      	ldr	r3, [pc, #40]	; (8001170 <HAL_MspInit+0x30>)
 8001148:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800114c:	4a08      	ldr	r2, [pc, #32]	; (8001170 <HAL_MspInit+0x30>)
 800114e:	f043 0302 	orr.w	r3, r3, #2
 8001152:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001156:	4b06      	ldr	r3, [pc, #24]	; (8001170 <HAL_MspInit+0x30>)
 8001158:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800115c:	f003 0302 	and.w	r3, r3, #2
 8001160:	607b      	str	r3, [r7, #4]
 8001162:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	58024400 	.word	0x58024400

08001174 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b0b8      	sub	sp, #224	; 0xe0
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800118c:	f107 0310 	add.w	r3, r7, #16
 8001190:	22bc      	movs	r2, #188	; 0xbc
 8001192:	2100      	movs	r1, #0
 8001194:	4618      	mov	r0, r3
 8001196:	f005 fa81 	bl	800669c <memset>
  if(hi2c->Instance==I2C1)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a25      	ldr	r2, [pc, #148]	; (8001234 <HAL_I2C_MspInit+0xc0>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d142      	bne.n	800122a <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80011a4:	2308      	movs	r3, #8
 80011a6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80011a8:	2300      	movs	r3, #0
 80011aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011ae:	f107 0310 	add.w	r3, r7, #16
 80011b2:	4618      	mov	r0, r3
 80011b4:	f002 fb6c 	bl	8003890 <HAL_RCCEx_PeriphCLKConfig>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80011be:	f7ff ffb9 	bl	8001134 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c2:	4b1d      	ldr	r3, [pc, #116]	; (8001238 <HAL_I2C_MspInit+0xc4>)
 80011c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011c8:	4a1b      	ldr	r2, [pc, #108]	; (8001238 <HAL_I2C_MspInit+0xc4>)
 80011ca:	f043 0302 	orr.w	r3, r3, #2
 80011ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011d2:	4b19      	ldr	r3, [pc, #100]	; (8001238 <HAL_I2C_MspInit+0xc4>)
 80011d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011d8:	f003 0302 	and.w	r3, r3, #2
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011e0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011e8:	2312      	movs	r3, #18
 80011ea:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f4:	2300      	movs	r3, #0
 80011f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011fa:	2304      	movs	r3, #4
 80011fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001200:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001204:	4619      	mov	r1, r3
 8001206:	480d      	ldr	r0, [pc, #52]	; (800123c <HAL_I2C_MspInit+0xc8>)
 8001208:	f000 fc12 	bl	8001a30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800120c:	4b0a      	ldr	r3, [pc, #40]	; (8001238 <HAL_I2C_MspInit+0xc4>)
 800120e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001212:	4a09      	ldr	r2, [pc, #36]	; (8001238 <HAL_I2C_MspInit+0xc4>)
 8001214:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001218:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800121c:	4b06      	ldr	r3, [pc, #24]	; (8001238 <HAL_I2C_MspInit+0xc4>)
 800121e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001222:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800122a:	bf00      	nop
 800122c:	37e0      	adds	r7, #224	; 0xe0
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40005400 	.word	0x40005400
 8001238:	58024400 	.word	0x58024400
 800123c:	58020400 	.word	0x58020400

08001240 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b0bc      	sub	sp, #240	; 0xf0
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001248:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001258:	f107 0320 	add.w	r3, r7, #32
 800125c:	22bc      	movs	r2, #188	; 0xbc
 800125e:	2100      	movs	r1, #0
 8001260:	4618      	mov	r0, r3
 8001262:	f005 fa1b 	bl	800669c <memset>
  if(huart->Instance==UART4)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a6d      	ldr	r2, [pc, #436]	; (8001420 <HAL_UART_MspInit+0x1e0>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d142      	bne.n	80012f6 <HAL_UART_MspInit+0xb6>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001270:	2302      	movs	r3, #2
 8001272:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001274:	2300      	movs	r3, #0
 8001276:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800127a:	f107 0320 	add.w	r3, r7, #32
 800127e:	4618      	mov	r0, r3
 8001280:	f002 fb06 	bl	8003890 <HAL_RCCEx_PeriphCLKConfig>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800128a:	f7ff ff53 	bl	8001134 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800128e:	4b65      	ldr	r3, [pc, #404]	; (8001424 <HAL_UART_MspInit+0x1e4>)
 8001290:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001294:	4a63      	ldr	r2, [pc, #396]	; (8001424 <HAL_UART_MspInit+0x1e4>)
 8001296:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800129a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800129e:	4b61      	ldr	r3, [pc, #388]	; (8001424 <HAL_UART_MspInit+0x1e4>)
 80012a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012a8:	61fb      	str	r3, [r7, #28]
 80012aa:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ac:	4b5d      	ldr	r3, [pc, #372]	; (8001424 <HAL_UART_MspInit+0x1e4>)
 80012ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b2:	4a5c      	ldr	r2, [pc, #368]	; (8001424 <HAL_UART_MspInit+0x1e4>)
 80012b4:	f043 0301 	orr.w	r3, r3, #1
 80012b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012bc:	4b59      	ldr	r3, [pc, #356]	; (8001424 <HAL_UART_MspInit+0x1e4>)
 80012be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	61bb      	str	r3, [r7, #24]
 80012c8:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012ca:	2303      	movs	r3, #3
 80012cc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d0:	2302      	movs	r3, #2
 80012d2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012dc:	2300      	movs	r3, #0
 80012de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80012e2:	2308      	movs	r3, #8
 80012e4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80012ec:	4619      	mov	r1, r3
 80012ee:	484e      	ldr	r0, [pc, #312]	; (8001428 <HAL_UART_MspInit+0x1e8>)
 80012f0:	f000 fb9e 	bl	8001a30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80012f4:	e08f      	b.n	8001416 <HAL_UART_MspInit+0x1d6>
  else if(huart->Instance==USART2)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a4c      	ldr	r2, [pc, #304]	; (800142c <HAL_UART_MspInit+0x1ec>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d142      	bne.n	8001386 <HAL_UART_MspInit+0x146>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001300:	2302      	movs	r3, #2
 8001302:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001304:	2300      	movs	r3, #0
 8001306:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800130a:	f107 0320 	add.w	r3, r7, #32
 800130e:	4618      	mov	r0, r3
 8001310:	f002 fabe 	bl	8003890 <HAL_RCCEx_PeriphCLKConfig>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <HAL_UART_MspInit+0xde>
      Error_Handler();
 800131a:	f7ff ff0b 	bl	8001134 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800131e:	4b41      	ldr	r3, [pc, #260]	; (8001424 <HAL_UART_MspInit+0x1e4>)
 8001320:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001324:	4a3f      	ldr	r2, [pc, #252]	; (8001424 <HAL_UART_MspInit+0x1e4>)
 8001326:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800132a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800132e:	4b3d      	ldr	r3, [pc, #244]	; (8001424 <HAL_UART_MspInit+0x1e4>)
 8001330:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001338:	617b      	str	r3, [r7, #20]
 800133a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800133c:	4b39      	ldr	r3, [pc, #228]	; (8001424 <HAL_UART_MspInit+0x1e4>)
 800133e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001342:	4a38      	ldr	r2, [pc, #224]	; (8001424 <HAL_UART_MspInit+0x1e4>)
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800134c:	4b35      	ldr	r3, [pc, #212]	; (8001424 <HAL_UART_MspInit+0x1e4>)
 800134e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	613b      	str	r3, [r7, #16]
 8001358:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800135a:	230c      	movs	r3, #12
 800135c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001360:	2302      	movs	r3, #2
 8001362:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136c:	2300      	movs	r3, #0
 800136e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001372:	2307      	movs	r3, #7
 8001374:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001378:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800137c:	4619      	mov	r1, r3
 800137e:	482a      	ldr	r0, [pc, #168]	; (8001428 <HAL_UART_MspInit+0x1e8>)
 8001380:	f000 fb56 	bl	8001a30 <HAL_GPIO_Init>
}
 8001384:	e047      	b.n	8001416 <HAL_UART_MspInit+0x1d6>
  else if(huart->Instance==USART3)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a29      	ldr	r2, [pc, #164]	; (8001430 <HAL_UART_MspInit+0x1f0>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d142      	bne.n	8001416 <HAL_UART_MspInit+0x1d6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001390:	2302      	movs	r3, #2
 8001392:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001394:	2300      	movs	r3, #0
 8001396:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800139a:	f107 0320 	add.w	r3, r7, #32
 800139e:	4618      	mov	r0, r3
 80013a0:	f002 fa76 	bl	8003890 <HAL_RCCEx_PeriphCLKConfig>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <HAL_UART_MspInit+0x16e>
      Error_Handler();
 80013aa:	f7ff fec3 	bl	8001134 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80013ae:	4b1d      	ldr	r3, [pc, #116]	; (8001424 <HAL_UART_MspInit+0x1e4>)
 80013b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013b4:	4a1b      	ldr	r2, [pc, #108]	; (8001424 <HAL_UART_MspInit+0x1e4>)
 80013b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013ba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80013be:	4b19      	ldr	r3, [pc, #100]	; (8001424 <HAL_UART_MspInit+0x1e4>)
 80013c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013cc:	4b15      	ldr	r3, [pc, #84]	; (8001424 <HAL_UART_MspInit+0x1e4>)
 80013ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013d2:	4a14      	ldr	r2, [pc, #80]	; (8001424 <HAL_UART_MspInit+0x1e4>)
 80013d4:	f043 0308 	orr.w	r3, r3, #8
 80013d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013dc:	4b11      	ldr	r3, [pc, #68]	; (8001424 <HAL_UART_MspInit+0x1e4>)
 80013de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013e2:	f003 0308 	and.w	r3, r3, #8
 80013e6:	60bb      	str	r3, [r7, #8]
 80013e8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80013ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f2:	2302      	movs	r3, #2
 80013f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fe:	2300      	movs	r3, #0
 8001400:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001404:	2307      	movs	r3, #7
 8001406:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800140a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800140e:	4619      	mov	r1, r3
 8001410:	4808      	ldr	r0, [pc, #32]	; (8001434 <HAL_UART_MspInit+0x1f4>)
 8001412:	f000 fb0d 	bl	8001a30 <HAL_GPIO_Init>
}
 8001416:	bf00      	nop
 8001418:	37f0      	adds	r7, #240	; 0xf0
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40004c00 	.word	0x40004c00
 8001424:	58024400 	.word	0x58024400
 8001428:	58020000 	.word	0x58020000
 800142c:	40004400 	.word	0x40004400
 8001430:	40004800 	.word	0x40004800
 8001434:	58020c00 	.word	0x58020c00

08001438 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b0b8      	sub	sp, #224	; 0xe0
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001440:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001450:	f107 0310 	add.w	r3, r7, #16
 8001454:	22bc      	movs	r2, #188	; 0xbc
 8001456:	2100      	movs	r1, #0
 8001458:	4618      	mov	r0, r3
 800145a:	f005 f91f 	bl	800669c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a2f      	ldr	r2, [pc, #188]	; (8001520 <HAL_PCD_MspInit+0xe8>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d156      	bne.n	8001516 <HAL_PCD_MspInit+0xde>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001468:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800146c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800146e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001472:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001476:	f107 0310 	add.w	r3, r7, #16
 800147a:	4618      	mov	r0, r3
 800147c:	f002 fa08 	bl	8003890 <HAL_RCCEx_PeriphCLKConfig>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8001486:	f7ff fe55 	bl	8001134 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800148a:	f001 fa37 	bl	80028fc <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800148e:	4b25      	ldr	r3, [pc, #148]	; (8001524 <HAL_PCD_MspInit+0xec>)
 8001490:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001494:	4a23      	ldr	r2, [pc, #140]	; (8001524 <HAL_PCD_MspInit+0xec>)
 8001496:	f043 0301 	orr.w	r3, r3, #1
 800149a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800149e:	4b21      	ldr	r3, [pc, #132]	; (8001524 <HAL_PCD_MspInit+0xec>)
 80014a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014a4:	f003 0301 	and.w	r3, r3, #1
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80014ac:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80014b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b4:	2302      	movs	r3, #2
 80014b6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c0:	2300      	movs	r3, #0
 80014c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80014c6:	230a      	movs	r3, #10
 80014c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014cc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80014d0:	4619      	mov	r1, r3
 80014d2:	4815      	ldr	r0, [pc, #84]	; (8001528 <HAL_PCD_MspInit+0xf0>)
 80014d4:	f000 faac 	bl	8001a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014e0:	2300      	movs	r3, #0
 80014e2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80014f0:	4619      	mov	r1, r3
 80014f2:	480d      	ldr	r0, [pc, #52]	; (8001528 <HAL_PCD_MspInit+0xf0>)
 80014f4:	f000 fa9c 	bl	8001a30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80014f8:	4b0a      	ldr	r3, [pc, #40]	; (8001524 <HAL_PCD_MspInit+0xec>)
 80014fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014fe:	4a09      	ldr	r2, [pc, #36]	; (8001524 <HAL_PCD_MspInit+0xec>)
 8001500:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001504:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <HAL_PCD_MspInit+0xec>)
 800150a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800150e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001512:	60bb      	str	r3, [r7, #8]
 8001514:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001516:	bf00      	nop
 8001518:	37e0      	adds	r7, #224	; 0xe0
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40080000 	.word	0x40080000
 8001524:	58024400 	.word	0x58024400
 8001528:	58020000 	.word	0x58020000

0800152c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001530:	e7fe      	b.n	8001530 <NMI_Handler+0x4>

08001532 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001532:	b480      	push	{r7}
 8001534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001536:	e7fe      	b.n	8001536 <HardFault_Handler+0x4>

08001538 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800153c:	e7fe      	b.n	800153c <MemManage_Handler+0x4>

0800153e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800153e:	b480      	push	{r7}
 8001540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001542:	e7fe      	b.n	8001542 <BusFault_Handler+0x4>

08001544 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001548:	e7fe      	b.n	8001548 <UsageFault_Handler+0x4>

0800154a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800154a:	b480      	push	{r7}
 800154c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr

08001566 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001578:	f000 f926 	bl	80017c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800157c:	bf00      	nop
 800157e:	bd80      	pop	{r7, pc}

08001580 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001584:	4b37      	ldr	r3, [pc, #220]	; (8001664 <SystemInit+0xe4>)
 8001586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800158a:	4a36      	ldr	r2, [pc, #216]	; (8001664 <SystemInit+0xe4>)
 800158c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001590:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001594:	4b34      	ldr	r3, [pc, #208]	; (8001668 <SystemInit+0xe8>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 030f 	and.w	r3, r3, #15
 800159c:	2b06      	cmp	r3, #6
 800159e:	d807      	bhi.n	80015b0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80015a0:	4b31      	ldr	r3, [pc, #196]	; (8001668 <SystemInit+0xe8>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f023 030f 	bic.w	r3, r3, #15
 80015a8:	4a2f      	ldr	r2, [pc, #188]	; (8001668 <SystemInit+0xe8>)
 80015aa:	f043 0307 	orr.w	r3, r3, #7
 80015ae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80015b0:	4b2e      	ldr	r3, [pc, #184]	; (800166c <SystemInit+0xec>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a2d      	ldr	r2, [pc, #180]	; (800166c <SystemInit+0xec>)
 80015b6:	f043 0301 	orr.w	r3, r3, #1
 80015ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80015bc:	4b2b      	ldr	r3, [pc, #172]	; (800166c <SystemInit+0xec>)
 80015be:	2200      	movs	r2, #0
 80015c0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80015c2:	4b2a      	ldr	r3, [pc, #168]	; (800166c <SystemInit+0xec>)
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	4929      	ldr	r1, [pc, #164]	; (800166c <SystemInit+0xec>)
 80015c8:	4b29      	ldr	r3, [pc, #164]	; (8001670 <SystemInit+0xf0>)
 80015ca:	4013      	ands	r3, r2
 80015cc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80015ce:	4b26      	ldr	r3, [pc, #152]	; (8001668 <SystemInit+0xe8>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0308 	and.w	r3, r3, #8
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d007      	beq.n	80015ea <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80015da:	4b23      	ldr	r3, [pc, #140]	; (8001668 <SystemInit+0xe8>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f023 030f 	bic.w	r3, r3, #15
 80015e2:	4a21      	ldr	r2, [pc, #132]	; (8001668 <SystemInit+0xe8>)
 80015e4:	f043 0307 	orr.w	r3, r3, #7
 80015e8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80015ea:	4b20      	ldr	r3, [pc, #128]	; (800166c <SystemInit+0xec>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80015f0:	4b1e      	ldr	r3, [pc, #120]	; (800166c <SystemInit+0xec>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80015f6:	4b1d      	ldr	r3, [pc, #116]	; (800166c <SystemInit+0xec>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80015fc:	4b1b      	ldr	r3, [pc, #108]	; (800166c <SystemInit+0xec>)
 80015fe:	4a1d      	ldr	r2, [pc, #116]	; (8001674 <SystemInit+0xf4>)
 8001600:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001602:	4b1a      	ldr	r3, [pc, #104]	; (800166c <SystemInit+0xec>)
 8001604:	4a1c      	ldr	r2, [pc, #112]	; (8001678 <SystemInit+0xf8>)
 8001606:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001608:	4b18      	ldr	r3, [pc, #96]	; (800166c <SystemInit+0xec>)
 800160a:	4a1c      	ldr	r2, [pc, #112]	; (800167c <SystemInit+0xfc>)
 800160c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800160e:	4b17      	ldr	r3, [pc, #92]	; (800166c <SystemInit+0xec>)
 8001610:	2200      	movs	r2, #0
 8001612:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001614:	4b15      	ldr	r3, [pc, #84]	; (800166c <SystemInit+0xec>)
 8001616:	4a19      	ldr	r2, [pc, #100]	; (800167c <SystemInit+0xfc>)
 8001618:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800161a:	4b14      	ldr	r3, [pc, #80]	; (800166c <SystemInit+0xec>)
 800161c:	2200      	movs	r2, #0
 800161e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001620:	4b12      	ldr	r3, [pc, #72]	; (800166c <SystemInit+0xec>)
 8001622:	4a16      	ldr	r2, [pc, #88]	; (800167c <SystemInit+0xfc>)
 8001624:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001626:	4b11      	ldr	r3, [pc, #68]	; (800166c <SystemInit+0xec>)
 8001628:	2200      	movs	r2, #0
 800162a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800162c:	4b0f      	ldr	r3, [pc, #60]	; (800166c <SystemInit+0xec>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a0e      	ldr	r2, [pc, #56]	; (800166c <SystemInit+0xec>)
 8001632:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001636:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001638:	4b0c      	ldr	r3, [pc, #48]	; (800166c <SystemInit+0xec>)
 800163a:	2200      	movs	r2, #0
 800163c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800163e:	4b10      	ldr	r3, [pc, #64]	; (8001680 <SystemInit+0x100>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	4b10      	ldr	r3, [pc, #64]	; (8001684 <SystemInit+0x104>)
 8001644:	4013      	ands	r3, r2
 8001646:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800164a:	d202      	bcs.n	8001652 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800164c:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <SystemInit+0x108>)
 800164e:	2201      	movs	r2, #1
 8001650:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001652:	4b0e      	ldr	r3, [pc, #56]	; (800168c <SystemInit+0x10c>)
 8001654:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001658:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800165a:	bf00      	nop
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	e000ed00 	.word	0xe000ed00
 8001668:	52002000 	.word	0x52002000
 800166c:	58024400 	.word	0x58024400
 8001670:	eaf6ed7f 	.word	0xeaf6ed7f
 8001674:	02020200 	.word	0x02020200
 8001678:	01ff0000 	.word	0x01ff0000
 800167c:	01010280 	.word	0x01010280
 8001680:	5c001000 	.word	0x5c001000
 8001684:	ffff0000 	.word	0xffff0000
 8001688:	51008108 	.word	0x51008108
 800168c:	52004000 	.word	0x52004000

08001690 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001690:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016c8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001694:	f7ff ff74 	bl	8001580 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001698:	480c      	ldr	r0, [pc, #48]	; (80016cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800169a:	490d      	ldr	r1, [pc, #52]	; (80016d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800169c:	4a0d      	ldr	r2, [pc, #52]	; (80016d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800169e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016a0:	e002      	b.n	80016a8 <LoopCopyDataInit>

080016a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016a6:	3304      	adds	r3, #4

080016a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016ac:	d3f9      	bcc.n	80016a2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ae:	4a0a      	ldr	r2, [pc, #40]	; (80016d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016b0:	4c0a      	ldr	r4, [pc, #40]	; (80016dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80016b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016b4:	e001      	b.n	80016ba <LoopFillZerobss>

080016b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016b8:	3204      	adds	r2, #4

080016ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016bc:	d3fb      	bcc.n	80016b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016be:	f004 ffc9 	bl	8006654 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016c2:	f7ff f9b3 	bl	8000a2c <main>
  bx  lr
 80016c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016c8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80016cc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80016d0:	24000020 	.word	0x24000020
  ldr r2, =_sidata
 80016d4:	08006790 	.word	0x08006790
  ldr r2, =_sbss
 80016d8:	24000020 	.word	0x24000020
  ldr r4, =_ebss
 80016dc:	24000750 	.word	0x24000750

080016e0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016e0:	e7fe      	b.n	80016e0 <ADC3_IRQHandler>
	...

080016e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016ea:	2003      	movs	r0, #3
 80016ec:	f000 f96e 	bl	80019cc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016f0:	f001 fef8 	bl	80034e4 <HAL_RCC_GetSysClockFreq>
 80016f4:	4602      	mov	r2, r0
 80016f6:	4b15      	ldr	r3, [pc, #84]	; (800174c <HAL_Init+0x68>)
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	0a1b      	lsrs	r3, r3, #8
 80016fc:	f003 030f 	and.w	r3, r3, #15
 8001700:	4913      	ldr	r1, [pc, #76]	; (8001750 <HAL_Init+0x6c>)
 8001702:	5ccb      	ldrb	r3, [r1, r3]
 8001704:	f003 031f 	and.w	r3, r3, #31
 8001708:	fa22 f303 	lsr.w	r3, r2, r3
 800170c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800170e:	4b0f      	ldr	r3, [pc, #60]	; (800174c <HAL_Init+0x68>)
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	f003 030f 	and.w	r3, r3, #15
 8001716:	4a0e      	ldr	r2, [pc, #56]	; (8001750 <HAL_Init+0x6c>)
 8001718:	5cd3      	ldrb	r3, [r2, r3]
 800171a:	f003 031f 	and.w	r3, r3, #31
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	fa22 f303 	lsr.w	r3, r2, r3
 8001724:	4a0b      	ldr	r2, [pc, #44]	; (8001754 <HAL_Init+0x70>)
 8001726:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001728:	4a0b      	ldr	r2, [pc, #44]	; (8001758 <HAL_Init+0x74>)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800172e:	2000      	movs	r0, #0
 8001730:	f000 f814 	bl	800175c <HAL_InitTick>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e002      	b.n	8001744 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800173e:	f7ff fcff 	bl	8001140 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001742:	2300      	movs	r3, #0
}
 8001744:	4618      	mov	r0, r3
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	58024400 	.word	0x58024400
 8001750:	08006748 	.word	0x08006748
 8001754:	24000014 	.word	0x24000014
 8001758:	24000010 	.word	0x24000010

0800175c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001764:	4b15      	ldr	r3, [pc, #84]	; (80017bc <HAL_InitTick+0x60>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d101      	bne.n	8001770 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e021      	b.n	80017b4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001770:	4b13      	ldr	r3, [pc, #76]	; (80017c0 <HAL_InitTick+0x64>)
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	4b11      	ldr	r3, [pc, #68]	; (80017bc <HAL_InitTick+0x60>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	4619      	mov	r1, r3
 800177a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800177e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001782:	fbb2 f3f3 	udiv	r3, r2, r3
 8001786:	4618      	mov	r0, r3
 8001788:	f000 f945 	bl	8001a16 <HAL_SYSTICK_Config>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e00e      	b.n	80017b4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2b0f      	cmp	r3, #15
 800179a:	d80a      	bhi.n	80017b2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800179c:	2200      	movs	r2, #0
 800179e:	6879      	ldr	r1, [r7, #4]
 80017a0:	f04f 30ff 	mov.w	r0, #4294967295
 80017a4:	f000 f91d 	bl	80019e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017a8:	4a06      	ldr	r2, [pc, #24]	; (80017c4 <HAL_InitTick+0x68>)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017ae:	2300      	movs	r3, #0
 80017b0:	e000      	b.n	80017b4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	2400001c 	.word	0x2400001c
 80017c0:	24000010 	.word	0x24000010
 80017c4:	24000018 	.word	0x24000018

080017c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017cc:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <HAL_IncTick+0x20>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	461a      	mov	r2, r3
 80017d2:	4b06      	ldr	r3, [pc, #24]	; (80017ec <HAL_IncTick+0x24>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4413      	add	r3, r2
 80017d8:	4a04      	ldr	r2, [pc, #16]	; (80017ec <HAL_IncTick+0x24>)
 80017da:	6013      	str	r3, [r2, #0]
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	2400001c 	.word	0x2400001c
 80017ec:	2400074c 	.word	0x2400074c

080017f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  return uwTick;
 80017f4:	4b03      	ldr	r3, [pc, #12]	; (8001804 <HAL_GetTick+0x14>)
 80017f6:	681b      	ldr	r3, [r3, #0]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	2400074c 	.word	0x2400074c

08001808 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001810:	f7ff ffee 	bl	80017f0 <HAL_GetTick>
 8001814:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001820:	d005      	beq.n	800182e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001822:	4b0a      	ldr	r3, [pc, #40]	; (800184c <HAL_Delay+0x44>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	461a      	mov	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	4413      	add	r3, r2
 800182c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800182e:	bf00      	nop
 8001830:	f7ff ffde 	bl	80017f0 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	68fa      	ldr	r2, [r7, #12]
 800183c:	429a      	cmp	r2, r3
 800183e:	d8f7      	bhi.n	8001830 <HAL_Delay+0x28>
  {
  }
}
 8001840:	bf00      	nop
 8001842:	bf00      	nop
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	2400001c 	.word	0x2400001c

08001850 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001854:	4b03      	ldr	r3, [pc, #12]	; (8001864 <HAL_GetREVID+0x14>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	0c1b      	lsrs	r3, r3, #16
}
 800185a:	4618      	mov	r0, r3
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	5c001000 	.word	0x5c001000

08001868 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001878:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <__NVIC_SetPriorityGrouping+0x40>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800187e:	68ba      	ldr	r2, [r7, #8]
 8001880:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001884:	4013      	ands	r3, r2
 8001886:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001890:	4b06      	ldr	r3, [pc, #24]	; (80018ac <__NVIC_SetPriorityGrouping+0x44>)
 8001892:	4313      	orrs	r3, r2
 8001894:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001896:	4a04      	ldr	r2, [pc, #16]	; (80018a8 <__NVIC_SetPriorityGrouping+0x40>)
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	60d3      	str	r3, [r2, #12]
}
 800189c:	bf00      	nop
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	e000ed00 	.word	0xe000ed00
 80018ac:	05fa0000 	.word	0x05fa0000

080018b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018b4:	4b04      	ldr	r3, [pc, #16]	; (80018c8 <__NVIC_GetPriorityGrouping+0x18>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	0a1b      	lsrs	r3, r3, #8
 80018ba:	f003 0307 	and.w	r3, r3, #7
}
 80018be:	4618      	mov	r0, r3
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	6039      	str	r1, [r7, #0]
 80018d6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	db0a      	blt.n	80018f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	b2da      	uxtb	r2, r3
 80018e4:	490c      	ldr	r1, [pc, #48]	; (8001918 <__NVIC_SetPriority+0x4c>)
 80018e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018ea:	0112      	lsls	r2, r2, #4
 80018ec:	b2d2      	uxtb	r2, r2
 80018ee:	440b      	add	r3, r1
 80018f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018f4:	e00a      	b.n	800190c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	b2da      	uxtb	r2, r3
 80018fa:	4908      	ldr	r1, [pc, #32]	; (800191c <__NVIC_SetPriority+0x50>)
 80018fc:	88fb      	ldrh	r3, [r7, #6]
 80018fe:	f003 030f 	and.w	r3, r3, #15
 8001902:	3b04      	subs	r3, #4
 8001904:	0112      	lsls	r2, r2, #4
 8001906:	b2d2      	uxtb	r2, r2
 8001908:	440b      	add	r3, r1
 800190a:	761a      	strb	r2, [r3, #24]
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	e000e100 	.word	0xe000e100
 800191c:	e000ed00 	.word	0xe000ed00

08001920 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001920:	b480      	push	{r7}
 8001922:	b089      	sub	sp, #36	; 0x24
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	f1c3 0307 	rsb	r3, r3, #7
 800193a:	2b04      	cmp	r3, #4
 800193c:	bf28      	it	cs
 800193e:	2304      	movcs	r3, #4
 8001940:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	3304      	adds	r3, #4
 8001946:	2b06      	cmp	r3, #6
 8001948:	d902      	bls.n	8001950 <NVIC_EncodePriority+0x30>
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	3b03      	subs	r3, #3
 800194e:	e000      	b.n	8001952 <NVIC_EncodePriority+0x32>
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001954:	f04f 32ff 	mov.w	r2, #4294967295
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	43da      	mvns	r2, r3
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	401a      	ands	r2, r3
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001968:	f04f 31ff 	mov.w	r1, #4294967295
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	fa01 f303 	lsl.w	r3, r1, r3
 8001972:	43d9      	mvns	r1, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001978:	4313      	orrs	r3, r2
         );
}
 800197a:	4618      	mov	r0, r3
 800197c:	3724      	adds	r7, #36	; 0x24
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
	...

08001988 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3b01      	subs	r3, #1
 8001994:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001998:	d301      	bcc.n	800199e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800199a:	2301      	movs	r3, #1
 800199c:	e00f      	b.n	80019be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800199e:	4a0a      	ldr	r2, [pc, #40]	; (80019c8 <SysTick_Config+0x40>)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	3b01      	subs	r3, #1
 80019a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019a6:	210f      	movs	r1, #15
 80019a8:	f04f 30ff 	mov.w	r0, #4294967295
 80019ac:	f7ff ff8e 	bl	80018cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019b0:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <SysTick_Config+0x40>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019b6:	4b04      	ldr	r3, [pc, #16]	; (80019c8 <SysTick_Config+0x40>)
 80019b8:	2207      	movs	r2, #7
 80019ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	e000e010 	.word	0xe000e010

080019cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f7ff ff47 	bl	8001868 <__NVIC_SetPriorityGrouping>
}
 80019da:	bf00      	nop
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b086      	sub	sp, #24
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	4603      	mov	r3, r0
 80019ea:	60b9      	str	r1, [r7, #8]
 80019ec:	607a      	str	r2, [r7, #4]
 80019ee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019f0:	f7ff ff5e 	bl	80018b0 <__NVIC_GetPriorityGrouping>
 80019f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	68b9      	ldr	r1, [r7, #8]
 80019fa:	6978      	ldr	r0, [r7, #20]
 80019fc:	f7ff ff90 	bl	8001920 <NVIC_EncodePriority>
 8001a00:	4602      	mov	r2, r0
 8001a02:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a06:	4611      	mov	r1, r2
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff ff5f 	bl	80018cc <__NVIC_SetPriority>
}
 8001a0e:	bf00      	nop
 8001a10:	3718      	adds	r7, #24
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b082      	sub	sp, #8
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7ff ffb2 	bl	8001988 <SysTick_Config>
 8001a24:	4603      	mov	r3, r0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
	...

08001a30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b089      	sub	sp, #36	; 0x24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001a3e:	4b89      	ldr	r3, [pc, #548]	; (8001c64 <HAL_GPIO_Init+0x234>)
 8001a40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001a42:	e194      	b.n	8001d6e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	2101      	movs	r1, #1
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a50:	4013      	ands	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	f000 8186 	beq.w	8001d68 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f003 0303 	and.w	r3, r3, #3
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d005      	beq.n	8001a74 <HAL_GPIO_Init+0x44>
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f003 0303 	and.w	r3, r3, #3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d130      	bne.n	8001ad6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	2203      	movs	r2, #3
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	43db      	mvns	r3, r3
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	68da      	ldr	r2, [r3, #12]
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001aaa:	2201      	movs	r2, #1
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	091b      	lsrs	r3, r3, #4
 8001ac0:	f003 0201 	and.w	r2, r3, #1
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f003 0303 	and.w	r3, r3, #3
 8001ade:	2b03      	cmp	r3, #3
 8001ae0:	d017      	beq.n	8001b12 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	2203      	movs	r2, #3
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	43db      	mvns	r3, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4013      	ands	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	689a      	ldr	r2, [r3, #8]
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f003 0303 	and.w	r3, r3, #3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d123      	bne.n	8001b66 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	08da      	lsrs	r2, r3, #3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	3208      	adds	r2, #8
 8001b26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	f003 0307 	and.w	r3, r3, #7
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	220f      	movs	r2, #15
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	691a      	ldr	r2, [r3, #16]
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	f003 0307 	and.w	r3, r3, #7
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	08da      	lsrs	r2, r3, #3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3208      	adds	r2, #8
 8001b60:	69b9      	ldr	r1, [r7, #24]
 8001b62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	2203      	movs	r2, #3
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	43db      	mvns	r3, r3
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f003 0203 	and.w	r2, r3, #3
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f000 80e0 	beq.w	8001d68 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ba8:	4b2f      	ldr	r3, [pc, #188]	; (8001c68 <HAL_GPIO_Init+0x238>)
 8001baa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001bae:	4a2e      	ldr	r2, [pc, #184]	; (8001c68 <HAL_GPIO_Init+0x238>)
 8001bb0:	f043 0302 	orr.w	r3, r3, #2
 8001bb4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001bb8:	4b2b      	ldr	r3, [pc, #172]	; (8001c68 <HAL_GPIO_Init+0x238>)
 8001bba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bc6:	4a29      	ldr	r2, [pc, #164]	; (8001c6c <HAL_GPIO_Init+0x23c>)
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	089b      	lsrs	r3, r3, #2
 8001bcc:	3302      	adds	r3, #2
 8001bce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	f003 0303 	and.w	r3, r3, #3
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	220f      	movs	r2, #15
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	43db      	mvns	r3, r3
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	4013      	ands	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a20      	ldr	r2, [pc, #128]	; (8001c70 <HAL_GPIO_Init+0x240>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d052      	beq.n	8001c98 <HAL_GPIO_Init+0x268>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a1f      	ldr	r2, [pc, #124]	; (8001c74 <HAL_GPIO_Init+0x244>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d031      	beq.n	8001c5e <HAL_GPIO_Init+0x22e>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a1e      	ldr	r2, [pc, #120]	; (8001c78 <HAL_GPIO_Init+0x248>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d02b      	beq.n	8001c5a <HAL_GPIO_Init+0x22a>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a1d      	ldr	r2, [pc, #116]	; (8001c7c <HAL_GPIO_Init+0x24c>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d025      	beq.n	8001c56 <HAL_GPIO_Init+0x226>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a1c      	ldr	r2, [pc, #112]	; (8001c80 <HAL_GPIO_Init+0x250>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d01f      	beq.n	8001c52 <HAL_GPIO_Init+0x222>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a1b      	ldr	r2, [pc, #108]	; (8001c84 <HAL_GPIO_Init+0x254>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d019      	beq.n	8001c4e <HAL_GPIO_Init+0x21e>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a1a      	ldr	r2, [pc, #104]	; (8001c88 <HAL_GPIO_Init+0x258>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d013      	beq.n	8001c4a <HAL_GPIO_Init+0x21a>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a19      	ldr	r2, [pc, #100]	; (8001c8c <HAL_GPIO_Init+0x25c>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d00d      	beq.n	8001c46 <HAL_GPIO_Init+0x216>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a18      	ldr	r2, [pc, #96]	; (8001c90 <HAL_GPIO_Init+0x260>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d007      	beq.n	8001c42 <HAL_GPIO_Init+0x212>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a17      	ldr	r2, [pc, #92]	; (8001c94 <HAL_GPIO_Init+0x264>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d101      	bne.n	8001c3e <HAL_GPIO_Init+0x20e>
 8001c3a:	2309      	movs	r3, #9
 8001c3c:	e02d      	b.n	8001c9a <HAL_GPIO_Init+0x26a>
 8001c3e:	230a      	movs	r3, #10
 8001c40:	e02b      	b.n	8001c9a <HAL_GPIO_Init+0x26a>
 8001c42:	2308      	movs	r3, #8
 8001c44:	e029      	b.n	8001c9a <HAL_GPIO_Init+0x26a>
 8001c46:	2307      	movs	r3, #7
 8001c48:	e027      	b.n	8001c9a <HAL_GPIO_Init+0x26a>
 8001c4a:	2306      	movs	r3, #6
 8001c4c:	e025      	b.n	8001c9a <HAL_GPIO_Init+0x26a>
 8001c4e:	2305      	movs	r3, #5
 8001c50:	e023      	b.n	8001c9a <HAL_GPIO_Init+0x26a>
 8001c52:	2304      	movs	r3, #4
 8001c54:	e021      	b.n	8001c9a <HAL_GPIO_Init+0x26a>
 8001c56:	2303      	movs	r3, #3
 8001c58:	e01f      	b.n	8001c9a <HAL_GPIO_Init+0x26a>
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	e01d      	b.n	8001c9a <HAL_GPIO_Init+0x26a>
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e01b      	b.n	8001c9a <HAL_GPIO_Init+0x26a>
 8001c62:	bf00      	nop
 8001c64:	58000080 	.word	0x58000080
 8001c68:	58024400 	.word	0x58024400
 8001c6c:	58000400 	.word	0x58000400
 8001c70:	58020000 	.word	0x58020000
 8001c74:	58020400 	.word	0x58020400
 8001c78:	58020800 	.word	0x58020800
 8001c7c:	58020c00 	.word	0x58020c00
 8001c80:	58021000 	.word	0x58021000
 8001c84:	58021400 	.word	0x58021400
 8001c88:	58021800 	.word	0x58021800
 8001c8c:	58021c00 	.word	0x58021c00
 8001c90:	58022000 	.word	0x58022000
 8001c94:	58022400 	.word	0x58022400
 8001c98:	2300      	movs	r3, #0
 8001c9a:	69fa      	ldr	r2, [r7, #28]
 8001c9c:	f002 0203 	and.w	r2, r2, #3
 8001ca0:	0092      	lsls	r2, r2, #2
 8001ca2:	4093      	lsls	r3, r2
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001caa:	4938      	ldr	r1, [pc, #224]	; (8001d8c <HAL_GPIO_Init+0x35c>)
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	089b      	lsrs	r3, r3, #2
 8001cb0:	3302      	adds	r3, #2
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	43db      	mvns	r3, r3
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d003      	beq.n	8001cde <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001cde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001ce6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d003      	beq.n	8001d0c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001d0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4013      	ands	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d003      	beq.n	8001d38 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	43db      	mvns	r3, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d003      	beq.n	8001d62 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	fa22 f303 	lsr.w	r3, r2, r3
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f47f ae63 	bne.w	8001a44 <HAL_GPIO_Init+0x14>
  }
}
 8001d7e:	bf00      	nop
 8001d80:	bf00      	nop
 8001d82:	3724      	adds	r7, #36	; 0x24
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	58000400 	.word	0x58000400

08001d90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	460b      	mov	r3, r1
 8001d9a:	807b      	strh	r3, [r7, #2]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001da0:	787b      	ldrb	r3, [r7, #1]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001da6:	887a      	ldrh	r2, [r7, #2]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001dac:	e003      	b.n	8001db6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001dae:	887b      	ldrh	r3, [r7, #2]
 8001db0:	041a      	lsls	r2, r3, #16
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	619a      	str	r2, [r3, #24]
}
 8001db6:	bf00      	nop
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
	...

08001dc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e07f      	b.n	8001ed6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d106      	bne.n	8001df0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f7ff f9c2 	bl	8001174 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2224      	movs	r2, #36	; 0x24
 8001df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f022 0201 	bic.w	r2, r2, #1
 8001e06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685a      	ldr	r2, [r3, #4]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e14:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	689a      	ldr	r2, [r3, #8]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e24:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d107      	bne.n	8001e3e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689a      	ldr	r2, [r3, #8]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e3a:	609a      	str	r2, [r3, #8]
 8001e3c:	e006      	b.n	8001e4c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	689a      	ldr	r2, [r3, #8]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001e4a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d104      	bne.n	8001e5e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e5c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	6859      	ldr	r1, [r3, #4]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	4b1d      	ldr	r3, [pc, #116]	; (8001ee0 <HAL_I2C_Init+0x11c>)
 8001e6a:	430b      	orrs	r3, r1
 8001e6c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68da      	ldr	r2, [r3, #12]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e7c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	691a      	ldr	r2, [r3, #16]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	430a      	orrs	r2, r1
 8001e96:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	69d9      	ldr	r1, [r3, #28]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a1a      	ldr	r2, [r3, #32]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f042 0201 	orr.w	r2, r2, #1
 8001eb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2220      	movs	r2, #32
 8001ec2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	02008000 	.word	0x02008000

08001ee4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b088      	sub	sp, #32
 8001ee8:	af02      	add	r7, sp, #8
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	607a      	str	r2, [r7, #4]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	817b      	strh	r3, [r7, #10]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	2b20      	cmp	r3, #32
 8001f02:	f040 80da 	bne.w	80020ba <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d101      	bne.n	8001f14 <HAL_I2C_Master_Transmit+0x30>
 8001f10:	2302      	movs	r3, #2
 8001f12:	e0d3      	b.n	80020bc <HAL_I2C_Master_Transmit+0x1d8>
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f1c:	f7ff fc68 	bl	80017f0 <HAL_GetTick>
 8001f20:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	9300      	str	r3, [sp, #0]
 8001f26:	2319      	movs	r3, #25
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f2e:	68f8      	ldr	r0, [r7, #12]
 8001f30:	f000 f8f0 	bl	8002114 <I2C_WaitOnFlagUntilTimeout>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e0be      	b.n	80020bc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2221      	movs	r2, #33	; 0x21
 8001f42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2210      	movs	r2, #16
 8001f4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2200      	movs	r2, #0
 8001f52:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	893a      	ldrh	r2, [r7, #8]
 8001f5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2200      	movs	r2, #0
 8001f64:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	2bff      	cmp	r3, #255	; 0xff
 8001f6e:	d90e      	bls.n	8001f8e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	22ff      	movs	r2, #255	; 0xff
 8001f74:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f7a:	b2da      	uxtb	r2, r3
 8001f7c:	8979      	ldrh	r1, [r7, #10]
 8001f7e:	4b51      	ldr	r3, [pc, #324]	; (80020c4 <HAL_I2C_Master_Transmit+0x1e0>)
 8001f80:	9300      	str	r3, [sp, #0]
 8001f82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f86:	68f8      	ldr	r0, [r7, #12]
 8001f88:	f000 fa6c 	bl	8002464 <I2C_TransferConfig>
 8001f8c:	e06c      	b.n	8002068 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f92:	b29a      	uxth	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f9c:	b2da      	uxtb	r2, r3
 8001f9e:	8979      	ldrh	r1, [r7, #10]
 8001fa0:	4b48      	ldr	r3, [pc, #288]	; (80020c4 <HAL_I2C_Master_Transmit+0x1e0>)
 8001fa2:	9300      	str	r3, [sp, #0]
 8001fa4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fa8:	68f8      	ldr	r0, [r7, #12]
 8001faa:	f000 fa5b 	bl	8002464 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001fae:	e05b      	b.n	8002068 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fb0:	697a      	ldr	r2, [r7, #20]
 8001fb2:	6a39      	ldr	r1, [r7, #32]
 8001fb4:	68f8      	ldr	r0, [r7, #12]
 8001fb6:	f000 f8ed 	bl	8002194 <I2C_WaitOnTXISFlagUntilTimeout>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e07b      	b.n	80020bc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc8:	781a      	ldrb	r2, [r3, #0]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd4:	1c5a      	adds	r2, r3, #1
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fec:	3b01      	subs	r3, #1
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d034      	beq.n	8002068 <HAL_I2C_Master_Transmit+0x184>
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002002:	2b00      	cmp	r3, #0
 8002004:	d130      	bne.n	8002068 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	9300      	str	r3, [sp, #0]
 800200a:	6a3b      	ldr	r3, [r7, #32]
 800200c:	2200      	movs	r2, #0
 800200e:	2180      	movs	r1, #128	; 0x80
 8002010:	68f8      	ldr	r0, [r7, #12]
 8002012:	f000 f87f 	bl	8002114 <I2C_WaitOnFlagUntilTimeout>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e04d      	b.n	80020bc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002024:	b29b      	uxth	r3, r3
 8002026:	2bff      	cmp	r3, #255	; 0xff
 8002028:	d90e      	bls.n	8002048 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	22ff      	movs	r2, #255	; 0xff
 800202e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002034:	b2da      	uxtb	r2, r3
 8002036:	8979      	ldrh	r1, [r7, #10]
 8002038:	2300      	movs	r3, #0
 800203a:	9300      	str	r3, [sp, #0]
 800203c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002040:	68f8      	ldr	r0, [r7, #12]
 8002042:	f000 fa0f 	bl	8002464 <I2C_TransferConfig>
 8002046:	e00f      	b.n	8002068 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800204c:	b29a      	uxth	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002056:	b2da      	uxtb	r2, r3
 8002058:	8979      	ldrh	r1, [r7, #10]
 800205a:	2300      	movs	r3, #0
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	f000 f9fe 	bl	8002464 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800206c:	b29b      	uxth	r3, r3
 800206e:	2b00      	cmp	r3, #0
 8002070:	d19e      	bne.n	8001fb0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002072:	697a      	ldr	r2, [r7, #20]
 8002074:	6a39      	ldr	r1, [r7, #32]
 8002076:	68f8      	ldr	r0, [r7, #12]
 8002078:	f000 f8cc 	bl	8002214 <I2C_WaitOnSTOPFlagUntilTimeout>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e01a      	b.n	80020bc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2220      	movs	r2, #32
 800208c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	6859      	ldr	r1, [r3, #4]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	4b0b      	ldr	r3, [pc, #44]	; (80020c8 <HAL_I2C_Master_Transmit+0x1e4>)
 800209a:	400b      	ands	r3, r1
 800209c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2220      	movs	r2, #32
 80020a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020b6:	2300      	movs	r3, #0
 80020b8:	e000      	b.n	80020bc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80020ba:	2302      	movs	r3, #2
  }
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3718      	adds	r7, #24
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	80002000 	.word	0x80002000
 80020c8:	fe00e800 	.word	0xfe00e800

080020cc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d103      	bne.n	80020ea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2200      	movs	r2, #0
 80020e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d007      	beq.n	8002108 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	699a      	ldr	r2, [r3, #24]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f042 0201 	orr.w	r2, r2, #1
 8002106:	619a      	str	r2, [r3, #24]
  }
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	603b      	str	r3, [r7, #0]
 8002120:	4613      	mov	r3, r2
 8002122:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002124:	e022      	b.n	800216c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800212c:	d01e      	beq.n	800216c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800212e:	f7ff fb5f 	bl	80017f0 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	429a      	cmp	r2, r3
 800213c:	d302      	bcc.n	8002144 <I2C_WaitOnFlagUntilTimeout+0x30>
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d113      	bne.n	800216c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002148:	f043 0220 	orr.w	r2, r3, #32
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2220      	movs	r2, #32
 8002154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e00f      	b.n	800218c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	699a      	ldr	r2, [r3, #24]
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	4013      	ands	r3, r2
 8002176:	68ba      	ldr	r2, [r7, #8]
 8002178:	429a      	cmp	r2, r3
 800217a:	bf0c      	ite	eq
 800217c:	2301      	moveq	r3, #1
 800217e:	2300      	movne	r3, #0
 8002180:	b2db      	uxtb	r3, r3
 8002182:	461a      	mov	r2, r3
 8002184:	79fb      	ldrb	r3, [r7, #7]
 8002186:	429a      	cmp	r2, r3
 8002188:	d0cd      	beq.n	8002126 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	3710      	adds	r7, #16
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80021a0:	e02c      	b.n	80021fc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	68b9      	ldr	r1, [r7, #8]
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f000 f870 	bl	800228c <I2C_IsErrorOccurred>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e02a      	b.n	800220c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021bc:	d01e      	beq.n	80021fc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021be:	f7ff fb17 	bl	80017f0 <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	68ba      	ldr	r2, [r7, #8]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d302      	bcc.n	80021d4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d113      	bne.n	80021fc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d8:	f043 0220 	orr.w	r2, r3, #32
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2220      	movs	r2, #32
 80021e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e007      	b.n	800220c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b02      	cmp	r3, #2
 8002208:	d1cb      	bne.n	80021a2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800220a:	2300      	movs	r3, #0
}
 800220c:	4618      	mov	r0, r3
 800220e:	3710      	adds	r7, #16
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002220:	e028      	b.n	8002274 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	68b9      	ldr	r1, [r7, #8]
 8002226:	68f8      	ldr	r0, [r7, #12]
 8002228:	f000 f830 	bl	800228c <I2C_IsErrorOccurred>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e026      	b.n	8002284 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002236:	f7ff fadb 	bl	80017f0 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	68ba      	ldr	r2, [r7, #8]
 8002242:	429a      	cmp	r2, r3
 8002244:	d302      	bcc.n	800224c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d113      	bne.n	8002274 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002250:	f043 0220 	orr.w	r2, r3, #32
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2220      	movs	r2, #32
 800225c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e007      	b.n	8002284 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	f003 0320 	and.w	r3, r3, #32
 800227e:	2b20      	cmp	r3, #32
 8002280:	d1cf      	bne.n	8002222 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3710      	adds	r7, #16
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b08a      	sub	sp, #40	; 0x28
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002298:	2300      	movs	r3, #0
 800229a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80022a6:	2300      	movs	r3, #0
 80022a8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	f003 0310 	and.w	r3, r3, #16
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d075      	beq.n	80023a4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2210      	movs	r2, #16
 80022be:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80022c0:	e056      	b.n	8002370 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c8:	d052      	beq.n	8002370 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80022ca:	f7ff fa91 	bl	80017f0 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	68ba      	ldr	r2, [r7, #8]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d302      	bcc.n	80022e0 <I2C_IsErrorOccurred+0x54>
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d147      	bne.n	8002370 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80022f2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002302:	d12e      	bne.n	8002362 <I2C_IsErrorOccurred+0xd6>
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800230a:	d02a      	beq.n	8002362 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800230c:	7cfb      	ldrb	r3, [r7, #19]
 800230e:	2b20      	cmp	r3, #32
 8002310:	d027      	beq.n	8002362 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	685a      	ldr	r2, [r3, #4]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002320:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002322:	f7ff fa65 	bl	80017f0 <HAL_GetTick>
 8002326:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002328:	e01b      	b.n	8002362 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800232a:	f7ff fa61 	bl	80017f0 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b19      	cmp	r3, #25
 8002336:	d914      	bls.n	8002362 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233c:	f043 0220 	orr.w	r2, r3, #32
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2220      	movs	r2, #32
 8002348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	f003 0320 	and.w	r3, r3, #32
 800236c:	2b20      	cmp	r3, #32
 800236e:	d1dc      	bne.n	800232a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	f003 0320 	and.w	r3, r3, #32
 800237a:	2b20      	cmp	r3, #32
 800237c:	d003      	beq.n	8002386 <I2C_IsErrorOccurred+0xfa>
 800237e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002382:	2b00      	cmp	r3, #0
 8002384:	d09d      	beq.n	80022c2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002386:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800238a:	2b00      	cmp	r3, #0
 800238c:	d103      	bne.n	8002396 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2220      	movs	r2, #32
 8002394:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002396:	6a3b      	ldr	r3, [r7, #32]
 8002398:	f043 0304 	orr.w	r3, r3, #4
 800239c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d00b      	beq.n	80023ce <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80023b6:	6a3b      	ldr	r3, [r7, #32]
 80023b8:	f043 0301 	orr.w	r3, r3, #1
 80023bc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023c6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d00b      	beq.n	80023f0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80023d8:	6a3b      	ldr	r3, [r7, #32]
 80023da:	f043 0308 	orr.w	r3, r3, #8
 80023de:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023e8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d00b      	beq.n	8002412 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80023fa:	6a3b      	ldr	r3, [r7, #32]
 80023fc:	f043 0302 	orr.w	r3, r3, #2
 8002400:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f44f 7200 	mov.w	r2, #512	; 0x200
 800240a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002412:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002416:	2b00      	cmp	r3, #0
 8002418:	d01c      	beq.n	8002454 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f7ff fe56 	bl	80020cc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6859      	ldr	r1, [r3, #4]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	4b0d      	ldr	r3, [pc, #52]	; (8002460 <I2C_IsErrorOccurred+0x1d4>)
 800242c:	400b      	ands	r3, r1
 800242e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002434:	6a3b      	ldr	r3, [r7, #32]
 8002436:	431a      	orrs	r2, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2220      	movs	r2, #32
 8002440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002454:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002458:	4618      	mov	r0, r3
 800245a:	3728      	adds	r7, #40	; 0x28
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	fe00e800 	.word	0xfe00e800

08002464 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002464:	b480      	push	{r7}
 8002466:	b087      	sub	sp, #28
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	607b      	str	r3, [r7, #4]
 800246e:	460b      	mov	r3, r1
 8002470:	817b      	strh	r3, [r7, #10]
 8002472:	4613      	mov	r3, r2
 8002474:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002476:	897b      	ldrh	r3, [r7, #10]
 8002478:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800247c:	7a7b      	ldrb	r3, [r7, #9]
 800247e:	041b      	lsls	r3, r3, #16
 8002480:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002484:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800248a:	6a3b      	ldr	r3, [r7, #32]
 800248c:	4313      	orrs	r3, r2
 800248e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002492:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	6a3b      	ldr	r3, [r7, #32]
 800249c:	0d5b      	lsrs	r3, r3, #21
 800249e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80024a2:	4b08      	ldr	r3, [pc, #32]	; (80024c4 <I2C_TransferConfig+0x60>)
 80024a4:	430b      	orrs	r3, r1
 80024a6:	43db      	mvns	r3, r3
 80024a8:	ea02 0103 	and.w	r1, r2, r3
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	697a      	ldr	r2, [r7, #20]
 80024b2:	430a      	orrs	r2, r1
 80024b4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80024b6:	bf00      	nop
 80024b8:	371c      	adds	r7, #28
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	03ff63ff 	.word	0x03ff63ff

080024c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b20      	cmp	r3, #32
 80024dc:	d138      	bne.n	8002550 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d101      	bne.n	80024ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80024e8:	2302      	movs	r3, #2
 80024ea:	e032      	b.n	8002552 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2224      	movs	r2, #36	; 0x24
 80024f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f022 0201 	bic.w	r2, r2, #1
 800250a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800251a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6819      	ldr	r1, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	683a      	ldr	r2, [r7, #0]
 8002528:	430a      	orrs	r2, r1
 800252a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f042 0201 	orr.w	r2, r2, #1
 800253a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2220      	movs	r2, #32
 8002540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800254c:	2300      	movs	r3, #0
 800254e:	e000      	b.n	8002552 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002550:	2302      	movs	r3, #2
  }
}
 8002552:	4618      	mov	r0, r3
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800255e:	b480      	push	{r7}
 8002560:	b085      	sub	sp, #20
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
 8002566:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800256e:	b2db      	uxtb	r3, r3
 8002570:	2b20      	cmp	r3, #32
 8002572:	d139      	bne.n	80025e8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800257a:	2b01      	cmp	r3, #1
 800257c:	d101      	bne.n	8002582 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800257e:	2302      	movs	r3, #2
 8002580:	e033      	b.n	80025ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2224      	movs	r2, #36	; 0x24
 800258e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f022 0201 	bic.w	r2, r2, #1
 80025a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80025b0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	021b      	lsls	r3, r3, #8
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f042 0201 	orr.w	r2, r2, #1
 80025d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2220      	movs	r2, #32
 80025d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025e4:	2300      	movs	r3, #0
 80025e6:	e000      	b.n	80025ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80025e8:	2302      	movs	r3, #2
  }
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3714      	adds	r7, #20
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr

080025f6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80025f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025f8:	b08f      	sub	sp, #60	; 0x3c
 80025fa:	af0a      	add	r7, sp, #40	; 0x28
 80025fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d101      	bne.n	8002608 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e116      	b.n	8002836 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d106      	bne.n	8002628 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7fe ff08 	bl	8001438 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2203      	movs	r2, #3
 800262c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002638:	2b00      	cmp	r3, #0
 800263a:	d102      	bne.n	8002642 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4618      	mov	r0, r3
 8002648:	f003 fd68 	bl	800611c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	603b      	str	r3, [r7, #0]
 8002652:	687e      	ldr	r6, [r7, #4]
 8002654:	466d      	mov	r5, sp
 8002656:	f106 0410 	add.w	r4, r6, #16
 800265a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800265c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800265e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002660:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002662:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002666:	e885 0003 	stmia.w	r5, {r0, r1}
 800266a:	1d33      	adds	r3, r6, #4
 800266c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800266e:	6838      	ldr	r0, [r7, #0]
 8002670:	f003 fce6 	bl	8006040 <USB_CoreInit>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d005      	beq.n	8002686 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2202      	movs	r2, #2
 800267e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e0d7      	b.n	8002836 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2100      	movs	r1, #0
 800268c:	4618      	mov	r0, r3
 800268e:	f003 fd56 	bl	800613e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002692:	2300      	movs	r3, #0
 8002694:	73fb      	strb	r3, [r7, #15]
 8002696:	e04a      	b.n	800272e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002698:	7bfa      	ldrb	r2, [r7, #15]
 800269a:	6879      	ldr	r1, [r7, #4]
 800269c:	4613      	mov	r3, r2
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	4413      	add	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	440b      	add	r3, r1
 80026a6:	333d      	adds	r3, #61	; 0x3d
 80026a8:	2201      	movs	r2, #1
 80026aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80026ac:	7bfa      	ldrb	r2, [r7, #15]
 80026ae:	6879      	ldr	r1, [r7, #4]
 80026b0:	4613      	mov	r3, r2
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	4413      	add	r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	440b      	add	r3, r1
 80026ba:	333c      	adds	r3, #60	; 0x3c
 80026bc:	7bfa      	ldrb	r2, [r7, #15]
 80026be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80026c0:	7bfa      	ldrb	r2, [r7, #15]
 80026c2:	7bfb      	ldrb	r3, [r7, #15]
 80026c4:	b298      	uxth	r0, r3
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	4613      	mov	r3, r2
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	4413      	add	r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	440b      	add	r3, r1
 80026d2:	3344      	adds	r3, #68	; 0x44
 80026d4:	4602      	mov	r2, r0
 80026d6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80026d8:	7bfa      	ldrb	r2, [r7, #15]
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	4613      	mov	r3, r2
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	4413      	add	r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	440b      	add	r3, r1
 80026e6:	3340      	adds	r3, #64	; 0x40
 80026e8:	2200      	movs	r2, #0
 80026ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80026ec:	7bfa      	ldrb	r2, [r7, #15]
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	4613      	mov	r3, r2
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	4413      	add	r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	440b      	add	r3, r1
 80026fa:	3348      	adds	r3, #72	; 0x48
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002700:	7bfa      	ldrb	r2, [r7, #15]
 8002702:	6879      	ldr	r1, [r7, #4]
 8002704:	4613      	mov	r3, r2
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	4413      	add	r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	440b      	add	r3, r1
 800270e:	334c      	adds	r3, #76	; 0x4c
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002714:	7bfa      	ldrb	r2, [r7, #15]
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	4613      	mov	r3, r2
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	4413      	add	r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	3354      	adds	r3, #84	; 0x54
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002728:	7bfb      	ldrb	r3, [r7, #15]
 800272a:	3301      	adds	r3, #1
 800272c:	73fb      	strb	r3, [r7, #15]
 800272e:	7bfa      	ldrb	r2, [r7, #15]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	429a      	cmp	r2, r3
 8002736:	d3af      	bcc.n	8002698 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002738:	2300      	movs	r3, #0
 800273a:	73fb      	strb	r3, [r7, #15]
 800273c:	e044      	b.n	80027c8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800273e:	7bfa      	ldrb	r2, [r7, #15]
 8002740:	6879      	ldr	r1, [r7, #4]
 8002742:	4613      	mov	r3, r2
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	4413      	add	r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	440b      	add	r3, r1
 800274c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002750:	2200      	movs	r2, #0
 8002752:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002754:	7bfa      	ldrb	r2, [r7, #15]
 8002756:	6879      	ldr	r1, [r7, #4]
 8002758:	4613      	mov	r3, r2
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	4413      	add	r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	440b      	add	r3, r1
 8002762:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002766:	7bfa      	ldrb	r2, [r7, #15]
 8002768:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800276a:	7bfa      	ldrb	r2, [r7, #15]
 800276c:	6879      	ldr	r1, [r7, #4]
 800276e:	4613      	mov	r3, r2
 8002770:	00db      	lsls	r3, r3, #3
 8002772:	4413      	add	r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	440b      	add	r3, r1
 8002778:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800277c:	2200      	movs	r2, #0
 800277e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002780:	7bfa      	ldrb	r2, [r7, #15]
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	4613      	mov	r3, r2
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	4413      	add	r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	440b      	add	r3, r1
 800278e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002792:	2200      	movs	r2, #0
 8002794:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002796:	7bfa      	ldrb	r2, [r7, #15]
 8002798:	6879      	ldr	r1, [r7, #4]
 800279a:	4613      	mov	r3, r2
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	4413      	add	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	440b      	add	r3, r1
 80027a4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80027ac:	7bfa      	ldrb	r2, [r7, #15]
 80027ae:	6879      	ldr	r1, [r7, #4]
 80027b0:	4613      	mov	r3, r2
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	4413      	add	r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	440b      	add	r3, r1
 80027ba:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027c2:	7bfb      	ldrb	r3, [r7, #15]
 80027c4:	3301      	adds	r3, #1
 80027c6:	73fb      	strb	r3, [r7, #15]
 80027c8:	7bfa      	ldrb	r2, [r7, #15]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d3b5      	bcc.n	800273e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	603b      	str	r3, [r7, #0]
 80027d8:	687e      	ldr	r6, [r7, #4]
 80027da:	466d      	mov	r5, sp
 80027dc:	f106 0410 	add.w	r4, r6, #16
 80027e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80027ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80027f0:	1d33      	adds	r3, r6, #4
 80027f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027f4:	6838      	ldr	r0, [r7, #0]
 80027f6:	f003 fcef 	bl	80061d8 <USB_DevInit>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d005      	beq.n	800280c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2202      	movs	r2, #2
 8002804:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e014      	b.n	8002836 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002820:	2b01      	cmp	r3, #1
 8002822:	d102      	bne.n	800282a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f000 f80b 	bl	8002840 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4618      	mov	r0, r3
 8002830:	f003 fead 	bl	800658e <USB_DevDisconnect>

  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3714      	adds	r7, #20
 800283a:	46bd      	mov	sp, r7
 800283c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002840 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2201      	movs	r2, #1
 8002852:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800286e:	4b05      	ldr	r3, [pc, #20]	; (8002884 <HAL_PCDEx_ActivateLPM+0x44>)
 8002870:	4313      	orrs	r3, r2
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3714      	adds	r7, #20
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr
 8002884:	10000003 	.word	0x10000003

08002888 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002890:	4b19      	ldr	r3, [pc, #100]	; (80028f8 <HAL_PWREx_ConfigSupply+0x70>)
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	f003 0304 	and.w	r3, r3, #4
 8002898:	2b04      	cmp	r3, #4
 800289a:	d00a      	beq.n	80028b2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800289c:	4b16      	ldr	r3, [pc, #88]	; (80028f8 <HAL_PWREx_ConfigSupply+0x70>)
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	f003 0307 	and.w	r3, r3, #7
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d001      	beq.n	80028ae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e01f      	b.n	80028ee <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80028ae:	2300      	movs	r3, #0
 80028b0:	e01d      	b.n	80028ee <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80028b2:	4b11      	ldr	r3, [pc, #68]	; (80028f8 <HAL_PWREx_ConfigSupply+0x70>)
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	f023 0207 	bic.w	r2, r3, #7
 80028ba:	490f      	ldr	r1, [pc, #60]	; (80028f8 <HAL_PWREx_ConfigSupply+0x70>)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4313      	orrs	r3, r2
 80028c0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80028c2:	f7fe ff95 	bl	80017f0 <HAL_GetTick>
 80028c6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80028c8:	e009      	b.n	80028de <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80028ca:	f7fe ff91 	bl	80017f0 <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028d8:	d901      	bls.n	80028de <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e007      	b.n	80028ee <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80028de:	4b06      	ldr	r3, [pc, #24]	; (80028f8 <HAL_PWREx_ConfigSupply+0x70>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028ea:	d1ee      	bne.n	80028ca <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	58024800 	.word	0x58024800

080028fc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002900:	4b05      	ldr	r3, [pc, #20]	; (8002918 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	4a04      	ldr	r2, [pc, #16]	; (8002918 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002906:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800290a:	60d3      	str	r3, [r2, #12]
}
 800290c:	bf00      	nop
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	58024800 	.word	0x58024800

0800291c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b08c      	sub	sp, #48	; 0x30
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d102      	bne.n	8002930 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	f000 bc1d 	b.w	800316a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0301 	and.w	r3, r3, #1
 8002938:	2b00      	cmp	r3, #0
 800293a:	f000 8087 	beq.w	8002a4c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800293e:	4b99      	ldr	r3, [pc, #612]	; (8002ba4 <HAL_RCC_OscConfig+0x288>)
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002946:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002948:	4b96      	ldr	r3, [pc, #600]	; (8002ba4 <HAL_RCC_OscConfig+0x288>)
 800294a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800294e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002950:	2b10      	cmp	r3, #16
 8002952:	d007      	beq.n	8002964 <HAL_RCC_OscConfig+0x48>
 8002954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002956:	2b18      	cmp	r3, #24
 8002958:	d110      	bne.n	800297c <HAL_RCC_OscConfig+0x60>
 800295a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800295c:	f003 0303 	and.w	r3, r3, #3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d10b      	bne.n	800297c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002964:	4b8f      	ldr	r3, [pc, #572]	; (8002ba4 <HAL_RCC_OscConfig+0x288>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d06c      	beq.n	8002a4a <HAL_RCC_OscConfig+0x12e>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d168      	bne.n	8002a4a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e3f6      	b.n	800316a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002984:	d106      	bne.n	8002994 <HAL_RCC_OscConfig+0x78>
 8002986:	4b87      	ldr	r3, [pc, #540]	; (8002ba4 <HAL_RCC_OscConfig+0x288>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a86      	ldr	r2, [pc, #536]	; (8002ba4 <HAL_RCC_OscConfig+0x288>)
 800298c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002990:	6013      	str	r3, [r2, #0]
 8002992:	e02e      	b.n	80029f2 <HAL_RCC_OscConfig+0xd6>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d10c      	bne.n	80029b6 <HAL_RCC_OscConfig+0x9a>
 800299c:	4b81      	ldr	r3, [pc, #516]	; (8002ba4 <HAL_RCC_OscConfig+0x288>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a80      	ldr	r2, [pc, #512]	; (8002ba4 <HAL_RCC_OscConfig+0x288>)
 80029a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029a6:	6013      	str	r3, [r2, #0]
 80029a8:	4b7e      	ldr	r3, [pc, #504]	; (8002ba4 <HAL_RCC_OscConfig+0x288>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a7d      	ldr	r2, [pc, #500]	; (8002ba4 <HAL_RCC_OscConfig+0x288>)
 80029ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029b2:	6013      	str	r3, [r2, #0]
 80029b4:	e01d      	b.n	80029f2 <HAL_RCC_OscConfig+0xd6>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029be:	d10c      	bne.n	80029da <HAL_RCC_OscConfig+0xbe>
 80029c0:	4b78      	ldr	r3, [pc, #480]	; (8002ba4 <HAL_RCC_OscConfig+0x288>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a77      	ldr	r2, [pc, #476]	; (8002ba4 <HAL_RCC_OscConfig+0x288>)
 80029c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029ca:	6013      	str	r3, [r2, #0]
 80029cc:	4b75      	ldr	r3, [pc, #468]	; (8002ba4 <HAL_RCC_OscConfig+0x288>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a74      	ldr	r2, [pc, #464]	; (8002ba4 <HAL_RCC_OscConfig+0x288>)
 80029d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029d6:	6013      	str	r3, [r2, #0]
 80029d8:	e00b      	b.n	80029f2 <HAL_RCC_OscConfig+0xd6>
 80029da:	4b72      	ldr	r3, [pc, #456]	; (8002ba4 <HAL_RCC_OscConfig+0x288>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a71      	ldr	r2, [pc, #452]	; (8002ba4 <HAL_RCC_OscConfig+0x288>)
 80029e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029e4:	6013      	str	r3, [r2, #0]
 80029e6:	4b6f      	ldr	r3, [pc, #444]	; (8002ba4 <HAL_RCC_OscConfig+0x288>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a6e      	ldr	r2, [pc, #440]	; (8002ba4 <HAL_RCC_OscConfig+0x288>)
 80029ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029f0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d013      	beq.n	8002a22 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029fa:	f7fe fef9 	bl	80017f0 <HAL_GetTick>
 80029fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a00:	e008      	b.n	8002a14 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a02:	f7fe fef5 	bl	80017f0 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b64      	cmp	r3, #100	; 0x64
 8002a0e:	d901      	bls.n	8002a14 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e3aa      	b.n	800316a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a14:	4b63      	ldr	r3, [pc, #396]	; (8002ba4 <HAL_RCC_OscConfig+0x288>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d0f0      	beq.n	8002a02 <HAL_RCC_OscConfig+0xe6>
 8002a20:	e014      	b.n	8002a4c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a22:	f7fe fee5 	bl	80017f0 <HAL_GetTick>
 8002a26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a28:	e008      	b.n	8002a3c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a2a:	f7fe fee1 	bl	80017f0 <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b64      	cmp	r3, #100	; 0x64
 8002a36:	d901      	bls.n	8002a3c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e396      	b.n	800316a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a3c:	4b59      	ldr	r3, [pc, #356]	; (8002ba4 <HAL_RCC_OscConfig+0x288>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d1f0      	bne.n	8002a2a <HAL_RCC_OscConfig+0x10e>
 8002a48:	e000      	b.n	8002a4c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a4a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f000 80cb 	beq.w	8002bf0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a5a:	4b52      	ldr	r3, [pc, #328]	; (8002ba4 <HAL_RCC_OscConfig+0x288>)
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a62:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a64:	4b4f      	ldr	r3, [pc, #316]	; (8002ba4 <HAL_RCC_OscConfig+0x288>)
 8002a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a68:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002a6a:	6a3b      	ldr	r3, [r7, #32]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d007      	beq.n	8002a80 <HAL_RCC_OscConfig+0x164>
 8002a70:	6a3b      	ldr	r3, [r7, #32]
 8002a72:	2b18      	cmp	r3, #24
 8002a74:	d156      	bne.n	8002b24 <HAL_RCC_OscConfig+0x208>
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	f003 0303 	and.w	r3, r3, #3
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d151      	bne.n	8002b24 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a80:	4b48      	ldr	r3, [pc, #288]	; (8002ba4 <HAL_RCC_OscConfig+0x288>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d005      	beq.n	8002a98 <HAL_RCC_OscConfig+0x17c>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d101      	bne.n	8002a98 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e368      	b.n	800316a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002a98:	4b42      	ldr	r3, [pc, #264]	; (8002ba4 <HAL_RCC_OscConfig+0x288>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f023 0219 	bic.w	r2, r3, #25
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	493f      	ldr	r1, [pc, #252]	; (8002ba4 <HAL_RCC_OscConfig+0x288>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002aaa:	f7fe fea1 	bl	80017f0 <HAL_GetTick>
 8002aae:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ab0:	e008      	b.n	8002ac4 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ab2:	f7fe fe9d 	bl	80017f0 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d901      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e352      	b.n	800316a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ac4:	4b37      	ldr	r3, [pc, #220]	; (8002ba4 <HAL_RCC_OscConfig+0x288>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0304 	and.w	r3, r3, #4
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d0f0      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ad0:	f7fe febe 	bl	8001850 <HAL_GetREVID>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	f241 0203 	movw	r2, #4099	; 0x1003
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d817      	bhi.n	8002b0e <HAL_RCC_OscConfig+0x1f2>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	2b40      	cmp	r3, #64	; 0x40
 8002ae4:	d108      	bne.n	8002af8 <HAL_RCC_OscConfig+0x1dc>
 8002ae6:	4b2f      	ldr	r3, [pc, #188]	; (8002ba4 <HAL_RCC_OscConfig+0x288>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002aee:	4a2d      	ldr	r2, [pc, #180]	; (8002ba4 <HAL_RCC_OscConfig+0x288>)
 8002af0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002af4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002af6:	e07b      	b.n	8002bf0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002af8:	4b2a      	ldr	r3, [pc, #168]	; (8002ba4 <HAL_RCC_OscConfig+0x288>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	031b      	lsls	r3, r3, #12
 8002b06:	4927      	ldr	r1, [pc, #156]	; (8002ba4 <HAL_RCC_OscConfig+0x288>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b0c:	e070      	b.n	8002bf0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b0e:	4b25      	ldr	r3, [pc, #148]	; (8002ba4 <HAL_RCC_OscConfig+0x288>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	061b      	lsls	r3, r3, #24
 8002b1c:	4921      	ldr	r1, [pc, #132]	; (8002ba4 <HAL_RCC_OscConfig+0x288>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b22:	e065      	b.n	8002bf0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d048      	beq.n	8002bbe <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002b2c:	4b1d      	ldr	r3, [pc, #116]	; (8002ba4 <HAL_RCC_OscConfig+0x288>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f023 0219 	bic.w	r2, r3, #25
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	491a      	ldr	r1, [pc, #104]	; (8002ba4 <HAL_RCC_OscConfig+0x288>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b3e:	f7fe fe57 	bl	80017f0 <HAL_GetTick>
 8002b42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b44:	e008      	b.n	8002b58 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b46:	f7fe fe53 	bl	80017f0 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e308      	b.n	800316a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b58:	4b12      	ldr	r3, [pc, #72]	; (8002ba4 <HAL_RCC_OscConfig+0x288>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0304 	and.w	r3, r3, #4
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d0f0      	beq.n	8002b46 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b64:	f7fe fe74 	bl	8001850 <HAL_GetREVID>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	f241 0203 	movw	r2, #4099	; 0x1003
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d81a      	bhi.n	8002ba8 <HAL_RCC_OscConfig+0x28c>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	2b40      	cmp	r3, #64	; 0x40
 8002b78:	d108      	bne.n	8002b8c <HAL_RCC_OscConfig+0x270>
 8002b7a:	4b0a      	ldr	r3, [pc, #40]	; (8002ba4 <HAL_RCC_OscConfig+0x288>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002b82:	4a08      	ldr	r2, [pc, #32]	; (8002ba4 <HAL_RCC_OscConfig+0x288>)
 8002b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b88:	6053      	str	r3, [r2, #4]
 8002b8a:	e031      	b.n	8002bf0 <HAL_RCC_OscConfig+0x2d4>
 8002b8c:	4b05      	ldr	r3, [pc, #20]	; (8002ba4 <HAL_RCC_OscConfig+0x288>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	031b      	lsls	r3, r3, #12
 8002b9a:	4902      	ldr	r1, [pc, #8]	; (8002ba4 <HAL_RCC_OscConfig+0x288>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	604b      	str	r3, [r1, #4]
 8002ba0:	e026      	b.n	8002bf0 <HAL_RCC_OscConfig+0x2d4>
 8002ba2:	bf00      	nop
 8002ba4:	58024400 	.word	0x58024400
 8002ba8:	4b9a      	ldr	r3, [pc, #616]	; (8002e14 <HAL_RCC_OscConfig+0x4f8>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	691b      	ldr	r3, [r3, #16]
 8002bb4:	061b      	lsls	r3, r3, #24
 8002bb6:	4997      	ldr	r1, [pc, #604]	; (8002e14 <HAL_RCC_OscConfig+0x4f8>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	604b      	str	r3, [r1, #4]
 8002bbc:	e018      	b.n	8002bf0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bbe:	4b95      	ldr	r3, [pc, #596]	; (8002e14 <HAL_RCC_OscConfig+0x4f8>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a94      	ldr	r2, [pc, #592]	; (8002e14 <HAL_RCC_OscConfig+0x4f8>)
 8002bc4:	f023 0301 	bic.w	r3, r3, #1
 8002bc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bca:	f7fe fe11 	bl	80017f0 <HAL_GetTick>
 8002bce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002bd0:	e008      	b.n	8002be4 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bd2:	f7fe fe0d 	bl	80017f0 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d901      	bls.n	8002be4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e2c2      	b.n	800316a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002be4:	4b8b      	ldr	r3, [pc, #556]	; (8002e14 <HAL_RCC_OscConfig+0x4f8>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0304 	and.w	r3, r3, #4
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1f0      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0310 	and.w	r3, r3, #16
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f000 80a9 	beq.w	8002d50 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bfe:	4b85      	ldr	r3, [pc, #532]	; (8002e14 <HAL_RCC_OscConfig+0x4f8>)
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c06:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c08:	4b82      	ldr	r3, [pc, #520]	; (8002e14 <HAL_RCC_OscConfig+0x4f8>)
 8002c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	2b08      	cmp	r3, #8
 8002c12:	d007      	beq.n	8002c24 <HAL_RCC_OscConfig+0x308>
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	2b18      	cmp	r3, #24
 8002c18:	d13a      	bne.n	8002c90 <HAL_RCC_OscConfig+0x374>
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	f003 0303 	and.w	r3, r3, #3
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d135      	bne.n	8002c90 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c24:	4b7b      	ldr	r3, [pc, #492]	; (8002e14 <HAL_RCC_OscConfig+0x4f8>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d005      	beq.n	8002c3c <HAL_RCC_OscConfig+0x320>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	69db      	ldr	r3, [r3, #28]
 8002c34:	2b80      	cmp	r3, #128	; 0x80
 8002c36:	d001      	beq.n	8002c3c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e296      	b.n	800316a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c3c:	f7fe fe08 	bl	8001850 <HAL_GetREVID>
 8002c40:	4603      	mov	r3, r0
 8002c42:	f241 0203 	movw	r2, #4099	; 0x1003
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d817      	bhi.n	8002c7a <HAL_RCC_OscConfig+0x35e>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	2b20      	cmp	r3, #32
 8002c50:	d108      	bne.n	8002c64 <HAL_RCC_OscConfig+0x348>
 8002c52:	4b70      	ldr	r3, [pc, #448]	; (8002e14 <HAL_RCC_OscConfig+0x4f8>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002c5a:	4a6e      	ldr	r2, [pc, #440]	; (8002e14 <HAL_RCC_OscConfig+0x4f8>)
 8002c5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c60:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c62:	e075      	b.n	8002d50 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c64:	4b6b      	ldr	r3, [pc, #428]	; (8002e14 <HAL_RCC_OscConfig+0x4f8>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a1b      	ldr	r3, [r3, #32]
 8002c70:	069b      	lsls	r3, r3, #26
 8002c72:	4968      	ldr	r1, [pc, #416]	; (8002e14 <HAL_RCC_OscConfig+0x4f8>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c78:	e06a      	b.n	8002d50 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c7a:	4b66      	ldr	r3, [pc, #408]	; (8002e14 <HAL_RCC_OscConfig+0x4f8>)
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a1b      	ldr	r3, [r3, #32]
 8002c86:	061b      	lsls	r3, r3, #24
 8002c88:	4962      	ldr	r1, [pc, #392]	; (8002e14 <HAL_RCC_OscConfig+0x4f8>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c8e:	e05f      	b.n	8002d50 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	69db      	ldr	r3, [r3, #28]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d042      	beq.n	8002d1e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002c98:	4b5e      	ldr	r3, [pc, #376]	; (8002e14 <HAL_RCC_OscConfig+0x4f8>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a5d      	ldr	r2, [pc, #372]	; (8002e14 <HAL_RCC_OscConfig+0x4f8>)
 8002c9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ca2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca4:	f7fe fda4 	bl	80017f0 <HAL_GetTick>
 8002ca8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002cac:	f7fe fda0 	bl	80017f0 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e255      	b.n	800316a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002cbe:	4b55      	ldr	r3, [pc, #340]	; (8002e14 <HAL_RCC_OscConfig+0x4f8>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d0f0      	beq.n	8002cac <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002cca:	f7fe fdc1 	bl	8001850 <HAL_GetREVID>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	f241 0203 	movw	r2, #4099	; 0x1003
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d817      	bhi.n	8002d08 <HAL_RCC_OscConfig+0x3ec>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	2b20      	cmp	r3, #32
 8002cde:	d108      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x3d6>
 8002ce0:	4b4c      	ldr	r3, [pc, #304]	; (8002e14 <HAL_RCC_OscConfig+0x4f8>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002ce8:	4a4a      	ldr	r2, [pc, #296]	; (8002e14 <HAL_RCC_OscConfig+0x4f8>)
 8002cea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002cee:	6053      	str	r3, [r2, #4]
 8002cf0:	e02e      	b.n	8002d50 <HAL_RCC_OscConfig+0x434>
 8002cf2:	4b48      	ldr	r3, [pc, #288]	; (8002e14 <HAL_RCC_OscConfig+0x4f8>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
 8002cfe:	069b      	lsls	r3, r3, #26
 8002d00:	4944      	ldr	r1, [pc, #272]	; (8002e14 <HAL_RCC_OscConfig+0x4f8>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	604b      	str	r3, [r1, #4]
 8002d06:	e023      	b.n	8002d50 <HAL_RCC_OscConfig+0x434>
 8002d08:	4b42      	ldr	r3, [pc, #264]	; (8002e14 <HAL_RCC_OscConfig+0x4f8>)
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a1b      	ldr	r3, [r3, #32]
 8002d14:	061b      	lsls	r3, r3, #24
 8002d16:	493f      	ldr	r1, [pc, #252]	; (8002e14 <HAL_RCC_OscConfig+0x4f8>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	60cb      	str	r3, [r1, #12]
 8002d1c:	e018      	b.n	8002d50 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002d1e:	4b3d      	ldr	r3, [pc, #244]	; (8002e14 <HAL_RCC_OscConfig+0x4f8>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a3c      	ldr	r2, [pc, #240]	; (8002e14 <HAL_RCC_OscConfig+0x4f8>)
 8002d24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d2a:	f7fe fd61 	bl	80017f0 <HAL_GetTick>
 8002d2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002d30:	e008      	b.n	8002d44 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002d32:	f7fe fd5d 	bl	80017f0 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e212      	b.n	800316a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002d44:	4b33      	ldr	r3, [pc, #204]	; (8002e14 <HAL_RCC_OscConfig+0x4f8>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1f0      	bne.n	8002d32 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0308 	and.w	r3, r3, #8
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d036      	beq.n	8002dca <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	695b      	ldr	r3, [r3, #20]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d019      	beq.n	8002d98 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d64:	4b2b      	ldr	r3, [pc, #172]	; (8002e14 <HAL_RCC_OscConfig+0x4f8>)
 8002d66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d68:	4a2a      	ldr	r2, [pc, #168]	; (8002e14 <HAL_RCC_OscConfig+0x4f8>)
 8002d6a:	f043 0301 	orr.w	r3, r3, #1
 8002d6e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d70:	f7fe fd3e 	bl	80017f0 <HAL_GetTick>
 8002d74:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d76:	e008      	b.n	8002d8a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d78:	f7fe fd3a 	bl	80017f0 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e1ef      	b.n	800316a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d8a:	4b22      	ldr	r3, [pc, #136]	; (8002e14 <HAL_RCC_OscConfig+0x4f8>)
 8002d8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d0f0      	beq.n	8002d78 <HAL_RCC_OscConfig+0x45c>
 8002d96:	e018      	b.n	8002dca <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d98:	4b1e      	ldr	r3, [pc, #120]	; (8002e14 <HAL_RCC_OscConfig+0x4f8>)
 8002d9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d9c:	4a1d      	ldr	r2, [pc, #116]	; (8002e14 <HAL_RCC_OscConfig+0x4f8>)
 8002d9e:	f023 0301 	bic.w	r3, r3, #1
 8002da2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da4:	f7fe fd24 	bl	80017f0 <HAL_GetTick>
 8002da8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002daa:	e008      	b.n	8002dbe <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dac:	f7fe fd20 	bl	80017f0 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e1d5      	b.n	800316a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002dbe:	4b15      	ldr	r3, [pc, #84]	; (8002e14 <HAL_RCC_OscConfig+0x4f8>)
 8002dc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1f0      	bne.n	8002dac <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0320 	and.w	r3, r3, #32
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d039      	beq.n	8002e4a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d01c      	beq.n	8002e18 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002dde:	4b0d      	ldr	r3, [pc, #52]	; (8002e14 <HAL_RCC_OscConfig+0x4f8>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a0c      	ldr	r2, [pc, #48]	; (8002e14 <HAL_RCC_OscConfig+0x4f8>)
 8002de4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002de8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002dea:	f7fe fd01 	bl	80017f0 <HAL_GetTick>
 8002dee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002df0:	e008      	b.n	8002e04 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002df2:	f7fe fcfd 	bl	80017f0 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e1b2      	b.n	800316a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002e04:	4b03      	ldr	r3, [pc, #12]	; (8002e14 <HAL_RCC_OscConfig+0x4f8>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d0f0      	beq.n	8002df2 <HAL_RCC_OscConfig+0x4d6>
 8002e10:	e01b      	b.n	8002e4a <HAL_RCC_OscConfig+0x52e>
 8002e12:	bf00      	nop
 8002e14:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e18:	4b9b      	ldr	r3, [pc, #620]	; (8003088 <HAL_RCC_OscConfig+0x76c>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a9a      	ldr	r2, [pc, #616]	; (8003088 <HAL_RCC_OscConfig+0x76c>)
 8002e1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e22:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002e24:	f7fe fce4 	bl	80017f0 <HAL_GetTick>
 8002e28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002e2c:	f7fe fce0 	bl	80017f0 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e195      	b.n	800316a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e3e:	4b92      	ldr	r3, [pc, #584]	; (8003088 <HAL_RCC_OscConfig+0x76c>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1f0      	bne.n	8002e2c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0304 	and.w	r3, r3, #4
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f000 8081 	beq.w	8002f5a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002e58:	4b8c      	ldr	r3, [pc, #560]	; (800308c <HAL_RCC_OscConfig+0x770>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a8b      	ldr	r2, [pc, #556]	; (800308c <HAL_RCC_OscConfig+0x770>)
 8002e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e62:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e64:	f7fe fcc4 	bl	80017f0 <HAL_GetTick>
 8002e68:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002e6c:	f7fe fcc0 	bl	80017f0 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b64      	cmp	r3, #100	; 0x64
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e175      	b.n	800316a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e7e:	4b83      	ldr	r3, [pc, #524]	; (800308c <HAL_RCC_OscConfig+0x770>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d0f0      	beq.n	8002e6c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d106      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x584>
 8002e92:	4b7d      	ldr	r3, [pc, #500]	; (8003088 <HAL_RCC_OscConfig+0x76c>)
 8002e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e96:	4a7c      	ldr	r2, [pc, #496]	; (8003088 <HAL_RCC_OscConfig+0x76c>)
 8002e98:	f043 0301 	orr.w	r3, r3, #1
 8002e9c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e9e:	e02d      	b.n	8002efc <HAL_RCC_OscConfig+0x5e0>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d10c      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x5a6>
 8002ea8:	4b77      	ldr	r3, [pc, #476]	; (8003088 <HAL_RCC_OscConfig+0x76c>)
 8002eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eac:	4a76      	ldr	r2, [pc, #472]	; (8003088 <HAL_RCC_OscConfig+0x76c>)
 8002eae:	f023 0301 	bic.w	r3, r3, #1
 8002eb2:	6713      	str	r3, [r2, #112]	; 0x70
 8002eb4:	4b74      	ldr	r3, [pc, #464]	; (8003088 <HAL_RCC_OscConfig+0x76c>)
 8002eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb8:	4a73      	ldr	r2, [pc, #460]	; (8003088 <HAL_RCC_OscConfig+0x76c>)
 8002eba:	f023 0304 	bic.w	r3, r3, #4
 8002ebe:	6713      	str	r3, [r2, #112]	; 0x70
 8002ec0:	e01c      	b.n	8002efc <HAL_RCC_OscConfig+0x5e0>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	2b05      	cmp	r3, #5
 8002ec8:	d10c      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x5c8>
 8002eca:	4b6f      	ldr	r3, [pc, #444]	; (8003088 <HAL_RCC_OscConfig+0x76c>)
 8002ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ece:	4a6e      	ldr	r2, [pc, #440]	; (8003088 <HAL_RCC_OscConfig+0x76c>)
 8002ed0:	f043 0304 	orr.w	r3, r3, #4
 8002ed4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ed6:	4b6c      	ldr	r3, [pc, #432]	; (8003088 <HAL_RCC_OscConfig+0x76c>)
 8002ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eda:	4a6b      	ldr	r2, [pc, #428]	; (8003088 <HAL_RCC_OscConfig+0x76c>)
 8002edc:	f043 0301 	orr.w	r3, r3, #1
 8002ee0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ee2:	e00b      	b.n	8002efc <HAL_RCC_OscConfig+0x5e0>
 8002ee4:	4b68      	ldr	r3, [pc, #416]	; (8003088 <HAL_RCC_OscConfig+0x76c>)
 8002ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee8:	4a67      	ldr	r2, [pc, #412]	; (8003088 <HAL_RCC_OscConfig+0x76c>)
 8002eea:	f023 0301 	bic.w	r3, r3, #1
 8002eee:	6713      	str	r3, [r2, #112]	; 0x70
 8002ef0:	4b65      	ldr	r3, [pc, #404]	; (8003088 <HAL_RCC_OscConfig+0x76c>)
 8002ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef4:	4a64      	ldr	r2, [pc, #400]	; (8003088 <HAL_RCC_OscConfig+0x76c>)
 8002ef6:	f023 0304 	bic.w	r3, r3, #4
 8002efa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d015      	beq.n	8002f30 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f04:	f7fe fc74 	bl	80017f0 <HAL_GetTick>
 8002f08:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f0a:	e00a      	b.n	8002f22 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f0c:	f7fe fc70 	bl	80017f0 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e123      	b.n	800316a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f22:	4b59      	ldr	r3, [pc, #356]	; (8003088 <HAL_RCC_OscConfig+0x76c>)
 8002f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d0ee      	beq.n	8002f0c <HAL_RCC_OscConfig+0x5f0>
 8002f2e:	e014      	b.n	8002f5a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f30:	f7fe fc5e 	bl	80017f0 <HAL_GetTick>
 8002f34:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f36:	e00a      	b.n	8002f4e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f38:	f7fe fc5a 	bl	80017f0 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e10d      	b.n	800316a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f4e:	4b4e      	ldr	r3, [pc, #312]	; (8003088 <HAL_RCC_OscConfig+0x76c>)
 8002f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1ee      	bne.n	8002f38 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	f000 8102 	beq.w	8003168 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002f64:	4b48      	ldr	r3, [pc, #288]	; (8003088 <HAL_RCC_OscConfig+0x76c>)
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f6c:	2b18      	cmp	r3, #24
 8002f6e:	f000 80bd 	beq.w	80030ec <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	f040 809e 	bne.w	80030b8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f7c:	4b42      	ldr	r3, [pc, #264]	; (8003088 <HAL_RCC_OscConfig+0x76c>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a41      	ldr	r2, [pc, #260]	; (8003088 <HAL_RCC_OscConfig+0x76c>)
 8002f82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f88:	f7fe fc32 	bl	80017f0 <HAL_GetTick>
 8002f8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f90:	f7fe fc2e 	bl	80017f0 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e0e3      	b.n	800316a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002fa2:	4b39      	ldr	r3, [pc, #228]	; (8003088 <HAL_RCC_OscConfig+0x76c>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1f0      	bne.n	8002f90 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fae:	4b36      	ldr	r3, [pc, #216]	; (8003088 <HAL_RCC_OscConfig+0x76c>)
 8002fb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fb2:	4b37      	ldr	r3, [pc, #220]	; (8003090 <HAL_RCC_OscConfig+0x774>)
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002fbe:	0112      	lsls	r2, r2, #4
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	4931      	ldr	r1, [pc, #196]	; (8003088 <HAL_RCC_OscConfig+0x76c>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	628b      	str	r3, [r1, #40]	; 0x28
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	025b      	lsls	r3, r3, #9
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	431a      	orrs	r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	041b      	lsls	r3, r3, #16
 8002fe6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002fea:	431a      	orrs	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	061b      	lsls	r3, r3, #24
 8002ff4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002ff8:	4923      	ldr	r1, [pc, #140]	; (8003088 <HAL_RCC_OscConfig+0x76c>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002ffe:	4b22      	ldr	r3, [pc, #136]	; (8003088 <HAL_RCC_OscConfig+0x76c>)
 8003000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003002:	4a21      	ldr	r2, [pc, #132]	; (8003088 <HAL_RCC_OscConfig+0x76c>)
 8003004:	f023 0301 	bic.w	r3, r3, #1
 8003008:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800300a:	4b1f      	ldr	r3, [pc, #124]	; (8003088 <HAL_RCC_OscConfig+0x76c>)
 800300c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800300e:	4b21      	ldr	r3, [pc, #132]	; (8003094 <HAL_RCC_OscConfig+0x778>)
 8003010:	4013      	ands	r3, r2
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003016:	00d2      	lsls	r2, r2, #3
 8003018:	491b      	ldr	r1, [pc, #108]	; (8003088 <HAL_RCC_OscConfig+0x76c>)
 800301a:	4313      	orrs	r3, r2
 800301c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800301e:	4b1a      	ldr	r3, [pc, #104]	; (8003088 <HAL_RCC_OscConfig+0x76c>)
 8003020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003022:	f023 020c 	bic.w	r2, r3, #12
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302a:	4917      	ldr	r1, [pc, #92]	; (8003088 <HAL_RCC_OscConfig+0x76c>)
 800302c:	4313      	orrs	r3, r2
 800302e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003030:	4b15      	ldr	r3, [pc, #84]	; (8003088 <HAL_RCC_OscConfig+0x76c>)
 8003032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003034:	f023 0202 	bic.w	r2, r3, #2
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303c:	4912      	ldr	r1, [pc, #72]	; (8003088 <HAL_RCC_OscConfig+0x76c>)
 800303e:	4313      	orrs	r3, r2
 8003040:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003042:	4b11      	ldr	r3, [pc, #68]	; (8003088 <HAL_RCC_OscConfig+0x76c>)
 8003044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003046:	4a10      	ldr	r2, [pc, #64]	; (8003088 <HAL_RCC_OscConfig+0x76c>)
 8003048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800304c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800304e:	4b0e      	ldr	r3, [pc, #56]	; (8003088 <HAL_RCC_OscConfig+0x76c>)
 8003050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003052:	4a0d      	ldr	r2, [pc, #52]	; (8003088 <HAL_RCC_OscConfig+0x76c>)
 8003054:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003058:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800305a:	4b0b      	ldr	r3, [pc, #44]	; (8003088 <HAL_RCC_OscConfig+0x76c>)
 800305c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305e:	4a0a      	ldr	r2, [pc, #40]	; (8003088 <HAL_RCC_OscConfig+0x76c>)
 8003060:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003064:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003066:	4b08      	ldr	r3, [pc, #32]	; (8003088 <HAL_RCC_OscConfig+0x76c>)
 8003068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306a:	4a07      	ldr	r2, [pc, #28]	; (8003088 <HAL_RCC_OscConfig+0x76c>)
 800306c:	f043 0301 	orr.w	r3, r3, #1
 8003070:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003072:	4b05      	ldr	r3, [pc, #20]	; (8003088 <HAL_RCC_OscConfig+0x76c>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a04      	ldr	r2, [pc, #16]	; (8003088 <HAL_RCC_OscConfig+0x76c>)
 8003078:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800307c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307e:	f7fe fbb7 	bl	80017f0 <HAL_GetTick>
 8003082:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003084:	e011      	b.n	80030aa <HAL_RCC_OscConfig+0x78e>
 8003086:	bf00      	nop
 8003088:	58024400 	.word	0x58024400
 800308c:	58024800 	.word	0x58024800
 8003090:	fffffc0c 	.word	0xfffffc0c
 8003094:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003098:	f7fe fbaa 	bl	80017f0 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e05f      	b.n	800316a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80030aa:	4b32      	ldr	r3, [pc, #200]	; (8003174 <HAL_RCC_OscConfig+0x858>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d0f0      	beq.n	8003098 <HAL_RCC_OscConfig+0x77c>
 80030b6:	e057      	b.n	8003168 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030b8:	4b2e      	ldr	r3, [pc, #184]	; (8003174 <HAL_RCC_OscConfig+0x858>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a2d      	ldr	r2, [pc, #180]	; (8003174 <HAL_RCC_OscConfig+0x858>)
 80030be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c4:	f7fe fb94 	bl	80017f0 <HAL_GetTick>
 80030c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030ca:	e008      	b.n	80030de <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030cc:	f7fe fb90 	bl	80017f0 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e045      	b.n	800316a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030de:	4b25      	ldr	r3, [pc, #148]	; (8003174 <HAL_RCC_OscConfig+0x858>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1f0      	bne.n	80030cc <HAL_RCC_OscConfig+0x7b0>
 80030ea:	e03d      	b.n	8003168 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80030ec:	4b21      	ldr	r3, [pc, #132]	; (8003174 <HAL_RCC_OscConfig+0x858>)
 80030ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80030f2:	4b20      	ldr	r3, [pc, #128]	; (8003174 <HAL_RCC_OscConfig+0x858>)
 80030f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d031      	beq.n	8003164 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	f003 0203 	and.w	r2, r3, #3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800310a:	429a      	cmp	r2, r3
 800310c:	d12a      	bne.n	8003164 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	091b      	lsrs	r3, r3, #4
 8003112:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800311a:	429a      	cmp	r2, r3
 800311c:	d122      	bne.n	8003164 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003128:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800312a:	429a      	cmp	r2, r3
 800312c:	d11a      	bne.n	8003164 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	0a5b      	lsrs	r3, r3, #9
 8003132:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800313a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800313c:	429a      	cmp	r2, r3
 800313e:	d111      	bne.n	8003164 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	0c1b      	lsrs	r3, r3, #16
 8003144:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800314c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800314e:	429a      	cmp	r2, r3
 8003150:	d108      	bne.n	8003164 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	0e1b      	lsrs	r3, r3, #24
 8003156:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800315e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003160:	429a      	cmp	r2, r3
 8003162:	d001      	beq.n	8003168 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e000      	b.n	800316a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3730      	adds	r7, #48	; 0x30
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	58024400 	.word	0x58024400

08003178 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b086      	sub	sp, #24
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d101      	bne.n	800318c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e19c      	b.n	80034c6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800318c:	4b8a      	ldr	r3, [pc, #552]	; (80033b8 <HAL_RCC_ClockConfig+0x240>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 030f 	and.w	r3, r3, #15
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	429a      	cmp	r2, r3
 8003198:	d910      	bls.n	80031bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800319a:	4b87      	ldr	r3, [pc, #540]	; (80033b8 <HAL_RCC_ClockConfig+0x240>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f023 020f 	bic.w	r2, r3, #15
 80031a2:	4985      	ldr	r1, [pc, #532]	; (80033b8 <HAL_RCC_ClockConfig+0x240>)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031aa:	4b83      	ldr	r3, [pc, #524]	; (80033b8 <HAL_RCC_ClockConfig+0x240>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 030f 	and.w	r3, r3, #15
 80031b2:	683a      	ldr	r2, [r7, #0]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d001      	beq.n	80031bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e184      	b.n	80034c6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0304 	and.w	r3, r3, #4
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d010      	beq.n	80031ea <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	691a      	ldr	r2, [r3, #16]
 80031cc:	4b7b      	ldr	r3, [pc, #492]	; (80033bc <HAL_RCC_ClockConfig+0x244>)
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d908      	bls.n	80031ea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80031d8:	4b78      	ldr	r3, [pc, #480]	; (80033bc <HAL_RCC_ClockConfig+0x244>)
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	4975      	ldr	r1, [pc, #468]	; (80033bc <HAL_RCC_ClockConfig+0x244>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0308 	and.w	r3, r3, #8
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d010      	beq.n	8003218 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	695a      	ldr	r2, [r3, #20]
 80031fa:	4b70      	ldr	r3, [pc, #448]	; (80033bc <HAL_RCC_ClockConfig+0x244>)
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003202:	429a      	cmp	r2, r3
 8003204:	d908      	bls.n	8003218 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003206:	4b6d      	ldr	r3, [pc, #436]	; (80033bc <HAL_RCC_ClockConfig+0x244>)
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	496a      	ldr	r1, [pc, #424]	; (80033bc <HAL_RCC_ClockConfig+0x244>)
 8003214:	4313      	orrs	r3, r2
 8003216:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0310 	and.w	r3, r3, #16
 8003220:	2b00      	cmp	r3, #0
 8003222:	d010      	beq.n	8003246 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	699a      	ldr	r2, [r3, #24]
 8003228:	4b64      	ldr	r3, [pc, #400]	; (80033bc <HAL_RCC_ClockConfig+0x244>)
 800322a:	69db      	ldr	r3, [r3, #28]
 800322c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003230:	429a      	cmp	r2, r3
 8003232:	d908      	bls.n	8003246 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003234:	4b61      	ldr	r3, [pc, #388]	; (80033bc <HAL_RCC_ClockConfig+0x244>)
 8003236:	69db      	ldr	r3, [r3, #28]
 8003238:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	495e      	ldr	r1, [pc, #376]	; (80033bc <HAL_RCC_ClockConfig+0x244>)
 8003242:	4313      	orrs	r3, r2
 8003244:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0320 	and.w	r3, r3, #32
 800324e:	2b00      	cmp	r3, #0
 8003250:	d010      	beq.n	8003274 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	69da      	ldr	r2, [r3, #28]
 8003256:	4b59      	ldr	r3, [pc, #356]	; (80033bc <HAL_RCC_ClockConfig+0x244>)
 8003258:	6a1b      	ldr	r3, [r3, #32]
 800325a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800325e:	429a      	cmp	r2, r3
 8003260:	d908      	bls.n	8003274 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003262:	4b56      	ldr	r3, [pc, #344]	; (80033bc <HAL_RCC_ClockConfig+0x244>)
 8003264:	6a1b      	ldr	r3, [r3, #32]
 8003266:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	69db      	ldr	r3, [r3, #28]
 800326e:	4953      	ldr	r1, [pc, #332]	; (80033bc <HAL_RCC_ClockConfig+0x244>)
 8003270:	4313      	orrs	r3, r2
 8003272:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0302 	and.w	r3, r3, #2
 800327c:	2b00      	cmp	r3, #0
 800327e:	d010      	beq.n	80032a2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	68da      	ldr	r2, [r3, #12]
 8003284:	4b4d      	ldr	r3, [pc, #308]	; (80033bc <HAL_RCC_ClockConfig+0x244>)
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	f003 030f 	and.w	r3, r3, #15
 800328c:	429a      	cmp	r2, r3
 800328e:	d908      	bls.n	80032a2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003290:	4b4a      	ldr	r3, [pc, #296]	; (80033bc <HAL_RCC_ClockConfig+0x244>)
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	f023 020f 	bic.w	r2, r3, #15
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	4947      	ldr	r1, [pc, #284]	; (80033bc <HAL_RCC_ClockConfig+0x244>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d055      	beq.n	800335a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80032ae:	4b43      	ldr	r3, [pc, #268]	; (80033bc <HAL_RCC_ClockConfig+0x244>)
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	4940      	ldr	r1, [pc, #256]	; (80033bc <HAL_RCC_ClockConfig+0x244>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d107      	bne.n	80032d8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032c8:	4b3c      	ldr	r3, [pc, #240]	; (80033bc <HAL_RCC_ClockConfig+0x244>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d121      	bne.n	8003318 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e0f6      	b.n	80034c6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	2b03      	cmp	r3, #3
 80032de:	d107      	bne.n	80032f0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032e0:	4b36      	ldr	r3, [pc, #216]	; (80033bc <HAL_RCC_ClockConfig+0x244>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d115      	bne.n	8003318 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e0ea      	b.n	80034c6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d107      	bne.n	8003308 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80032f8:	4b30      	ldr	r3, [pc, #192]	; (80033bc <HAL_RCC_ClockConfig+0x244>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003300:	2b00      	cmp	r3, #0
 8003302:	d109      	bne.n	8003318 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e0de      	b.n	80034c6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003308:	4b2c      	ldr	r3, [pc, #176]	; (80033bc <HAL_RCC_ClockConfig+0x244>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0304 	and.w	r3, r3, #4
 8003310:	2b00      	cmp	r3, #0
 8003312:	d101      	bne.n	8003318 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e0d6      	b.n	80034c6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003318:	4b28      	ldr	r3, [pc, #160]	; (80033bc <HAL_RCC_ClockConfig+0x244>)
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	f023 0207 	bic.w	r2, r3, #7
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	4925      	ldr	r1, [pc, #148]	; (80033bc <HAL_RCC_ClockConfig+0x244>)
 8003326:	4313      	orrs	r3, r2
 8003328:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800332a:	f7fe fa61 	bl	80017f0 <HAL_GetTick>
 800332e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003330:	e00a      	b.n	8003348 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003332:	f7fe fa5d 	bl	80017f0 <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003340:	4293      	cmp	r3, r2
 8003342:	d901      	bls.n	8003348 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e0be      	b.n	80034c6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003348:	4b1c      	ldr	r3, [pc, #112]	; (80033bc <HAL_RCC_ClockConfig+0x244>)
 800334a:	691b      	ldr	r3, [r3, #16]
 800334c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	00db      	lsls	r3, r3, #3
 8003356:	429a      	cmp	r2, r3
 8003358:	d1eb      	bne.n	8003332 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d010      	beq.n	8003388 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	68da      	ldr	r2, [r3, #12]
 800336a:	4b14      	ldr	r3, [pc, #80]	; (80033bc <HAL_RCC_ClockConfig+0x244>)
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	f003 030f 	and.w	r3, r3, #15
 8003372:	429a      	cmp	r2, r3
 8003374:	d208      	bcs.n	8003388 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003376:	4b11      	ldr	r3, [pc, #68]	; (80033bc <HAL_RCC_ClockConfig+0x244>)
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	f023 020f 	bic.w	r2, r3, #15
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	490e      	ldr	r1, [pc, #56]	; (80033bc <HAL_RCC_ClockConfig+0x244>)
 8003384:	4313      	orrs	r3, r2
 8003386:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003388:	4b0b      	ldr	r3, [pc, #44]	; (80033b8 <HAL_RCC_ClockConfig+0x240>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 030f 	and.w	r3, r3, #15
 8003390:	683a      	ldr	r2, [r7, #0]
 8003392:	429a      	cmp	r2, r3
 8003394:	d214      	bcs.n	80033c0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003396:	4b08      	ldr	r3, [pc, #32]	; (80033b8 <HAL_RCC_ClockConfig+0x240>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f023 020f 	bic.w	r2, r3, #15
 800339e:	4906      	ldr	r1, [pc, #24]	; (80033b8 <HAL_RCC_ClockConfig+0x240>)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033a6:	4b04      	ldr	r3, [pc, #16]	; (80033b8 <HAL_RCC_ClockConfig+0x240>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 030f 	and.w	r3, r3, #15
 80033ae:	683a      	ldr	r2, [r7, #0]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d005      	beq.n	80033c0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e086      	b.n	80034c6 <HAL_RCC_ClockConfig+0x34e>
 80033b8:	52002000 	.word	0x52002000
 80033bc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0304 	and.w	r3, r3, #4
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d010      	beq.n	80033ee <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	691a      	ldr	r2, [r3, #16]
 80033d0:	4b3f      	ldr	r3, [pc, #252]	; (80034d0 <HAL_RCC_ClockConfig+0x358>)
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033d8:	429a      	cmp	r2, r3
 80033da:	d208      	bcs.n	80033ee <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80033dc:	4b3c      	ldr	r3, [pc, #240]	; (80034d0 <HAL_RCC_ClockConfig+0x358>)
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	4939      	ldr	r1, [pc, #228]	; (80034d0 <HAL_RCC_ClockConfig+0x358>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0308 	and.w	r3, r3, #8
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d010      	beq.n	800341c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	695a      	ldr	r2, [r3, #20]
 80033fe:	4b34      	ldr	r3, [pc, #208]	; (80034d0 <HAL_RCC_ClockConfig+0x358>)
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003406:	429a      	cmp	r2, r3
 8003408:	d208      	bcs.n	800341c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800340a:	4b31      	ldr	r3, [pc, #196]	; (80034d0 <HAL_RCC_ClockConfig+0x358>)
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	492e      	ldr	r1, [pc, #184]	; (80034d0 <HAL_RCC_ClockConfig+0x358>)
 8003418:	4313      	orrs	r3, r2
 800341a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0310 	and.w	r3, r3, #16
 8003424:	2b00      	cmp	r3, #0
 8003426:	d010      	beq.n	800344a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	699a      	ldr	r2, [r3, #24]
 800342c:	4b28      	ldr	r3, [pc, #160]	; (80034d0 <HAL_RCC_ClockConfig+0x358>)
 800342e:	69db      	ldr	r3, [r3, #28]
 8003430:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003434:	429a      	cmp	r2, r3
 8003436:	d208      	bcs.n	800344a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003438:	4b25      	ldr	r3, [pc, #148]	; (80034d0 <HAL_RCC_ClockConfig+0x358>)
 800343a:	69db      	ldr	r3, [r3, #28]
 800343c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	4922      	ldr	r1, [pc, #136]	; (80034d0 <HAL_RCC_ClockConfig+0x358>)
 8003446:	4313      	orrs	r3, r2
 8003448:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0320 	and.w	r3, r3, #32
 8003452:	2b00      	cmp	r3, #0
 8003454:	d010      	beq.n	8003478 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	69da      	ldr	r2, [r3, #28]
 800345a:	4b1d      	ldr	r3, [pc, #116]	; (80034d0 <HAL_RCC_ClockConfig+0x358>)
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003462:	429a      	cmp	r2, r3
 8003464:	d208      	bcs.n	8003478 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003466:	4b1a      	ldr	r3, [pc, #104]	; (80034d0 <HAL_RCC_ClockConfig+0x358>)
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	4917      	ldr	r1, [pc, #92]	; (80034d0 <HAL_RCC_ClockConfig+0x358>)
 8003474:	4313      	orrs	r3, r2
 8003476:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003478:	f000 f834 	bl	80034e4 <HAL_RCC_GetSysClockFreq>
 800347c:	4602      	mov	r2, r0
 800347e:	4b14      	ldr	r3, [pc, #80]	; (80034d0 <HAL_RCC_ClockConfig+0x358>)
 8003480:	699b      	ldr	r3, [r3, #24]
 8003482:	0a1b      	lsrs	r3, r3, #8
 8003484:	f003 030f 	and.w	r3, r3, #15
 8003488:	4912      	ldr	r1, [pc, #72]	; (80034d4 <HAL_RCC_ClockConfig+0x35c>)
 800348a:	5ccb      	ldrb	r3, [r1, r3]
 800348c:	f003 031f 	and.w	r3, r3, #31
 8003490:	fa22 f303 	lsr.w	r3, r2, r3
 8003494:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003496:	4b0e      	ldr	r3, [pc, #56]	; (80034d0 <HAL_RCC_ClockConfig+0x358>)
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	f003 030f 	and.w	r3, r3, #15
 800349e:	4a0d      	ldr	r2, [pc, #52]	; (80034d4 <HAL_RCC_ClockConfig+0x35c>)
 80034a0:	5cd3      	ldrb	r3, [r2, r3]
 80034a2:	f003 031f 	and.w	r3, r3, #31
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	fa22 f303 	lsr.w	r3, r2, r3
 80034ac:	4a0a      	ldr	r2, [pc, #40]	; (80034d8 <HAL_RCC_ClockConfig+0x360>)
 80034ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80034b0:	4a0a      	ldr	r2, [pc, #40]	; (80034dc <HAL_RCC_ClockConfig+0x364>)
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80034b6:	4b0a      	ldr	r3, [pc, #40]	; (80034e0 <HAL_RCC_ClockConfig+0x368>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7fe f94e 	bl	800175c <HAL_InitTick>
 80034c0:	4603      	mov	r3, r0
 80034c2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80034c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3718      	adds	r7, #24
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	58024400 	.word	0x58024400
 80034d4:	08006748 	.word	0x08006748
 80034d8:	24000014 	.word	0x24000014
 80034dc:	24000010 	.word	0x24000010
 80034e0:	24000018 	.word	0x24000018

080034e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b089      	sub	sp, #36	; 0x24
 80034e8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034ea:	4bb3      	ldr	r3, [pc, #716]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034f2:	2b18      	cmp	r3, #24
 80034f4:	f200 8155 	bhi.w	80037a2 <HAL_RCC_GetSysClockFreq+0x2be>
 80034f8:	a201      	add	r2, pc, #4	; (adr r2, 8003500 <HAL_RCC_GetSysClockFreq+0x1c>)
 80034fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034fe:	bf00      	nop
 8003500:	08003565 	.word	0x08003565
 8003504:	080037a3 	.word	0x080037a3
 8003508:	080037a3 	.word	0x080037a3
 800350c:	080037a3 	.word	0x080037a3
 8003510:	080037a3 	.word	0x080037a3
 8003514:	080037a3 	.word	0x080037a3
 8003518:	080037a3 	.word	0x080037a3
 800351c:	080037a3 	.word	0x080037a3
 8003520:	0800358b 	.word	0x0800358b
 8003524:	080037a3 	.word	0x080037a3
 8003528:	080037a3 	.word	0x080037a3
 800352c:	080037a3 	.word	0x080037a3
 8003530:	080037a3 	.word	0x080037a3
 8003534:	080037a3 	.word	0x080037a3
 8003538:	080037a3 	.word	0x080037a3
 800353c:	080037a3 	.word	0x080037a3
 8003540:	08003591 	.word	0x08003591
 8003544:	080037a3 	.word	0x080037a3
 8003548:	080037a3 	.word	0x080037a3
 800354c:	080037a3 	.word	0x080037a3
 8003550:	080037a3 	.word	0x080037a3
 8003554:	080037a3 	.word	0x080037a3
 8003558:	080037a3 	.word	0x080037a3
 800355c:	080037a3 	.word	0x080037a3
 8003560:	08003597 	.word	0x08003597
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003564:	4b94      	ldr	r3, [pc, #592]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0320 	and.w	r3, r3, #32
 800356c:	2b00      	cmp	r3, #0
 800356e:	d009      	beq.n	8003584 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003570:	4b91      	ldr	r3, [pc, #580]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	08db      	lsrs	r3, r3, #3
 8003576:	f003 0303 	and.w	r3, r3, #3
 800357a:	4a90      	ldr	r2, [pc, #576]	; (80037bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800357c:	fa22 f303 	lsr.w	r3, r2, r3
 8003580:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003582:	e111      	b.n	80037a8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003584:	4b8d      	ldr	r3, [pc, #564]	; (80037bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003586:	61bb      	str	r3, [r7, #24]
    break;
 8003588:	e10e      	b.n	80037a8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800358a:	4b8d      	ldr	r3, [pc, #564]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800358c:	61bb      	str	r3, [r7, #24]
    break;
 800358e:	e10b      	b.n	80037a8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003590:	4b8c      	ldr	r3, [pc, #560]	; (80037c4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003592:	61bb      	str	r3, [r7, #24]
    break;
 8003594:	e108      	b.n	80037a8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003596:	4b88      	ldr	r3, [pc, #544]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800359a:	f003 0303 	and.w	r3, r3, #3
 800359e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80035a0:	4b85      	ldr	r3, [pc, #532]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a4:	091b      	lsrs	r3, r3, #4
 80035a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035aa:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80035ac:	4b82      	ldr	r3, [pc, #520]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b0:	f003 0301 	and.w	r3, r3, #1
 80035b4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80035b6:	4b80      	ldr	r3, [pc, #512]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ba:	08db      	lsrs	r3, r3, #3
 80035bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	fb02 f303 	mul.w	r3, r2, r3
 80035c6:	ee07 3a90 	vmov	s15, r3
 80035ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035ce:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f000 80e1 	beq.w	800379c <HAL_RCC_GetSysClockFreq+0x2b8>
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	2b02      	cmp	r3, #2
 80035de:	f000 8083 	beq.w	80036e8 <HAL_RCC_GetSysClockFreq+0x204>
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	f200 80a1 	bhi.w	800372c <HAL_RCC_GetSysClockFreq+0x248>
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d003      	beq.n	80035f8 <HAL_RCC_GetSysClockFreq+0x114>
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d056      	beq.n	80036a4 <HAL_RCC_GetSysClockFreq+0x1c0>
 80035f6:	e099      	b.n	800372c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035f8:	4b6f      	ldr	r3, [pc, #444]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0320 	and.w	r3, r3, #32
 8003600:	2b00      	cmp	r3, #0
 8003602:	d02d      	beq.n	8003660 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003604:	4b6c      	ldr	r3, [pc, #432]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	08db      	lsrs	r3, r3, #3
 800360a:	f003 0303 	and.w	r3, r3, #3
 800360e:	4a6b      	ldr	r2, [pc, #428]	; (80037bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003610:	fa22 f303 	lsr.w	r3, r2, r3
 8003614:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	ee07 3a90 	vmov	s15, r3
 800361c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	ee07 3a90 	vmov	s15, r3
 8003626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800362a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800362e:	4b62      	ldr	r3, [pc, #392]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003636:	ee07 3a90 	vmov	s15, r3
 800363a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800363e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003642:	eddf 5a61 	vldr	s11, [pc, #388]	; 80037c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003646:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800364a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800364e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003652:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800365a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800365e:	e087      	b.n	8003770 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	ee07 3a90 	vmov	s15, r3
 8003666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800366a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80037cc <HAL_RCC_GetSysClockFreq+0x2e8>
 800366e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003672:	4b51      	ldr	r3, [pc, #324]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800367a:	ee07 3a90 	vmov	s15, r3
 800367e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003682:	ed97 6a02 	vldr	s12, [r7, #8]
 8003686:	eddf 5a50 	vldr	s11, [pc, #320]	; 80037c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800368a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800368e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003692:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003696:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800369a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800369e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80036a2:	e065      	b.n	8003770 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	ee07 3a90 	vmov	s15, r3
 80036aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036ae:	eddf 6a48 	vldr	s13, [pc, #288]	; 80037d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80036b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036b6:	4b40      	ldr	r3, [pc, #256]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036be:	ee07 3a90 	vmov	s15, r3
 80036c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80036ca:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80037c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80036ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80036e6:	e043      	b.n	8003770 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	ee07 3a90 	vmov	s15, r3
 80036ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036f2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80037d4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80036f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036fa:	4b2f      	ldr	r3, [pc, #188]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003702:	ee07 3a90 	vmov	s15, r3
 8003706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800370a:	ed97 6a02 	vldr	s12, [r7, #8]
 800370e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80037c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003712:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003716:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800371a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800371e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003726:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800372a:	e021      	b.n	8003770 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	ee07 3a90 	vmov	s15, r3
 8003732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003736:	eddf 6a26 	vldr	s13, [pc, #152]	; 80037d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800373a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800373e:	4b1e      	ldr	r3, [pc, #120]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003746:	ee07 3a90 	vmov	s15, r3
 800374a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800374e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003752:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80037c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003756:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800375a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800375e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800376a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800376e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003770:	4b11      	ldr	r3, [pc, #68]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003774:	0a5b      	lsrs	r3, r3, #9
 8003776:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800377a:	3301      	adds	r3, #1
 800377c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	ee07 3a90 	vmov	s15, r3
 8003784:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003788:	edd7 6a07 	vldr	s13, [r7, #28]
 800378c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003790:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003794:	ee17 3a90 	vmov	r3, s15
 8003798:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800379a:	e005      	b.n	80037a8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800379c:	2300      	movs	r3, #0
 800379e:	61bb      	str	r3, [r7, #24]
    break;
 80037a0:	e002      	b.n	80037a8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80037a2:	4b07      	ldr	r3, [pc, #28]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80037a4:	61bb      	str	r3, [r7, #24]
    break;
 80037a6:	bf00      	nop
  }

  return sysclockfreq;
 80037a8:	69bb      	ldr	r3, [r7, #24]
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3724      	adds	r7, #36	; 0x24
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	58024400 	.word	0x58024400
 80037bc:	03d09000 	.word	0x03d09000
 80037c0:	003d0900 	.word	0x003d0900
 80037c4:	007a1200 	.word	0x007a1200
 80037c8:	46000000 	.word	0x46000000
 80037cc:	4c742400 	.word	0x4c742400
 80037d0:	4a742400 	.word	0x4a742400
 80037d4:	4af42400 	.word	0x4af42400

080037d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80037de:	f7ff fe81 	bl	80034e4 <HAL_RCC_GetSysClockFreq>
 80037e2:	4602      	mov	r2, r0
 80037e4:	4b10      	ldr	r3, [pc, #64]	; (8003828 <HAL_RCC_GetHCLKFreq+0x50>)
 80037e6:	699b      	ldr	r3, [r3, #24]
 80037e8:	0a1b      	lsrs	r3, r3, #8
 80037ea:	f003 030f 	and.w	r3, r3, #15
 80037ee:	490f      	ldr	r1, [pc, #60]	; (800382c <HAL_RCC_GetHCLKFreq+0x54>)
 80037f0:	5ccb      	ldrb	r3, [r1, r3]
 80037f2:	f003 031f 	and.w	r3, r3, #31
 80037f6:	fa22 f303 	lsr.w	r3, r2, r3
 80037fa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80037fc:	4b0a      	ldr	r3, [pc, #40]	; (8003828 <HAL_RCC_GetHCLKFreq+0x50>)
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	f003 030f 	and.w	r3, r3, #15
 8003804:	4a09      	ldr	r2, [pc, #36]	; (800382c <HAL_RCC_GetHCLKFreq+0x54>)
 8003806:	5cd3      	ldrb	r3, [r2, r3]
 8003808:	f003 031f 	and.w	r3, r3, #31
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	fa22 f303 	lsr.w	r3, r2, r3
 8003812:	4a07      	ldr	r2, [pc, #28]	; (8003830 <HAL_RCC_GetHCLKFreq+0x58>)
 8003814:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003816:	4a07      	ldr	r2, [pc, #28]	; (8003834 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800381c:	4b04      	ldr	r3, [pc, #16]	; (8003830 <HAL_RCC_GetHCLKFreq+0x58>)
 800381e:	681b      	ldr	r3, [r3, #0]
}
 8003820:	4618      	mov	r0, r3
 8003822:	3708      	adds	r7, #8
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	58024400 	.word	0x58024400
 800382c:	08006748 	.word	0x08006748
 8003830:	24000014 	.word	0x24000014
 8003834:	24000010 	.word	0x24000010

08003838 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800383c:	f7ff ffcc 	bl	80037d8 <HAL_RCC_GetHCLKFreq>
 8003840:	4602      	mov	r2, r0
 8003842:	4b06      	ldr	r3, [pc, #24]	; (800385c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003844:	69db      	ldr	r3, [r3, #28]
 8003846:	091b      	lsrs	r3, r3, #4
 8003848:	f003 0307 	and.w	r3, r3, #7
 800384c:	4904      	ldr	r1, [pc, #16]	; (8003860 <HAL_RCC_GetPCLK1Freq+0x28>)
 800384e:	5ccb      	ldrb	r3, [r1, r3]
 8003850:	f003 031f 	and.w	r3, r3, #31
 8003854:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003858:	4618      	mov	r0, r3
 800385a:	bd80      	pop	{r7, pc}
 800385c:	58024400 	.word	0x58024400
 8003860:	08006748 	.word	0x08006748

08003864 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003868:	f7ff ffb6 	bl	80037d8 <HAL_RCC_GetHCLKFreq>
 800386c:	4602      	mov	r2, r0
 800386e:	4b06      	ldr	r3, [pc, #24]	; (8003888 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003870:	69db      	ldr	r3, [r3, #28]
 8003872:	0a1b      	lsrs	r3, r3, #8
 8003874:	f003 0307 	and.w	r3, r3, #7
 8003878:	4904      	ldr	r1, [pc, #16]	; (800388c <HAL_RCC_GetPCLK2Freq+0x28>)
 800387a:	5ccb      	ldrb	r3, [r1, r3]
 800387c:	f003 031f 	and.w	r3, r3, #31
 8003880:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003884:	4618      	mov	r0, r3
 8003886:	bd80      	pop	{r7, pc}
 8003888:	58024400 	.word	0x58024400
 800388c:	08006748 	.word	0x08006748

08003890 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003898:	2300      	movs	r3, #0
 800389a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800389c:	2300      	movs	r3, #0
 800389e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d03f      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80038b4:	d02a      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80038b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80038ba:	d824      	bhi.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80038bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038c0:	d018      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80038c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038c6:	d81e      	bhi.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d003      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80038cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038d0:	d007      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80038d2:	e018      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038d4:	4ba3      	ldr	r3, [pc, #652]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80038d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d8:	4aa2      	ldr	r2, [pc, #648]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80038da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80038e0:	e015      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	3304      	adds	r3, #4
 80038e6:	2102      	movs	r1, #2
 80038e8:	4618      	mov	r0, r3
 80038ea:	f001 f9d5 	bl	8004c98 <RCCEx_PLL2_Config>
 80038ee:	4603      	mov	r3, r0
 80038f0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80038f2:	e00c      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	3324      	adds	r3, #36	; 0x24
 80038f8:	2102      	movs	r1, #2
 80038fa:	4618      	mov	r0, r3
 80038fc:	f001 fa7e 	bl	8004dfc <RCCEx_PLL3_Config>
 8003900:	4603      	mov	r3, r0
 8003902:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003904:	e003      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	75fb      	strb	r3, [r7, #23]
      break;
 800390a:	e000      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800390c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800390e:	7dfb      	ldrb	r3, [r7, #23]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d109      	bne.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003914:	4b93      	ldr	r3, [pc, #588]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003918:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003920:	4990      	ldr	r1, [pc, #576]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003922:	4313      	orrs	r3, r2
 8003924:	650b      	str	r3, [r1, #80]	; 0x50
 8003926:	e001      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003928:	7dfb      	ldrb	r3, [r7, #23]
 800392a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003934:	2b00      	cmp	r3, #0
 8003936:	d03d      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800393c:	2b04      	cmp	r3, #4
 800393e:	d826      	bhi.n	800398e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003940:	a201      	add	r2, pc, #4	; (adr r2, 8003948 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003946:	bf00      	nop
 8003948:	0800395d 	.word	0x0800395d
 800394c:	0800396b 	.word	0x0800396b
 8003950:	0800397d 	.word	0x0800397d
 8003954:	08003995 	.word	0x08003995
 8003958:	08003995 	.word	0x08003995
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800395c:	4b81      	ldr	r3, [pc, #516]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800395e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003960:	4a80      	ldr	r2, [pc, #512]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003962:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003966:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003968:	e015      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	3304      	adds	r3, #4
 800396e:	2100      	movs	r1, #0
 8003970:	4618      	mov	r0, r3
 8003972:	f001 f991 	bl	8004c98 <RCCEx_PLL2_Config>
 8003976:	4603      	mov	r3, r0
 8003978:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800397a:	e00c      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	3324      	adds	r3, #36	; 0x24
 8003980:	2100      	movs	r1, #0
 8003982:	4618      	mov	r0, r3
 8003984:	f001 fa3a 	bl	8004dfc <RCCEx_PLL3_Config>
 8003988:	4603      	mov	r3, r0
 800398a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800398c:	e003      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	75fb      	strb	r3, [r7, #23]
      break;
 8003992:	e000      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003994:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003996:	7dfb      	ldrb	r3, [r7, #23]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d109      	bne.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800399c:	4b71      	ldr	r3, [pc, #452]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800399e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039a0:	f023 0207 	bic.w	r2, r3, #7
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a8:	496e      	ldr	r1, [pc, #440]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	650b      	str	r3, [r1, #80]	; 0x50
 80039ae:	e001      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039b0:	7dfb      	ldrb	r3, [r7, #23]
 80039b2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d042      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039c8:	d02b      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80039ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039ce:	d825      	bhi.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80039d0:	2bc0      	cmp	r3, #192	; 0xc0
 80039d2:	d028      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80039d4:	2bc0      	cmp	r3, #192	; 0xc0
 80039d6:	d821      	bhi.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80039d8:	2b80      	cmp	r3, #128	; 0x80
 80039da:	d016      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80039dc:	2b80      	cmp	r3, #128	; 0x80
 80039de:	d81d      	bhi.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d002      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80039e4:	2b40      	cmp	r3, #64	; 0x40
 80039e6:	d007      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80039e8:	e018      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039ea:	4b5e      	ldr	r3, [pc, #376]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80039ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ee:	4a5d      	ldr	r2, [pc, #372]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80039f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80039f6:	e017      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	3304      	adds	r3, #4
 80039fc:	2100      	movs	r1, #0
 80039fe:	4618      	mov	r0, r3
 8003a00:	f001 f94a 	bl	8004c98 <RCCEx_PLL2_Config>
 8003a04:	4603      	mov	r3, r0
 8003a06:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003a08:	e00e      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	3324      	adds	r3, #36	; 0x24
 8003a0e:	2100      	movs	r1, #0
 8003a10:	4618      	mov	r0, r3
 8003a12:	f001 f9f3 	bl	8004dfc <RCCEx_PLL3_Config>
 8003a16:	4603      	mov	r3, r0
 8003a18:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003a1a:	e005      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	75fb      	strb	r3, [r7, #23]
      break;
 8003a20:	e002      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003a22:	bf00      	nop
 8003a24:	e000      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003a26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a28:	7dfb      	ldrb	r3, [r7, #23]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d109      	bne.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003a2e:	4b4d      	ldr	r3, [pc, #308]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003a30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a32:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a3a:	494a      	ldr	r1, [pc, #296]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	650b      	str	r3, [r1, #80]	; 0x50
 8003a40:	e001      	b.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a42:	7dfb      	ldrb	r3, [r7, #23]
 8003a44:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d049      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003a58:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a5c:	d030      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003a5e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a62:	d82a      	bhi.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003a64:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003a68:	d02c      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003a6a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003a6e:	d824      	bhi.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003a70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a74:	d018      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003a76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a7a:	d81e      	bhi.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d003      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003a80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a84:	d007      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003a86:	e018      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a88:	4b36      	ldr	r3, [pc, #216]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8c:	4a35      	ldr	r2, [pc, #212]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003a8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a92:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a94:	e017      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	3304      	adds	r3, #4
 8003a9a:	2100      	movs	r1, #0
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f001 f8fb 	bl	8004c98 <RCCEx_PLL2_Config>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003aa6:	e00e      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	3324      	adds	r3, #36	; 0x24
 8003aac:	2100      	movs	r1, #0
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f001 f9a4 	bl	8004dfc <RCCEx_PLL3_Config>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003ab8:	e005      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	75fb      	strb	r3, [r7, #23]
      break;
 8003abe:	e002      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003ac0:	bf00      	nop
 8003ac2:	e000      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003ac4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ac6:	7dfb      	ldrb	r3, [r7, #23]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d10a      	bne.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003acc:	4b25      	ldr	r3, [pc, #148]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003ada:	4922      	ldr	r1, [pc, #136]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	658b      	str	r3, [r1, #88]	; 0x58
 8003ae0:	e001      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ae2:	7dfb      	ldrb	r3, [r7, #23]
 8003ae4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d04b      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003af8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003afc:	d030      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003afe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b02:	d82a      	bhi.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003b04:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b08:	d02e      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8003b0a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b0e:	d824      	bhi.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003b10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b14:	d018      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003b16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b1a:	d81e      	bhi.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d003      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003b20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b24:	d007      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003b26:	e018      	b.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b28:	4b0e      	ldr	r3, [pc, #56]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2c:	4a0d      	ldr	r2, [pc, #52]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003b2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b34:	e019      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	3304      	adds	r3, #4
 8003b3a:	2100      	movs	r1, #0
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f001 f8ab 	bl	8004c98 <RCCEx_PLL2_Config>
 8003b42:	4603      	mov	r3, r0
 8003b44:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003b46:	e010      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	3324      	adds	r3, #36	; 0x24
 8003b4c:	2100      	movs	r1, #0
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f001 f954 	bl	8004dfc <RCCEx_PLL3_Config>
 8003b54:	4603      	mov	r3, r0
 8003b56:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b58:	e007      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	75fb      	strb	r3, [r7, #23]
      break;
 8003b5e:	e004      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8003b60:	bf00      	nop
 8003b62:	e002      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003b64:	58024400 	.word	0x58024400
      break;
 8003b68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b6a:	7dfb      	ldrb	r3, [r7, #23]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d10a      	bne.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003b70:	4b99      	ldr	r3, [pc, #612]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b74:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003b7e:	4996      	ldr	r1, [pc, #600]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	658b      	str	r3, [r1, #88]	; 0x58
 8003b84:	e001      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b86:	7dfb      	ldrb	r3, [r7, #23]
 8003b88:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d032      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b9a:	2b30      	cmp	r3, #48	; 0x30
 8003b9c:	d01c      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8003b9e:	2b30      	cmp	r3, #48	; 0x30
 8003ba0:	d817      	bhi.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003ba2:	2b20      	cmp	r3, #32
 8003ba4:	d00c      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8003ba6:	2b20      	cmp	r3, #32
 8003ba8:	d813      	bhi.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d016      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003bae:	2b10      	cmp	r3, #16
 8003bb0:	d10f      	bne.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bb2:	4b89      	ldr	r3, [pc, #548]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb6:	4a88      	ldr	r2, [pc, #544]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bbc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003bbe:	e00e      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	3304      	adds	r3, #4
 8003bc4:	2102      	movs	r1, #2
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f001 f866 	bl	8004c98 <RCCEx_PLL2_Config>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003bd0:	e005      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	75fb      	strb	r3, [r7, #23]
      break;
 8003bd6:	e002      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003bd8:	bf00      	nop
 8003bda:	e000      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003bdc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bde:	7dfb      	ldrb	r3, [r7, #23]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d109      	bne.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003be4:	4b7c      	ldr	r3, [pc, #496]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003be8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bf0:	4979      	ldr	r1, [pc, #484]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003bf6:	e001      	b.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bf8:	7dfb      	ldrb	r3, [r7, #23]
 8003bfa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d047      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c10:	d030      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003c12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c16:	d82a      	bhi.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003c18:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003c1c:	d02c      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003c1e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003c22:	d824      	bhi.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003c24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c28:	d018      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003c2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c2e:	d81e      	bhi.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d003      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8003c34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c38:	d007      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8003c3a:	e018      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c3c:	4b66      	ldr	r3, [pc, #408]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c40:	4a65      	ldr	r2, [pc, #404]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003c42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003c48:	e017      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	3304      	adds	r3, #4
 8003c4e:	2100      	movs	r1, #0
 8003c50:	4618      	mov	r0, r3
 8003c52:	f001 f821 	bl	8004c98 <RCCEx_PLL2_Config>
 8003c56:	4603      	mov	r3, r0
 8003c58:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003c5a:	e00e      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	3324      	adds	r3, #36	; 0x24
 8003c60:	2100      	movs	r1, #0
 8003c62:	4618      	mov	r0, r3
 8003c64:	f001 f8ca 	bl	8004dfc <RCCEx_PLL3_Config>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003c6c:	e005      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	75fb      	strb	r3, [r7, #23]
      break;
 8003c72:	e002      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003c74:	bf00      	nop
 8003c76:	e000      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003c78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c7a:	7dfb      	ldrb	r3, [r7, #23]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d109      	bne.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003c80:	4b55      	ldr	r3, [pc, #340]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003c82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c84:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c8c:	4952      	ldr	r1, [pc, #328]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	650b      	str	r3, [r1, #80]	; 0x50
 8003c92:	e001      	b.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c94:	7dfb      	ldrb	r3, [r7, #23]
 8003c96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d049      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ca8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cac:	d02e      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003cae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cb2:	d828      	bhi.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003cb4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003cb8:	d02a      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8003cba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003cbe:	d822      	bhi.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003cc0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003cc4:	d026      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8003cc6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003cca:	d81c      	bhi.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003ccc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003cd0:	d010      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8003cd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003cd6:	d816      	bhi.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d01d      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8003cdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ce0:	d111      	bne.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	3304      	adds	r3, #4
 8003ce6:	2101      	movs	r1, #1
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f000 ffd5 	bl	8004c98 <RCCEx_PLL2_Config>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003cf2:	e012      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	3324      	adds	r3, #36	; 0x24
 8003cf8:	2101      	movs	r1, #1
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f001 f87e 	bl	8004dfc <RCCEx_PLL3_Config>
 8003d00:	4603      	mov	r3, r0
 8003d02:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003d04:	e009      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	75fb      	strb	r3, [r7, #23]
      break;
 8003d0a:	e006      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003d0c:	bf00      	nop
 8003d0e:	e004      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003d10:	bf00      	nop
 8003d12:	e002      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003d14:	bf00      	nop
 8003d16:	e000      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003d18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d1a:	7dfb      	ldrb	r3, [r7, #23]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d109      	bne.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003d20:	4b2d      	ldr	r3, [pc, #180]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003d22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d24:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d2c:	492a      	ldr	r1, [pc, #168]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	650b      	str	r3, [r1, #80]	; 0x50
 8003d32:	e001      	b.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d34:	7dfb      	ldrb	r3, [r7, #23]
 8003d36:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d04d      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003d4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d4e:	d02e      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8003d50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d54:	d828      	bhi.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003d56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d5a:	d02a      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d60:	d822      	bhi.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003d62:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d66:	d026      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8003d68:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d6c:	d81c      	bhi.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003d6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d72:	d010      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003d74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d78:	d816      	bhi.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d01d      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8003d7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d82:	d111      	bne.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	3304      	adds	r3, #4
 8003d88:	2101      	movs	r1, #1
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f000 ff84 	bl	8004c98 <RCCEx_PLL2_Config>
 8003d90:	4603      	mov	r3, r0
 8003d92:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003d94:	e012      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	3324      	adds	r3, #36	; 0x24
 8003d9a:	2101      	movs	r1, #1
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f001 f82d 	bl	8004dfc <RCCEx_PLL3_Config>
 8003da2:	4603      	mov	r3, r0
 8003da4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003da6:	e009      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	75fb      	strb	r3, [r7, #23]
      break;
 8003dac:	e006      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003dae:	bf00      	nop
 8003db0:	e004      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003db2:	bf00      	nop
 8003db4:	e002      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003db6:	bf00      	nop
 8003db8:	e000      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003dba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dbc:	7dfb      	ldrb	r3, [r7, #23]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10c      	bne.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003dc2:	4b05      	ldr	r3, [pc, #20]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003dd0:	4901      	ldr	r1, [pc, #4]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	658b      	str	r3, [r1, #88]	; 0x58
 8003dd6:	e003      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003dd8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ddc:	7dfb      	ldrb	r3, [r7, #23]
 8003dde:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d02f      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003df0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003df4:	d00e      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8003df6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dfa:	d814      	bhi.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d015      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8003e00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e04:	d10f      	bne.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e06:	4baf      	ldr	r3, [pc, #700]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0a:	4aae      	ldr	r2, [pc, #696]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e10:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003e12:	e00c      	b.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	3304      	adds	r3, #4
 8003e18:	2101      	movs	r1, #1
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f000 ff3c 	bl	8004c98 <RCCEx_PLL2_Config>
 8003e20:	4603      	mov	r3, r0
 8003e22:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003e24:	e003      	b.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	75fb      	strb	r3, [r7, #23]
      break;
 8003e2a:	e000      	b.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8003e2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e2e:	7dfb      	ldrb	r3, [r7, #23]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d109      	bne.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003e34:	4ba3      	ldr	r3, [pc, #652]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e38:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e40:	49a0      	ldr	r1, [pc, #640]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	650b      	str	r3, [r1, #80]	; 0x50
 8003e46:	e001      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e48:	7dfb      	ldrb	r3, [r7, #23]
 8003e4a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d032      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e5c:	2b03      	cmp	r3, #3
 8003e5e:	d81b      	bhi.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003e60:	a201      	add	r2, pc, #4	; (adr r2, 8003e68 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8003e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e66:	bf00      	nop
 8003e68:	08003e9f 	.word	0x08003e9f
 8003e6c:	08003e79 	.word	0x08003e79
 8003e70:	08003e87 	.word	0x08003e87
 8003e74:	08003e9f 	.word	0x08003e9f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e78:	4b92      	ldr	r3, [pc, #584]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7c:	4a91      	ldr	r2, [pc, #580]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e82:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003e84:	e00c      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	3304      	adds	r3, #4
 8003e8a:	2102      	movs	r1, #2
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f000 ff03 	bl	8004c98 <RCCEx_PLL2_Config>
 8003e92:	4603      	mov	r3, r0
 8003e94:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003e96:	e003      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e9c:	e000      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003e9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ea0:	7dfb      	ldrb	r3, [r7, #23]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d109      	bne.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003ea6:	4b87      	ldr	r3, [pc, #540]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eaa:	f023 0203 	bic.w	r2, r3, #3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb2:	4984      	ldr	r1, [pc, #528]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003eb8:	e001      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eba:	7dfb      	ldrb	r3, [r7, #23]
 8003ebc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	f000 8086 	beq.w	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ecc:	4b7e      	ldr	r3, [pc, #504]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a7d      	ldr	r2, [pc, #500]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003ed2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ed6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ed8:	f7fd fc8a 	bl	80017f0 <HAL_GetTick>
 8003edc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ede:	e009      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ee0:	f7fd fc86 	bl	80017f0 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	2b64      	cmp	r3, #100	; 0x64
 8003eec:	d902      	bls.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	75fb      	strb	r3, [r7, #23]
        break;
 8003ef2:	e005      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ef4:	4b74      	ldr	r3, [pc, #464]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d0ef      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003f00:	7dfb      	ldrb	r3, [r7, #23]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d166      	bne.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003f06:	4b6f      	ldr	r3, [pc, #444]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003f08:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f10:	4053      	eors	r3, r2
 8003f12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d013      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f1a:	4b6a      	ldr	r3, [pc, #424]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f22:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f24:	4b67      	ldr	r3, [pc, #412]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f28:	4a66      	ldr	r2, [pc, #408]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003f2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f2e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f30:	4b64      	ldr	r3, [pc, #400]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f34:	4a63      	ldr	r2, [pc, #396]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003f36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f3a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003f3c:	4a61      	ldr	r2, [pc, #388]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f4c:	d115      	bne.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f4e:	f7fd fc4f 	bl	80017f0 <HAL_GetTick>
 8003f52:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f54:	e00b      	b.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f56:	f7fd fc4b 	bl	80017f0 <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d902      	bls.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	75fb      	strb	r3, [r7, #23]
            break;
 8003f6c:	e005      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f6e:	4b55      	ldr	r3, [pc, #340]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d0ed      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003f7a:	7dfb      	ldrb	r3, [r7, #23]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d126      	bne.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f8e:	d10d      	bne.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003f90:	4b4c      	ldr	r3, [pc, #304]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f9e:	0919      	lsrs	r1, r3, #4
 8003fa0:	4b4a      	ldr	r3, [pc, #296]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8003fa2:	400b      	ands	r3, r1
 8003fa4:	4947      	ldr	r1, [pc, #284]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	610b      	str	r3, [r1, #16]
 8003faa:	e005      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003fac:	4b45      	ldr	r3, [pc, #276]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	4a44      	ldr	r2, [pc, #272]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003fb2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003fb6:	6113      	str	r3, [r2, #16]
 8003fb8:	4b42      	ldr	r3, [pc, #264]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003fba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003fc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fc6:	493f      	ldr	r1, [pc, #252]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	670b      	str	r3, [r1, #112]	; 0x70
 8003fcc:	e004      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003fce:	7dfb      	ldrb	r3, [r7, #23]
 8003fd0:	75bb      	strb	r3, [r7, #22]
 8003fd2:	e001      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fd4:	7dfb      	ldrb	r3, [r7, #23]
 8003fd6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0301 	and.w	r3, r3, #1
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f000 8085 	beq.w	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fea:	2b28      	cmp	r3, #40	; 0x28
 8003fec:	d866      	bhi.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003fee:	a201      	add	r2, pc, #4	; (adr r2, 8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff4:	080040d1 	.word	0x080040d1
 8003ff8:	080040bd 	.word	0x080040bd
 8003ffc:	080040bd 	.word	0x080040bd
 8004000:	080040bd 	.word	0x080040bd
 8004004:	080040bd 	.word	0x080040bd
 8004008:	080040bd 	.word	0x080040bd
 800400c:	080040bd 	.word	0x080040bd
 8004010:	080040bd 	.word	0x080040bd
 8004014:	08004099 	.word	0x08004099
 8004018:	080040bd 	.word	0x080040bd
 800401c:	080040bd 	.word	0x080040bd
 8004020:	080040bd 	.word	0x080040bd
 8004024:	080040bd 	.word	0x080040bd
 8004028:	080040bd 	.word	0x080040bd
 800402c:	080040bd 	.word	0x080040bd
 8004030:	080040bd 	.word	0x080040bd
 8004034:	080040ab 	.word	0x080040ab
 8004038:	080040bd 	.word	0x080040bd
 800403c:	080040bd 	.word	0x080040bd
 8004040:	080040bd 	.word	0x080040bd
 8004044:	080040bd 	.word	0x080040bd
 8004048:	080040bd 	.word	0x080040bd
 800404c:	080040bd 	.word	0x080040bd
 8004050:	080040bd 	.word	0x080040bd
 8004054:	080040d1 	.word	0x080040d1
 8004058:	080040bd 	.word	0x080040bd
 800405c:	080040bd 	.word	0x080040bd
 8004060:	080040bd 	.word	0x080040bd
 8004064:	080040bd 	.word	0x080040bd
 8004068:	080040bd 	.word	0x080040bd
 800406c:	080040bd 	.word	0x080040bd
 8004070:	080040bd 	.word	0x080040bd
 8004074:	080040d1 	.word	0x080040d1
 8004078:	080040bd 	.word	0x080040bd
 800407c:	080040bd 	.word	0x080040bd
 8004080:	080040bd 	.word	0x080040bd
 8004084:	080040bd 	.word	0x080040bd
 8004088:	080040bd 	.word	0x080040bd
 800408c:	080040bd 	.word	0x080040bd
 8004090:	080040bd 	.word	0x080040bd
 8004094:	080040d1 	.word	0x080040d1
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	3304      	adds	r3, #4
 800409c:	2101      	movs	r1, #1
 800409e:	4618      	mov	r0, r3
 80040a0:	f000 fdfa 	bl	8004c98 <RCCEx_PLL2_Config>
 80040a4:	4603      	mov	r3, r0
 80040a6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80040a8:	e013      	b.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	3324      	adds	r3, #36	; 0x24
 80040ae:	2101      	movs	r1, #1
 80040b0:	4618      	mov	r0, r3
 80040b2:	f000 fea3 	bl	8004dfc <RCCEx_PLL3_Config>
 80040b6:	4603      	mov	r3, r0
 80040b8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80040ba:	e00a      	b.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	75fb      	strb	r3, [r7, #23]
      break;
 80040c0:	e007      	b.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80040c2:	bf00      	nop
 80040c4:	58024400 	.word	0x58024400
 80040c8:	58024800 	.word	0x58024800
 80040cc:	00ffffcf 	.word	0x00ffffcf
      break;
 80040d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040d2:	7dfb      	ldrb	r3, [r7, #23]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d109      	bne.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80040d8:	4b96      	ldr	r3, [pc, #600]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80040da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040dc:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040e4:	4993      	ldr	r1, [pc, #588]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	654b      	str	r3, [r1, #84]	; 0x54
 80040ea:	e001      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ec:	7dfb      	ldrb	r3, [r7, #23]
 80040ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0302 	and.w	r3, r3, #2
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d038      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004100:	2b05      	cmp	r3, #5
 8004102:	d821      	bhi.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8004104:	a201      	add	r2, pc, #4	; (adr r2, 800410c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8004106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800410a:	bf00      	nop
 800410c:	0800414f 	.word	0x0800414f
 8004110:	08004125 	.word	0x08004125
 8004114:	08004137 	.word	0x08004137
 8004118:	0800414f 	.word	0x0800414f
 800411c:	0800414f 	.word	0x0800414f
 8004120:	0800414f 	.word	0x0800414f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	3304      	adds	r3, #4
 8004128:	2101      	movs	r1, #1
 800412a:	4618      	mov	r0, r3
 800412c:	f000 fdb4 	bl	8004c98 <RCCEx_PLL2_Config>
 8004130:	4603      	mov	r3, r0
 8004132:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004134:	e00c      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	3324      	adds	r3, #36	; 0x24
 800413a:	2101      	movs	r1, #1
 800413c:	4618      	mov	r0, r3
 800413e:	f000 fe5d 	bl	8004dfc <RCCEx_PLL3_Config>
 8004142:	4603      	mov	r3, r0
 8004144:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004146:	e003      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	75fb      	strb	r3, [r7, #23]
      break;
 800414c:	e000      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800414e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004150:	7dfb      	ldrb	r3, [r7, #23]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d109      	bne.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004156:	4b77      	ldr	r3, [pc, #476]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800415a:	f023 0207 	bic.w	r2, r3, #7
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004162:	4974      	ldr	r1, [pc, #464]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004164:	4313      	orrs	r3, r2
 8004166:	654b      	str	r3, [r1, #84]	; 0x54
 8004168:	e001      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800416a:	7dfb      	ldrb	r3, [r7, #23]
 800416c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0304 	and.w	r3, r3, #4
 8004176:	2b00      	cmp	r3, #0
 8004178:	d03a      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004180:	2b05      	cmp	r3, #5
 8004182:	d821      	bhi.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8004184:	a201      	add	r2, pc, #4	; (adr r2, 800418c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8004186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800418a:	bf00      	nop
 800418c:	080041cf 	.word	0x080041cf
 8004190:	080041a5 	.word	0x080041a5
 8004194:	080041b7 	.word	0x080041b7
 8004198:	080041cf 	.word	0x080041cf
 800419c:	080041cf 	.word	0x080041cf
 80041a0:	080041cf 	.word	0x080041cf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	3304      	adds	r3, #4
 80041a8:	2101      	movs	r1, #1
 80041aa:	4618      	mov	r0, r3
 80041ac:	f000 fd74 	bl	8004c98 <RCCEx_PLL2_Config>
 80041b0:	4603      	mov	r3, r0
 80041b2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80041b4:	e00c      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	3324      	adds	r3, #36	; 0x24
 80041ba:	2101      	movs	r1, #1
 80041bc:	4618      	mov	r0, r3
 80041be:	f000 fe1d 	bl	8004dfc <RCCEx_PLL3_Config>
 80041c2:	4603      	mov	r3, r0
 80041c4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80041c6:	e003      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	75fb      	strb	r3, [r7, #23]
      break;
 80041cc:	e000      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80041ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041d0:	7dfb      	ldrb	r3, [r7, #23]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d10a      	bne.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041d6:	4b57      	ldr	r3, [pc, #348]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80041d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041da:	f023 0207 	bic.w	r2, r3, #7
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e4:	4953      	ldr	r1, [pc, #332]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	658b      	str	r3, [r1, #88]	; 0x58
 80041ea:	e001      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041ec:	7dfb      	ldrb	r3, [r7, #23]
 80041ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0320 	and.w	r3, r3, #32
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d04b      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004202:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004206:	d02e      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004208:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800420c:	d828      	bhi.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800420e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004212:	d02a      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004214:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004218:	d822      	bhi.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800421a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800421e:	d026      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004220:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004224:	d81c      	bhi.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004226:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800422a:	d010      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800422c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004230:	d816      	bhi.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004232:	2b00      	cmp	r3, #0
 8004234:	d01d      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8004236:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800423a:	d111      	bne.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	3304      	adds	r3, #4
 8004240:	2100      	movs	r1, #0
 8004242:	4618      	mov	r0, r3
 8004244:	f000 fd28 	bl	8004c98 <RCCEx_PLL2_Config>
 8004248:	4603      	mov	r3, r0
 800424a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800424c:	e012      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	3324      	adds	r3, #36	; 0x24
 8004252:	2102      	movs	r1, #2
 8004254:	4618      	mov	r0, r3
 8004256:	f000 fdd1 	bl	8004dfc <RCCEx_PLL3_Config>
 800425a:	4603      	mov	r3, r0
 800425c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800425e:	e009      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	75fb      	strb	r3, [r7, #23]
      break;
 8004264:	e006      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004266:	bf00      	nop
 8004268:	e004      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800426a:	bf00      	nop
 800426c:	e002      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800426e:	bf00      	nop
 8004270:	e000      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004272:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004274:	7dfb      	ldrb	r3, [r7, #23]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d10a      	bne.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800427a:	4b2e      	ldr	r3, [pc, #184]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800427c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800427e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004288:	492a      	ldr	r1, [pc, #168]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800428a:	4313      	orrs	r3, r2
 800428c:	654b      	str	r3, [r1, #84]	; 0x54
 800428e:	e001      	b.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004290:	7dfb      	ldrb	r3, [r7, #23]
 8004292:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800429c:	2b00      	cmp	r3, #0
 800429e:	d04d      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042a6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80042aa:	d02e      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80042ac:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80042b0:	d828      	bhi.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80042b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042b6:	d02a      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80042b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042bc:	d822      	bhi.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80042be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042c2:	d026      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80042c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042c8:	d81c      	bhi.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80042ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042ce:	d010      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80042d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042d4:	d816      	bhi.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d01d      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80042da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042de:	d111      	bne.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	3304      	adds	r3, #4
 80042e4:	2100      	movs	r1, #0
 80042e6:	4618      	mov	r0, r3
 80042e8:	f000 fcd6 	bl	8004c98 <RCCEx_PLL2_Config>
 80042ec:	4603      	mov	r3, r0
 80042ee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80042f0:	e012      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	3324      	adds	r3, #36	; 0x24
 80042f6:	2102      	movs	r1, #2
 80042f8:	4618      	mov	r0, r3
 80042fa:	f000 fd7f 	bl	8004dfc <RCCEx_PLL3_Config>
 80042fe:	4603      	mov	r3, r0
 8004300:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004302:	e009      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	75fb      	strb	r3, [r7, #23]
      break;
 8004308:	e006      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800430a:	bf00      	nop
 800430c:	e004      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800430e:	bf00      	nop
 8004310:	e002      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004312:	bf00      	nop
 8004314:	e000      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004316:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004318:	7dfb      	ldrb	r3, [r7, #23]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d10c      	bne.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800431e:	4b05      	ldr	r3, [pc, #20]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004322:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800432c:	4901      	ldr	r1, [pc, #4]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800432e:	4313      	orrs	r3, r2
 8004330:	658b      	str	r3, [r1, #88]	; 0x58
 8004332:	e003      	b.n	800433c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8004334:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004338:	7dfb      	ldrb	r3, [r7, #23]
 800433a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004344:	2b00      	cmp	r3, #0
 8004346:	d04b      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800434e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004352:	d02e      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004354:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004358:	d828      	bhi.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800435a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800435e:	d02a      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8004360:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004364:	d822      	bhi.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004366:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800436a:	d026      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800436c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004370:	d81c      	bhi.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004372:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004376:	d010      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8004378:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800437c:	d816      	bhi.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800437e:	2b00      	cmp	r3, #0
 8004380:	d01d      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8004382:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004386:	d111      	bne.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	3304      	adds	r3, #4
 800438c:	2100      	movs	r1, #0
 800438e:	4618      	mov	r0, r3
 8004390:	f000 fc82 	bl	8004c98 <RCCEx_PLL2_Config>
 8004394:	4603      	mov	r3, r0
 8004396:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004398:	e012      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	3324      	adds	r3, #36	; 0x24
 800439e:	2102      	movs	r1, #2
 80043a0:	4618      	mov	r0, r3
 80043a2:	f000 fd2b 	bl	8004dfc <RCCEx_PLL3_Config>
 80043a6:	4603      	mov	r3, r0
 80043a8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80043aa:	e009      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	75fb      	strb	r3, [r7, #23]
      break;
 80043b0:	e006      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80043b2:	bf00      	nop
 80043b4:	e004      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80043b6:	bf00      	nop
 80043b8:	e002      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80043ba:	bf00      	nop
 80043bc:	e000      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80043be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043c0:	7dfb      	ldrb	r3, [r7, #23]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d10a      	bne.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80043c6:	4b9d      	ldr	r3, [pc, #628]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80043c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043d4:	4999      	ldr	r1, [pc, #612]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	658b      	str	r3, [r1, #88]	; 0x58
 80043da:	e001      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043dc:	7dfb      	ldrb	r3, [r7, #23]
 80043de:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0308 	and.w	r3, r3, #8
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d01a      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043f6:	d10a      	bne.n	800440e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	3324      	adds	r3, #36	; 0x24
 80043fc:	2102      	movs	r1, #2
 80043fe:	4618      	mov	r0, r3
 8004400:	f000 fcfc 	bl	8004dfc <RCCEx_PLL3_Config>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d001      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800440e:	4b8b      	ldr	r3, [pc, #556]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004412:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800441c:	4987      	ldr	r1, [pc, #540]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800441e:	4313      	orrs	r3, r2
 8004420:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0310 	and.w	r3, r3, #16
 800442a:	2b00      	cmp	r3, #0
 800442c:	d01a      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004434:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004438:	d10a      	bne.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	3324      	adds	r3, #36	; 0x24
 800443e:	2102      	movs	r1, #2
 8004440:	4618      	mov	r0, r3
 8004442:	f000 fcdb 	bl	8004dfc <RCCEx_PLL3_Config>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d001      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004450:	4b7a      	ldr	r3, [pc, #488]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004454:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800445e:	4977      	ldr	r1, [pc, #476]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004460:	4313      	orrs	r3, r2
 8004462:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d034      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004476:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800447a:	d01d      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800447c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004480:	d817      	bhi.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8004482:	2b00      	cmp	r3, #0
 8004484:	d003      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004486:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800448a:	d009      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800448c:	e011      	b.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	3304      	adds	r3, #4
 8004492:	2100      	movs	r1, #0
 8004494:	4618      	mov	r0, r3
 8004496:	f000 fbff 	bl	8004c98 <RCCEx_PLL2_Config>
 800449a:	4603      	mov	r3, r0
 800449c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800449e:	e00c      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	3324      	adds	r3, #36	; 0x24
 80044a4:	2102      	movs	r1, #2
 80044a6:	4618      	mov	r0, r3
 80044a8:	f000 fca8 	bl	8004dfc <RCCEx_PLL3_Config>
 80044ac:	4603      	mov	r3, r0
 80044ae:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80044b0:	e003      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	75fb      	strb	r3, [r7, #23]
      break;
 80044b6:	e000      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80044b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044ba:	7dfb      	ldrb	r3, [r7, #23]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d10a      	bne.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044c0:	4b5e      	ldr	r3, [pc, #376]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80044c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80044ce:	495b      	ldr	r1, [pc, #364]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	658b      	str	r3, [r1, #88]	; 0x58
 80044d4:	e001      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044d6:	7dfb      	ldrb	r3, [r7, #23]
 80044d8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d033      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80044f0:	d01c      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80044f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80044f6:	d816      	bhi.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80044f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044fc:	d003      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80044fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004502:	d007      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8004504:	e00f      	b.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004506:	4b4d      	ldr	r3, [pc, #308]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450a:	4a4c      	ldr	r2, [pc, #304]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800450c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004510:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004512:	e00c      	b.n	800452e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	3324      	adds	r3, #36	; 0x24
 8004518:	2101      	movs	r1, #1
 800451a:	4618      	mov	r0, r3
 800451c:	f000 fc6e 	bl	8004dfc <RCCEx_PLL3_Config>
 8004520:	4603      	mov	r3, r0
 8004522:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004524:	e003      	b.n	800452e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	75fb      	strb	r3, [r7, #23]
      break;
 800452a:	e000      	b.n	800452e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800452c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800452e:	7dfb      	ldrb	r3, [r7, #23]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d10a      	bne.n	800454a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004534:	4b41      	ldr	r3, [pc, #260]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004538:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004542:	493e      	ldr	r1, [pc, #248]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004544:	4313      	orrs	r3, r2
 8004546:	654b      	str	r3, [r1, #84]	; 0x54
 8004548:	e001      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800454a:	7dfb      	ldrb	r3, [r7, #23]
 800454c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d029      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800455e:	2b00      	cmp	r3, #0
 8004560:	d003      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8004562:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004566:	d007      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8004568:	e00f      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800456a:	4b34      	ldr	r3, [pc, #208]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800456c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456e:	4a33      	ldr	r2, [pc, #204]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004570:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004574:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004576:	e00b      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	3304      	adds	r3, #4
 800457c:	2102      	movs	r1, #2
 800457e:	4618      	mov	r0, r3
 8004580:	f000 fb8a 	bl	8004c98 <RCCEx_PLL2_Config>
 8004584:	4603      	mov	r3, r0
 8004586:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004588:	e002      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	75fb      	strb	r3, [r7, #23]
      break;
 800458e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004590:	7dfb      	ldrb	r3, [r7, #23]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d109      	bne.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004596:	4b29      	ldr	r3, [pc, #164]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800459a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045a2:	4926      	ldr	r1, [pc, #152]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80045a8:	e001      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045aa:	7dfb      	ldrb	r3, [r7, #23]
 80045ac:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00a      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	3324      	adds	r3, #36	; 0x24
 80045be:	2102      	movs	r1, #2
 80045c0:	4618      	mov	r0, r3
 80045c2:	f000 fc1b 	bl	8004dfc <RCCEx_PLL3_Config>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d001      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d033      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045e4:	d017      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80045e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045ea:	d811      	bhi.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80045ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045f0:	d013      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80045f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045f6:	d80b      	bhi.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d010      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80045fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004600:	d106      	bne.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004602:	4b0e      	ldr	r3, [pc, #56]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004606:	4a0d      	ldr	r2, [pc, #52]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800460c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800460e:	e007      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	75fb      	strb	r3, [r7, #23]
      break;
 8004614:	e004      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004616:	bf00      	nop
 8004618:	e002      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800461a:	bf00      	nop
 800461c:	e000      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800461e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004620:	7dfb      	ldrb	r3, [r7, #23]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d10c      	bne.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004626:	4b05      	ldr	r3, [pc, #20]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800462a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004632:	4902      	ldr	r1, [pc, #8]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004634:	4313      	orrs	r3, r2
 8004636:	654b      	str	r3, [r1, #84]	; 0x54
 8004638:	e004      	b.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800463a:	bf00      	nop
 800463c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004640:	7dfb      	ldrb	r3, [r7, #23]
 8004642:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d008      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004650:	4b31      	ldr	r3, [pc, #196]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004654:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800465c:	492e      	ldr	r1, [pc, #184]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800465e:	4313      	orrs	r3, r2
 8004660:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d009      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800466e:	4b2a      	ldr	r3, [pc, #168]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800467c:	4926      	ldr	r1, [pc, #152]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800467e:	4313      	orrs	r3, r2
 8004680:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d008      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800468e:	4b22      	ldr	r3, [pc, #136]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004692:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800469a:	491f      	ldr	r1, [pc, #124]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800469c:	4313      	orrs	r3, r2
 800469e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d00d      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80046ac:	4b1a      	ldr	r3, [pc, #104]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	4a19      	ldr	r2, [pc, #100]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80046b2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80046b6:	6113      	str	r3, [r2, #16]
 80046b8:	4b17      	ldr	r3, [pc, #92]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80046ba:	691a      	ldr	r2, [r3, #16]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80046c2:	4915      	ldr	r1, [pc, #84]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	da08      	bge.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80046d0:	4b11      	ldr	r3, [pc, #68]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80046d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046d4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046dc:	490e      	ldr	r1, [pc, #56]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d009      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80046ee:	4b0a      	ldr	r3, [pc, #40]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80046f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046fc:	4906      	ldr	r1, [pc, #24]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004702:	7dbb      	ldrb	r3, [r7, #22]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d101      	bne.n	800470c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8004708:	2300      	movs	r3, #0
 800470a:	e000      	b.n	800470e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
}
 800470e:	4618      	mov	r0, r3
 8004710:	3718      	adds	r7, #24
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	58024400 	.word	0x58024400

0800471c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004720:	f7ff f85a 	bl	80037d8 <HAL_RCC_GetHCLKFreq>
 8004724:	4602      	mov	r2, r0
 8004726:	4b06      	ldr	r3, [pc, #24]	; (8004740 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004728:	6a1b      	ldr	r3, [r3, #32]
 800472a:	091b      	lsrs	r3, r3, #4
 800472c:	f003 0307 	and.w	r3, r3, #7
 8004730:	4904      	ldr	r1, [pc, #16]	; (8004744 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004732:	5ccb      	ldrb	r3, [r1, r3]
 8004734:	f003 031f 	and.w	r3, r3, #31
 8004738:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800473c:	4618      	mov	r0, r3
 800473e:	bd80      	pop	{r7, pc}
 8004740:	58024400 	.word	0x58024400
 8004744:	08006748 	.word	0x08006748

08004748 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004748:	b480      	push	{r7}
 800474a:	b089      	sub	sp, #36	; 0x24
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004750:	4ba1      	ldr	r3, [pc, #644]	; (80049d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004754:	f003 0303 	and.w	r3, r3, #3
 8004758:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800475a:	4b9f      	ldr	r3, [pc, #636]	; (80049d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800475c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800475e:	0b1b      	lsrs	r3, r3, #12
 8004760:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004764:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004766:	4b9c      	ldr	r3, [pc, #624]	; (80049d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476a:	091b      	lsrs	r3, r3, #4
 800476c:	f003 0301 	and.w	r3, r3, #1
 8004770:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004772:	4b99      	ldr	r3, [pc, #612]	; (80049d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004776:	08db      	lsrs	r3, r3, #3
 8004778:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	fb02 f303 	mul.w	r3, r2, r3
 8004782:	ee07 3a90 	vmov	s15, r3
 8004786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800478a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	2b00      	cmp	r3, #0
 8004792:	f000 8111 	beq.w	80049b8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	2b02      	cmp	r3, #2
 800479a:	f000 8083 	beq.w	80048a4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	f200 80a1 	bhi.w	80048e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d003      	beq.n	80047b4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d056      	beq.n	8004860 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80047b2:	e099      	b.n	80048e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047b4:	4b88      	ldr	r3, [pc, #544]	; (80049d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0320 	and.w	r3, r3, #32
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d02d      	beq.n	800481c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80047c0:	4b85      	ldr	r3, [pc, #532]	; (80049d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	08db      	lsrs	r3, r3, #3
 80047c6:	f003 0303 	and.w	r3, r3, #3
 80047ca:	4a84      	ldr	r2, [pc, #528]	; (80049dc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80047cc:	fa22 f303 	lsr.w	r3, r2, r3
 80047d0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	ee07 3a90 	vmov	s15, r3
 80047d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	ee07 3a90 	vmov	s15, r3
 80047e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047ea:	4b7b      	ldr	r3, [pc, #492]	; (80049d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047f2:	ee07 3a90 	vmov	s15, r3
 80047f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80047fe:	eddf 5a78 	vldr	s11, [pc, #480]	; 80049e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004802:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004806:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800480a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800480e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004816:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800481a:	e087      	b.n	800492c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	ee07 3a90 	vmov	s15, r3
 8004822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004826:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80049e4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800482a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800482e:	4b6a      	ldr	r3, [pc, #424]	; (80049d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004836:	ee07 3a90 	vmov	s15, r3
 800483a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800483e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004842:	eddf 5a67 	vldr	s11, [pc, #412]	; 80049e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004846:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800484a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800484e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004852:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800485a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800485e:	e065      	b.n	800492c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	ee07 3a90 	vmov	s15, r3
 8004866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800486a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80049e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800486e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004872:	4b59      	ldr	r3, [pc, #356]	; (80049d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800487a:	ee07 3a90 	vmov	s15, r3
 800487e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004882:	ed97 6a03 	vldr	s12, [r7, #12]
 8004886:	eddf 5a56 	vldr	s11, [pc, #344]	; 80049e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800488a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800488e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004892:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004896:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800489a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800489e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80048a2:	e043      	b.n	800492c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	ee07 3a90 	vmov	s15, r3
 80048aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80049ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80048b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048b6:	4b48      	ldr	r3, [pc, #288]	; (80049d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048be:	ee07 3a90 	vmov	s15, r3
 80048c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80048ca:	eddf 5a45 	vldr	s11, [pc, #276]	; 80049e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80048e6:	e021      	b.n	800492c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	ee07 3a90 	vmov	s15, r3
 80048ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048f2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80049e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80048f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048fa:	4b37      	ldr	r3, [pc, #220]	; (80049d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004902:	ee07 3a90 	vmov	s15, r3
 8004906:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800490a:	ed97 6a03 	vldr	s12, [r7, #12]
 800490e:	eddf 5a34 	vldr	s11, [pc, #208]	; 80049e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004912:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004916:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800491a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800491e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004922:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004926:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800492a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800492c:	4b2a      	ldr	r3, [pc, #168]	; (80049d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800492e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004930:	0a5b      	lsrs	r3, r3, #9
 8004932:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004936:	ee07 3a90 	vmov	s15, r3
 800493a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800493e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004942:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004946:	edd7 6a07 	vldr	s13, [r7, #28]
 800494a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800494e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004952:	ee17 2a90 	vmov	r2, s15
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800495a:	4b1f      	ldr	r3, [pc, #124]	; (80049d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800495c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800495e:	0c1b      	lsrs	r3, r3, #16
 8004960:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004964:	ee07 3a90 	vmov	s15, r3
 8004968:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800496c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004970:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004974:	edd7 6a07 	vldr	s13, [r7, #28]
 8004978:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800497c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004980:	ee17 2a90 	vmov	r2, s15
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004988:	4b13      	ldr	r3, [pc, #76]	; (80049d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800498a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498c:	0e1b      	lsrs	r3, r3, #24
 800498e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004992:	ee07 3a90 	vmov	s15, r3
 8004996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800499a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800499e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80049a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049ae:	ee17 2a90 	vmov	r2, s15
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80049b6:	e008      	b.n	80049ca <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	609a      	str	r2, [r3, #8]
}
 80049ca:	bf00      	nop
 80049cc:	3724      	adds	r7, #36	; 0x24
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr
 80049d6:	bf00      	nop
 80049d8:	58024400 	.word	0x58024400
 80049dc:	03d09000 	.word	0x03d09000
 80049e0:	46000000 	.word	0x46000000
 80049e4:	4c742400 	.word	0x4c742400
 80049e8:	4a742400 	.word	0x4a742400
 80049ec:	4af42400 	.word	0x4af42400

080049f0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b089      	sub	sp, #36	; 0x24
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80049f8:	4ba1      	ldr	r3, [pc, #644]	; (8004c80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049fc:	f003 0303 	and.w	r3, r3, #3
 8004a00:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004a02:	4b9f      	ldr	r3, [pc, #636]	; (8004c80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a06:	0d1b      	lsrs	r3, r3, #20
 8004a08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a0c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004a0e:	4b9c      	ldr	r3, [pc, #624]	; (8004c80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a12:	0a1b      	lsrs	r3, r3, #8
 8004a14:	f003 0301 	and.w	r3, r3, #1
 8004a18:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004a1a:	4b99      	ldr	r3, [pc, #612]	; (8004c80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a1e:	08db      	lsrs	r3, r3, #3
 8004a20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a24:	693a      	ldr	r2, [r7, #16]
 8004a26:	fb02 f303 	mul.w	r3, r2, r3
 8004a2a:	ee07 3a90 	vmov	s15, r3
 8004a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a32:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f000 8111 	beq.w	8004c60 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	f000 8083 	beq.w	8004b4c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	f200 80a1 	bhi.w	8004b90 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d003      	beq.n	8004a5c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d056      	beq.n	8004b08 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004a5a:	e099      	b.n	8004b90 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a5c:	4b88      	ldr	r3, [pc, #544]	; (8004c80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0320 	and.w	r3, r3, #32
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d02d      	beq.n	8004ac4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004a68:	4b85      	ldr	r3, [pc, #532]	; (8004c80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	08db      	lsrs	r3, r3, #3
 8004a6e:	f003 0303 	and.w	r3, r3, #3
 8004a72:	4a84      	ldr	r2, [pc, #528]	; (8004c84 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004a74:	fa22 f303 	lsr.w	r3, r2, r3
 8004a78:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	ee07 3a90 	vmov	s15, r3
 8004a80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	ee07 3a90 	vmov	s15, r3
 8004a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a92:	4b7b      	ldr	r3, [pc, #492]	; (8004c80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a9a:	ee07 3a90 	vmov	s15, r3
 8004a9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aa2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004aa6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004c88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004aaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ab2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004abe:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004ac2:	e087      	b.n	8004bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	ee07 3a90 	vmov	s15, r3
 8004aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ace:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004c8c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004ad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ad6:	4b6a      	ldr	r3, [pc, #424]	; (8004c80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ade:	ee07 3a90 	vmov	s15, r3
 8004ae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ae6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004aea:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004c88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004aee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004af2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004af6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004afa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004b06:	e065      	b.n	8004bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	ee07 3a90 	vmov	s15, r3
 8004b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b12:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004c90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004b16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b1a:	4b59      	ldr	r3, [pc, #356]	; (8004c80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b22:	ee07 3a90 	vmov	s15, r3
 8004b26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b2e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004c88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004b4a:	e043      	b.n	8004bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	ee07 3a90 	vmov	s15, r3
 8004b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b56:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004c94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004b5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b5e:	4b48      	ldr	r3, [pc, #288]	; (8004c80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b66:	ee07 3a90 	vmov	s15, r3
 8004b6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b72:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004c88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004b8e:	e021      	b.n	8004bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	ee07 3a90 	vmov	s15, r3
 8004b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b9a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004c90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004b9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ba2:	4b37      	ldr	r3, [pc, #220]	; (8004c80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004baa:	ee07 3a90 	vmov	s15, r3
 8004bae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bb6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004c88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004bba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004bd2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004bd4:	4b2a      	ldr	r3, [pc, #168]	; (8004c80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd8:	0a5b      	lsrs	r3, r3, #9
 8004bda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bde:	ee07 3a90 	vmov	s15, r3
 8004be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004be6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004bea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bee:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bfa:	ee17 2a90 	vmov	r2, s15
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004c02:	4b1f      	ldr	r3, [pc, #124]	; (8004c80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c06:	0c1b      	lsrs	r3, r3, #16
 8004c08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c0c:	ee07 3a90 	vmov	s15, r3
 8004c10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c18:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c28:	ee17 2a90 	vmov	r2, s15
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004c30:	4b13      	ldr	r3, [pc, #76]	; (8004c80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c34:	0e1b      	lsrs	r3, r3, #24
 8004c36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c3a:	ee07 3a90 	vmov	s15, r3
 8004c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c56:	ee17 2a90 	vmov	r2, s15
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004c5e:	e008      	b.n	8004c72 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	609a      	str	r2, [r3, #8]
}
 8004c72:	bf00      	nop
 8004c74:	3724      	adds	r7, #36	; 0x24
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop
 8004c80:	58024400 	.word	0x58024400
 8004c84:	03d09000 	.word	0x03d09000
 8004c88:	46000000 	.word	0x46000000
 8004c8c:	4c742400 	.word	0x4c742400
 8004c90:	4a742400 	.word	0x4a742400
 8004c94:	4af42400 	.word	0x4af42400

08004c98 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004ca6:	4b53      	ldr	r3, [pc, #332]	; (8004df4 <RCCEx_PLL2_Config+0x15c>)
 8004ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004caa:	f003 0303 	and.w	r3, r3, #3
 8004cae:	2b03      	cmp	r3, #3
 8004cb0:	d101      	bne.n	8004cb6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e099      	b.n	8004dea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004cb6:	4b4f      	ldr	r3, [pc, #316]	; (8004df4 <RCCEx_PLL2_Config+0x15c>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a4e      	ldr	r2, [pc, #312]	; (8004df4 <RCCEx_PLL2_Config+0x15c>)
 8004cbc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004cc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cc2:	f7fc fd95 	bl	80017f0 <HAL_GetTick>
 8004cc6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004cc8:	e008      	b.n	8004cdc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004cca:	f7fc fd91 	bl	80017f0 <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d901      	bls.n	8004cdc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e086      	b.n	8004dea <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004cdc:	4b45      	ldr	r3, [pc, #276]	; (8004df4 <RCCEx_PLL2_Config+0x15c>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d1f0      	bne.n	8004cca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004ce8:	4b42      	ldr	r3, [pc, #264]	; (8004df4 <RCCEx_PLL2_Config+0x15c>)
 8004cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	031b      	lsls	r3, r3, #12
 8004cf6:	493f      	ldr	r1, [pc, #252]	; (8004df4 <RCCEx_PLL2_Config+0x15c>)
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	628b      	str	r3, [r1, #40]	; 0x28
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	3b01      	subs	r3, #1
 8004d02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	025b      	lsls	r3, r3, #9
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	431a      	orrs	r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	3b01      	subs	r3, #1
 8004d18:	041b      	lsls	r3, r3, #16
 8004d1a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004d1e:	431a      	orrs	r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	3b01      	subs	r3, #1
 8004d26:	061b      	lsls	r3, r3, #24
 8004d28:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004d2c:	4931      	ldr	r1, [pc, #196]	; (8004df4 <RCCEx_PLL2_Config+0x15c>)
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004d32:	4b30      	ldr	r3, [pc, #192]	; (8004df4 <RCCEx_PLL2_Config+0x15c>)
 8004d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d36:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	695b      	ldr	r3, [r3, #20]
 8004d3e:	492d      	ldr	r1, [pc, #180]	; (8004df4 <RCCEx_PLL2_Config+0x15c>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004d44:	4b2b      	ldr	r3, [pc, #172]	; (8004df4 <RCCEx_PLL2_Config+0x15c>)
 8004d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d48:	f023 0220 	bic.w	r2, r3, #32
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	699b      	ldr	r3, [r3, #24]
 8004d50:	4928      	ldr	r1, [pc, #160]	; (8004df4 <RCCEx_PLL2_Config+0x15c>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004d56:	4b27      	ldr	r3, [pc, #156]	; (8004df4 <RCCEx_PLL2_Config+0x15c>)
 8004d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5a:	4a26      	ldr	r2, [pc, #152]	; (8004df4 <RCCEx_PLL2_Config+0x15c>)
 8004d5c:	f023 0310 	bic.w	r3, r3, #16
 8004d60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004d62:	4b24      	ldr	r3, [pc, #144]	; (8004df4 <RCCEx_PLL2_Config+0x15c>)
 8004d64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d66:	4b24      	ldr	r3, [pc, #144]	; (8004df8 <RCCEx_PLL2_Config+0x160>)
 8004d68:	4013      	ands	r3, r2
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	69d2      	ldr	r2, [r2, #28]
 8004d6e:	00d2      	lsls	r2, r2, #3
 8004d70:	4920      	ldr	r1, [pc, #128]	; (8004df4 <RCCEx_PLL2_Config+0x15c>)
 8004d72:	4313      	orrs	r3, r2
 8004d74:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004d76:	4b1f      	ldr	r3, [pc, #124]	; (8004df4 <RCCEx_PLL2_Config+0x15c>)
 8004d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7a:	4a1e      	ldr	r2, [pc, #120]	; (8004df4 <RCCEx_PLL2_Config+0x15c>)
 8004d7c:	f043 0310 	orr.w	r3, r3, #16
 8004d80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d106      	bne.n	8004d96 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004d88:	4b1a      	ldr	r3, [pc, #104]	; (8004df4 <RCCEx_PLL2_Config+0x15c>)
 8004d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d8c:	4a19      	ldr	r2, [pc, #100]	; (8004df4 <RCCEx_PLL2_Config+0x15c>)
 8004d8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d92:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004d94:	e00f      	b.n	8004db6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d106      	bne.n	8004daa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004d9c:	4b15      	ldr	r3, [pc, #84]	; (8004df4 <RCCEx_PLL2_Config+0x15c>)
 8004d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da0:	4a14      	ldr	r2, [pc, #80]	; (8004df4 <RCCEx_PLL2_Config+0x15c>)
 8004da2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004da6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004da8:	e005      	b.n	8004db6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004daa:	4b12      	ldr	r3, [pc, #72]	; (8004df4 <RCCEx_PLL2_Config+0x15c>)
 8004dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dae:	4a11      	ldr	r2, [pc, #68]	; (8004df4 <RCCEx_PLL2_Config+0x15c>)
 8004db0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004db4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004db6:	4b0f      	ldr	r3, [pc, #60]	; (8004df4 <RCCEx_PLL2_Config+0x15c>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a0e      	ldr	r2, [pc, #56]	; (8004df4 <RCCEx_PLL2_Config+0x15c>)
 8004dbc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004dc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dc2:	f7fc fd15 	bl	80017f0 <HAL_GetTick>
 8004dc6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004dc8:	e008      	b.n	8004ddc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004dca:	f7fc fd11 	bl	80017f0 <HAL_GetTick>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d901      	bls.n	8004ddc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e006      	b.n	8004dea <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004ddc:	4b05      	ldr	r3, [pc, #20]	; (8004df4 <RCCEx_PLL2_Config+0x15c>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d0f0      	beq.n	8004dca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3710      	adds	r7, #16
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	58024400 	.word	0x58024400
 8004df8:	ffff0007 	.word	0xffff0007

08004dfc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e06:	2300      	movs	r3, #0
 8004e08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e0a:	4b53      	ldr	r3, [pc, #332]	; (8004f58 <RCCEx_PLL3_Config+0x15c>)
 8004e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e0e:	f003 0303 	and.w	r3, r3, #3
 8004e12:	2b03      	cmp	r3, #3
 8004e14:	d101      	bne.n	8004e1a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e099      	b.n	8004f4e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004e1a:	4b4f      	ldr	r3, [pc, #316]	; (8004f58 <RCCEx_PLL3_Config+0x15c>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a4e      	ldr	r2, [pc, #312]	; (8004f58 <RCCEx_PLL3_Config+0x15c>)
 8004e20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e26:	f7fc fce3 	bl	80017f0 <HAL_GetTick>
 8004e2a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e2c:	e008      	b.n	8004e40 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004e2e:	f7fc fcdf 	bl	80017f0 <HAL_GetTick>
 8004e32:	4602      	mov	r2, r0
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d901      	bls.n	8004e40 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e086      	b.n	8004f4e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e40:	4b45      	ldr	r3, [pc, #276]	; (8004f58 <RCCEx_PLL3_Config+0x15c>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d1f0      	bne.n	8004e2e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004e4c:	4b42      	ldr	r3, [pc, #264]	; (8004f58 <RCCEx_PLL3_Config+0x15c>)
 8004e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e50:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	051b      	lsls	r3, r3, #20
 8004e5a:	493f      	ldr	r1, [pc, #252]	; (8004f58 <RCCEx_PLL3_Config+0x15c>)
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	628b      	str	r3, [r1, #40]	; 0x28
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	3b01      	subs	r3, #1
 8004e66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	025b      	lsls	r3, r3, #9
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	431a      	orrs	r2, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	041b      	lsls	r3, r3, #16
 8004e7e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004e82:	431a      	orrs	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	3b01      	subs	r3, #1
 8004e8a:	061b      	lsls	r3, r3, #24
 8004e8c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004e90:	4931      	ldr	r1, [pc, #196]	; (8004f58 <RCCEx_PLL3_Config+0x15c>)
 8004e92:	4313      	orrs	r3, r2
 8004e94:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004e96:	4b30      	ldr	r3, [pc, #192]	; (8004f58 <RCCEx_PLL3_Config+0x15c>)
 8004e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	695b      	ldr	r3, [r3, #20]
 8004ea2:	492d      	ldr	r1, [pc, #180]	; (8004f58 <RCCEx_PLL3_Config+0x15c>)
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004ea8:	4b2b      	ldr	r3, [pc, #172]	; (8004f58 <RCCEx_PLL3_Config+0x15c>)
 8004eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	4928      	ldr	r1, [pc, #160]	; (8004f58 <RCCEx_PLL3_Config+0x15c>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004eba:	4b27      	ldr	r3, [pc, #156]	; (8004f58 <RCCEx_PLL3_Config+0x15c>)
 8004ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ebe:	4a26      	ldr	r2, [pc, #152]	; (8004f58 <RCCEx_PLL3_Config+0x15c>)
 8004ec0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ec4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004ec6:	4b24      	ldr	r3, [pc, #144]	; (8004f58 <RCCEx_PLL3_Config+0x15c>)
 8004ec8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004eca:	4b24      	ldr	r3, [pc, #144]	; (8004f5c <RCCEx_PLL3_Config+0x160>)
 8004ecc:	4013      	ands	r3, r2
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	69d2      	ldr	r2, [r2, #28]
 8004ed2:	00d2      	lsls	r2, r2, #3
 8004ed4:	4920      	ldr	r1, [pc, #128]	; (8004f58 <RCCEx_PLL3_Config+0x15c>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004eda:	4b1f      	ldr	r3, [pc, #124]	; (8004f58 <RCCEx_PLL3_Config+0x15c>)
 8004edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ede:	4a1e      	ldr	r2, [pc, #120]	; (8004f58 <RCCEx_PLL3_Config+0x15c>)
 8004ee0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ee4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d106      	bne.n	8004efa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004eec:	4b1a      	ldr	r3, [pc, #104]	; (8004f58 <RCCEx_PLL3_Config+0x15c>)
 8004eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef0:	4a19      	ldr	r2, [pc, #100]	; (8004f58 <RCCEx_PLL3_Config+0x15c>)
 8004ef2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004ef6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ef8:	e00f      	b.n	8004f1a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d106      	bne.n	8004f0e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004f00:	4b15      	ldr	r3, [pc, #84]	; (8004f58 <RCCEx_PLL3_Config+0x15c>)
 8004f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f04:	4a14      	ldr	r2, [pc, #80]	; (8004f58 <RCCEx_PLL3_Config+0x15c>)
 8004f06:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004f0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004f0c:	e005      	b.n	8004f1a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004f0e:	4b12      	ldr	r3, [pc, #72]	; (8004f58 <RCCEx_PLL3_Config+0x15c>)
 8004f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f12:	4a11      	ldr	r2, [pc, #68]	; (8004f58 <RCCEx_PLL3_Config+0x15c>)
 8004f14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f18:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004f1a:	4b0f      	ldr	r3, [pc, #60]	; (8004f58 <RCCEx_PLL3_Config+0x15c>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a0e      	ldr	r2, [pc, #56]	; (8004f58 <RCCEx_PLL3_Config+0x15c>)
 8004f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f26:	f7fc fc63 	bl	80017f0 <HAL_GetTick>
 8004f2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f2c:	e008      	b.n	8004f40 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004f2e:	f7fc fc5f 	bl	80017f0 <HAL_GetTick>
 8004f32:	4602      	mov	r2, r0
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d901      	bls.n	8004f40 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e006      	b.n	8004f4e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f40:	4b05      	ldr	r3, [pc, #20]	; (8004f58 <RCCEx_PLL3_Config+0x15c>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d0f0      	beq.n	8004f2e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3710      	adds	r7, #16
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	58024400 	.word	0x58024400
 8004f5c:	ffff0007 	.word	0xffff0007

08004f60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d101      	bne.n	8004f72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e042      	b.n	8004ff8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d106      	bne.n	8004f8a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f7fc f95b 	bl	8001240 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2224      	movs	r2, #36	; 0x24
 8004f8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f022 0201 	bic.w	r2, r2, #1
 8004fa0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 f82c 	bl	8005000 <UART_SetConfig>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d101      	bne.n	8004fb2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e022      	b.n	8004ff8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d002      	beq.n	8004fc0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 fd88 	bl	8005ad0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	685a      	ldr	r2, [r3, #4]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	689a      	ldr	r2, [r3, #8]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fde:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f042 0201 	orr.w	r2, r2, #1
 8004fee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f000 fe0f 	bl	8005c14 <UART_CheckIdleState>
 8004ff6:	4603      	mov	r3, r0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3708      	adds	r7, #8
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005000:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005004:	b092      	sub	sp, #72	; 0x48
 8005006:	af00      	add	r7, sp, #0
 8005008:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800500a:	2300      	movs	r3, #0
 800500c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	689a      	ldr	r2, [r3, #8]
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	431a      	orrs	r2, r3
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	431a      	orrs	r2, r3
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	69db      	ldr	r3, [r3, #28]
 8005024:	4313      	orrs	r3, r2
 8005026:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	4bbe      	ldr	r3, [pc, #760]	; (8005328 <UART_SetConfig+0x328>)
 8005030:	4013      	ands	r3, r2
 8005032:	697a      	ldr	r2, [r7, #20]
 8005034:	6812      	ldr	r2, [r2, #0]
 8005036:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005038:	430b      	orrs	r3, r1
 800503a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	68da      	ldr	r2, [r3, #12]
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	430a      	orrs	r2, r1
 8005050:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4ab3      	ldr	r2, [pc, #716]	; (800532c <UART_SetConfig+0x32c>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d004      	beq.n	800506c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	6a1b      	ldr	r3, [r3, #32]
 8005066:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005068:	4313      	orrs	r3, r2
 800506a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	689a      	ldr	r2, [r3, #8]
 8005072:	4baf      	ldr	r3, [pc, #700]	; (8005330 <UART_SetConfig+0x330>)
 8005074:	4013      	ands	r3, r2
 8005076:	697a      	ldr	r2, [r7, #20]
 8005078:	6812      	ldr	r2, [r2, #0]
 800507a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800507c:	430b      	orrs	r3, r1
 800507e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005086:	f023 010f 	bic.w	r1, r3, #15
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	430a      	orrs	r2, r1
 8005094:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4aa6      	ldr	r2, [pc, #664]	; (8005334 <UART_SetConfig+0x334>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d177      	bne.n	8005190 <UART_SetConfig+0x190>
 80050a0:	4ba5      	ldr	r3, [pc, #660]	; (8005338 <UART_SetConfig+0x338>)
 80050a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050a8:	2b28      	cmp	r3, #40	; 0x28
 80050aa:	d86d      	bhi.n	8005188 <UART_SetConfig+0x188>
 80050ac:	a201      	add	r2, pc, #4	; (adr r2, 80050b4 <UART_SetConfig+0xb4>)
 80050ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b2:	bf00      	nop
 80050b4:	08005159 	.word	0x08005159
 80050b8:	08005189 	.word	0x08005189
 80050bc:	08005189 	.word	0x08005189
 80050c0:	08005189 	.word	0x08005189
 80050c4:	08005189 	.word	0x08005189
 80050c8:	08005189 	.word	0x08005189
 80050cc:	08005189 	.word	0x08005189
 80050d0:	08005189 	.word	0x08005189
 80050d4:	08005161 	.word	0x08005161
 80050d8:	08005189 	.word	0x08005189
 80050dc:	08005189 	.word	0x08005189
 80050e0:	08005189 	.word	0x08005189
 80050e4:	08005189 	.word	0x08005189
 80050e8:	08005189 	.word	0x08005189
 80050ec:	08005189 	.word	0x08005189
 80050f0:	08005189 	.word	0x08005189
 80050f4:	08005169 	.word	0x08005169
 80050f8:	08005189 	.word	0x08005189
 80050fc:	08005189 	.word	0x08005189
 8005100:	08005189 	.word	0x08005189
 8005104:	08005189 	.word	0x08005189
 8005108:	08005189 	.word	0x08005189
 800510c:	08005189 	.word	0x08005189
 8005110:	08005189 	.word	0x08005189
 8005114:	08005171 	.word	0x08005171
 8005118:	08005189 	.word	0x08005189
 800511c:	08005189 	.word	0x08005189
 8005120:	08005189 	.word	0x08005189
 8005124:	08005189 	.word	0x08005189
 8005128:	08005189 	.word	0x08005189
 800512c:	08005189 	.word	0x08005189
 8005130:	08005189 	.word	0x08005189
 8005134:	08005179 	.word	0x08005179
 8005138:	08005189 	.word	0x08005189
 800513c:	08005189 	.word	0x08005189
 8005140:	08005189 	.word	0x08005189
 8005144:	08005189 	.word	0x08005189
 8005148:	08005189 	.word	0x08005189
 800514c:	08005189 	.word	0x08005189
 8005150:	08005189 	.word	0x08005189
 8005154:	08005181 	.word	0x08005181
 8005158:	2301      	movs	r3, #1
 800515a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800515e:	e222      	b.n	80055a6 <UART_SetConfig+0x5a6>
 8005160:	2304      	movs	r3, #4
 8005162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005166:	e21e      	b.n	80055a6 <UART_SetConfig+0x5a6>
 8005168:	2308      	movs	r3, #8
 800516a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800516e:	e21a      	b.n	80055a6 <UART_SetConfig+0x5a6>
 8005170:	2310      	movs	r3, #16
 8005172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005176:	e216      	b.n	80055a6 <UART_SetConfig+0x5a6>
 8005178:	2320      	movs	r3, #32
 800517a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800517e:	e212      	b.n	80055a6 <UART_SetConfig+0x5a6>
 8005180:	2340      	movs	r3, #64	; 0x40
 8005182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005186:	e20e      	b.n	80055a6 <UART_SetConfig+0x5a6>
 8005188:	2380      	movs	r3, #128	; 0x80
 800518a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800518e:	e20a      	b.n	80055a6 <UART_SetConfig+0x5a6>
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a69      	ldr	r2, [pc, #420]	; (800533c <UART_SetConfig+0x33c>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d130      	bne.n	80051fc <UART_SetConfig+0x1fc>
 800519a:	4b67      	ldr	r3, [pc, #412]	; (8005338 <UART_SetConfig+0x338>)
 800519c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800519e:	f003 0307 	and.w	r3, r3, #7
 80051a2:	2b05      	cmp	r3, #5
 80051a4:	d826      	bhi.n	80051f4 <UART_SetConfig+0x1f4>
 80051a6:	a201      	add	r2, pc, #4	; (adr r2, 80051ac <UART_SetConfig+0x1ac>)
 80051a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ac:	080051c5 	.word	0x080051c5
 80051b0:	080051cd 	.word	0x080051cd
 80051b4:	080051d5 	.word	0x080051d5
 80051b8:	080051dd 	.word	0x080051dd
 80051bc:	080051e5 	.word	0x080051e5
 80051c0:	080051ed 	.word	0x080051ed
 80051c4:	2300      	movs	r3, #0
 80051c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051ca:	e1ec      	b.n	80055a6 <UART_SetConfig+0x5a6>
 80051cc:	2304      	movs	r3, #4
 80051ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051d2:	e1e8      	b.n	80055a6 <UART_SetConfig+0x5a6>
 80051d4:	2308      	movs	r3, #8
 80051d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051da:	e1e4      	b.n	80055a6 <UART_SetConfig+0x5a6>
 80051dc:	2310      	movs	r3, #16
 80051de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051e2:	e1e0      	b.n	80055a6 <UART_SetConfig+0x5a6>
 80051e4:	2320      	movs	r3, #32
 80051e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051ea:	e1dc      	b.n	80055a6 <UART_SetConfig+0x5a6>
 80051ec:	2340      	movs	r3, #64	; 0x40
 80051ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051f2:	e1d8      	b.n	80055a6 <UART_SetConfig+0x5a6>
 80051f4:	2380      	movs	r3, #128	; 0x80
 80051f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051fa:	e1d4      	b.n	80055a6 <UART_SetConfig+0x5a6>
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a4f      	ldr	r2, [pc, #316]	; (8005340 <UART_SetConfig+0x340>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d130      	bne.n	8005268 <UART_SetConfig+0x268>
 8005206:	4b4c      	ldr	r3, [pc, #304]	; (8005338 <UART_SetConfig+0x338>)
 8005208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800520a:	f003 0307 	and.w	r3, r3, #7
 800520e:	2b05      	cmp	r3, #5
 8005210:	d826      	bhi.n	8005260 <UART_SetConfig+0x260>
 8005212:	a201      	add	r2, pc, #4	; (adr r2, 8005218 <UART_SetConfig+0x218>)
 8005214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005218:	08005231 	.word	0x08005231
 800521c:	08005239 	.word	0x08005239
 8005220:	08005241 	.word	0x08005241
 8005224:	08005249 	.word	0x08005249
 8005228:	08005251 	.word	0x08005251
 800522c:	08005259 	.word	0x08005259
 8005230:	2300      	movs	r3, #0
 8005232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005236:	e1b6      	b.n	80055a6 <UART_SetConfig+0x5a6>
 8005238:	2304      	movs	r3, #4
 800523a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800523e:	e1b2      	b.n	80055a6 <UART_SetConfig+0x5a6>
 8005240:	2308      	movs	r3, #8
 8005242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005246:	e1ae      	b.n	80055a6 <UART_SetConfig+0x5a6>
 8005248:	2310      	movs	r3, #16
 800524a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800524e:	e1aa      	b.n	80055a6 <UART_SetConfig+0x5a6>
 8005250:	2320      	movs	r3, #32
 8005252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005256:	e1a6      	b.n	80055a6 <UART_SetConfig+0x5a6>
 8005258:	2340      	movs	r3, #64	; 0x40
 800525a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800525e:	e1a2      	b.n	80055a6 <UART_SetConfig+0x5a6>
 8005260:	2380      	movs	r3, #128	; 0x80
 8005262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005266:	e19e      	b.n	80055a6 <UART_SetConfig+0x5a6>
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a35      	ldr	r2, [pc, #212]	; (8005344 <UART_SetConfig+0x344>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d130      	bne.n	80052d4 <UART_SetConfig+0x2d4>
 8005272:	4b31      	ldr	r3, [pc, #196]	; (8005338 <UART_SetConfig+0x338>)
 8005274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005276:	f003 0307 	and.w	r3, r3, #7
 800527a:	2b05      	cmp	r3, #5
 800527c:	d826      	bhi.n	80052cc <UART_SetConfig+0x2cc>
 800527e:	a201      	add	r2, pc, #4	; (adr r2, 8005284 <UART_SetConfig+0x284>)
 8005280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005284:	0800529d 	.word	0x0800529d
 8005288:	080052a5 	.word	0x080052a5
 800528c:	080052ad 	.word	0x080052ad
 8005290:	080052b5 	.word	0x080052b5
 8005294:	080052bd 	.word	0x080052bd
 8005298:	080052c5 	.word	0x080052c5
 800529c:	2300      	movs	r3, #0
 800529e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052a2:	e180      	b.n	80055a6 <UART_SetConfig+0x5a6>
 80052a4:	2304      	movs	r3, #4
 80052a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052aa:	e17c      	b.n	80055a6 <UART_SetConfig+0x5a6>
 80052ac:	2308      	movs	r3, #8
 80052ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052b2:	e178      	b.n	80055a6 <UART_SetConfig+0x5a6>
 80052b4:	2310      	movs	r3, #16
 80052b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052ba:	e174      	b.n	80055a6 <UART_SetConfig+0x5a6>
 80052bc:	2320      	movs	r3, #32
 80052be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052c2:	e170      	b.n	80055a6 <UART_SetConfig+0x5a6>
 80052c4:	2340      	movs	r3, #64	; 0x40
 80052c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052ca:	e16c      	b.n	80055a6 <UART_SetConfig+0x5a6>
 80052cc:	2380      	movs	r3, #128	; 0x80
 80052ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052d2:	e168      	b.n	80055a6 <UART_SetConfig+0x5a6>
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a1b      	ldr	r2, [pc, #108]	; (8005348 <UART_SetConfig+0x348>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d142      	bne.n	8005364 <UART_SetConfig+0x364>
 80052de:	4b16      	ldr	r3, [pc, #88]	; (8005338 <UART_SetConfig+0x338>)
 80052e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052e2:	f003 0307 	and.w	r3, r3, #7
 80052e6:	2b05      	cmp	r3, #5
 80052e8:	d838      	bhi.n	800535c <UART_SetConfig+0x35c>
 80052ea:	a201      	add	r2, pc, #4	; (adr r2, 80052f0 <UART_SetConfig+0x2f0>)
 80052ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052f0:	08005309 	.word	0x08005309
 80052f4:	08005311 	.word	0x08005311
 80052f8:	08005319 	.word	0x08005319
 80052fc:	08005321 	.word	0x08005321
 8005300:	0800534d 	.word	0x0800534d
 8005304:	08005355 	.word	0x08005355
 8005308:	2300      	movs	r3, #0
 800530a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800530e:	e14a      	b.n	80055a6 <UART_SetConfig+0x5a6>
 8005310:	2304      	movs	r3, #4
 8005312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005316:	e146      	b.n	80055a6 <UART_SetConfig+0x5a6>
 8005318:	2308      	movs	r3, #8
 800531a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800531e:	e142      	b.n	80055a6 <UART_SetConfig+0x5a6>
 8005320:	2310      	movs	r3, #16
 8005322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005326:	e13e      	b.n	80055a6 <UART_SetConfig+0x5a6>
 8005328:	cfff69f3 	.word	0xcfff69f3
 800532c:	58000c00 	.word	0x58000c00
 8005330:	11fff4ff 	.word	0x11fff4ff
 8005334:	40011000 	.word	0x40011000
 8005338:	58024400 	.word	0x58024400
 800533c:	40004400 	.word	0x40004400
 8005340:	40004800 	.word	0x40004800
 8005344:	40004c00 	.word	0x40004c00
 8005348:	40005000 	.word	0x40005000
 800534c:	2320      	movs	r3, #32
 800534e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005352:	e128      	b.n	80055a6 <UART_SetConfig+0x5a6>
 8005354:	2340      	movs	r3, #64	; 0x40
 8005356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800535a:	e124      	b.n	80055a6 <UART_SetConfig+0x5a6>
 800535c:	2380      	movs	r3, #128	; 0x80
 800535e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005362:	e120      	b.n	80055a6 <UART_SetConfig+0x5a6>
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4acb      	ldr	r2, [pc, #812]	; (8005698 <UART_SetConfig+0x698>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d176      	bne.n	800545c <UART_SetConfig+0x45c>
 800536e:	4bcb      	ldr	r3, [pc, #812]	; (800569c <UART_SetConfig+0x69c>)
 8005370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005372:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005376:	2b28      	cmp	r3, #40	; 0x28
 8005378:	d86c      	bhi.n	8005454 <UART_SetConfig+0x454>
 800537a:	a201      	add	r2, pc, #4	; (adr r2, 8005380 <UART_SetConfig+0x380>)
 800537c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005380:	08005425 	.word	0x08005425
 8005384:	08005455 	.word	0x08005455
 8005388:	08005455 	.word	0x08005455
 800538c:	08005455 	.word	0x08005455
 8005390:	08005455 	.word	0x08005455
 8005394:	08005455 	.word	0x08005455
 8005398:	08005455 	.word	0x08005455
 800539c:	08005455 	.word	0x08005455
 80053a0:	0800542d 	.word	0x0800542d
 80053a4:	08005455 	.word	0x08005455
 80053a8:	08005455 	.word	0x08005455
 80053ac:	08005455 	.word	0x08005455
 80053b0:	08005455 	.word	0x08005455
 80053b4:	08005455 	.word	0x08005455
 80053b8:	08005455 	.word	0x08005455
 80053bc:	08005455 	.word	0x08005455
 80053c0:	08005435 	.word	0x08005435
 80053c4:	08005455 	.word	0x08005455
 80053c8:	08005455 	.word	0x08005455
 80053cc:	08005455 	.word	0x08005455
 80053d0:	08005455 	.word	0x08005455
 80053d4:	08005455 	.word	0x08005455
 80053d8:	08005455 	.word	0x08005455
 80053dc:	08005455 	.word	0x08005455
 80053e0:	0800543d 	.word	0x0800543d
 80053e4:	08005455 	.word	0x08005455
 80053e8:	08005455 	.word	0x08005455
 80053ec:	08005455 	.word	0x08005455
 80053f0:	08005455 	.word	0x08005455
 80053f4:	08005455 	.word	0x08005455
 80053f8:	08005455 	.word	0x08005455
 80053fc:	08005455 	.word	0x08005455
 8005400:	08005445 	.word	0x08005445
 8005404:	08005455 	.word	0x08005455
 8005408:	08005455 	.word	0x08005455
 800540c:	08005455 	.word	0x08005455
 8005410:	08005455 	.word	0x08005455
 8005414:	08005455 	.word	0x08005455
 8005418:	08005455 	.word	0x08005455
 800541c:	08005455 	.word	0x08005455
 8005420:	0800544d 	.word	0x0800544d
 8005424:	2301      	movs	r3, #1
 8005426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800542a:	e0bc      	b.n	80055a6 <UART_SetConfig+0x5a6>
 800542c:	2304      	movs	r3, #4
 800542e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005432:	e0b8      	b.n	80055a6 <UART_SetConfig+0x5a6>
 8005434:	2308      	movs	r3, #8
 8005436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800543a:	e0b4      	b.n	80055a6 <UART_SetConfig+0x5a6>
 800543c:	2310      	movs	r3, #16
 800543e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005442:	e0b0      	b.n	80055a6 <UART_SetConfig+0x5a6>
 8005444:	2320      	movs	r3, #32
 8005446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800544a:	e0ac      	b.n	80055a6 <UART_SetConfig+0x5a6>
 800544c:	2340      	movs	r3, #64	; 0x40
 800544e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005452:	e0a8      	b.n	80055a6 <UART_SetConfig+0x5a6>
 8005454:	2380      	movs	r3, #128	; 0x80
 8005456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800545a:	e0a4      	b.n	80055a6 <UART_SetConfig+0x5a6>
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a8f      	ldr	r2, [pc, #572]	; (80056a0 <UART_SetConfig+0x6a0>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d130      	bne.n	80054c8 <UART_SetConfig+0x4c8>
 8005466:	4b8d      	ldr	r3, [pc, #564]	; (800569c <UART_SetConfig+0x69c>)
 8005468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800546a:	f003 0307 	and.w	r3, r3, #7
 800546e:	2b05      	cmp	r3, #5
 8005470:	d826      	bhi.n	80054c0 <UART_SetConfig+0x4c0>
 8005472:	a201      	add	r2, pc, #4	; (adr r2, 8005478 <UART_SetConfig+0x478>)
 8005474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005478:	08005491 	.word	0x08005491
 800547c:	08005499 	.word	0x08005499
 8005480:	080054a1 	.word	0x080054a1
 8005484:	080054a9 	.word	0x080054a9
 8005488:	080054b1 	.word	0x080054b1
 800548c:	080054b9 	.word	0x080054b9
 8005490:	2300      	movs	r3, #0
 8005492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005496:	e086      	b.n	80055a6 <UART_SetConfig+0x5a6>
 8005498:	2304      	movs	r3, #4
 800549a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800549e:	e082      	b.n	80055a6 <UART_SetConfig+0x5a6>
 80054a0:	2308      	movs	r3, #8
 80054a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054a6:	e07e      	b.n	80055a6 <UART_SetConfig+0x5a6>
 80054a8:	2310      	movs	r3, #16
 80054aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054ae:	e07a      	b.n	80055a6 <UART_SetConfig+0x5a6>
 80054b0:	2320      	movs	r3, #32
 80054b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054b6:	e076      	b.n	80055a6 <UART_SetConfig+0x5a6>
 80054b8:	2340      	movs	r3, #64	; 0x40
 80054ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054be:	e072      	b.n	80055a6 <UART_SetConfig+0x5a6>
 80054c0:	2380      	movs	r3, #128	; 0x80
 80054c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054c6:	e06e      	b.n	80055a6 <UART_SetConfig+0x5a6>
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a75      	ldr	r2, [pc, #468]	; (80056a4 <UART_SetConfig+0x6a4>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d130      	bne.n	8005534 <UART_SetConfig+0x534>
 80054d2:	4b72      	ldr	r3, [pc, #456]	; (800569c <UART_SetConfig+0x69c>)
 80054d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054d6:	f003 0307 	and.w	r3, r3, #7
 80054da:	2b05      	cmp	r3, #5
 80054dc:	d826      	bhi.n	800552c <UART_SetConfig+0x52c>
 80054de:	a201      	add	r2, pc, #4	; (adr r2, 80054e4 <UART_SetConfig+0x4e4>)
 80054e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e4:	080054fd 	.word	0x080054fd
 80054e8:	08005505 	.word	0x08005505
 80054ec:	0800550d 	.word	0x0800550d
 80054f0:	08005515 	.word	0x08005515
 80054f4:	0800551d 	.word	0x0800551d
 80054f8:	08005525 	.word	0x08005525
 80054fc:	2300      	movs	r3, #0
 80054fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005502:	e050      	b.n	80055a6 <UART_SetConfig+0x5a6>
 8005504:	2304      	movs	r3, #4
 8005506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800550a:	e04c      	b.n	80055a6 <UART_SetConfig+0x5a6>
 800550c:	2308      	movs	r3, #8
 800550e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005512:	e048      	b.n	80055a6 <UART_SetConfig+0x5a6>
 8005514:	2310      	movs	r3, #16
 8005516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800551a:	e044      	b.n	80055a6 <UART_SetConfig+0x5a6>
 800551c:	2320      	movs	r3, #32
 800551e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005522:	e040      	b.n	80055a6 <UART_SetConfig+0x5a6>
 8005524:	2340      	movs	r3, #64	; 0x40
 8005526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800552a:	e03c      	b.n	80055a6 <UART_SetConfig+0x5a6>
 800552c:	2380      	movs	r3, #128	; 0x80
 800552e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005532:	e038      	b.n	80055a6 <UART_SetConfig+0x5a6>
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a5b      	ldr	r2, [pc, #364]	; (80056a8 <UART_SetConfig+0x6a8>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d130      	bne.n	80055a0 <UART_SetConfig+0x5a0>
 800553e:	4b57      	ldr	r3, [pc, #348]	; (800569c <UART_SetConfig+0x69c>)
 8005540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005542:	f003 0307 	and.w	r3, r3, #7
 8005546:	2b05      	cmp	r3, #5
 8005548:	d826      	bhi.n	8005598 <UART_SetConfig+0x598>
 800554a:	a201      	add	r2, pc, #4	; (adr r2, 8005550 <UART_SetConfig+0x550>)
 800554c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005550:	08005569 	.word	0x08005569
 8005554:	08005571 	.word	0x08005571
 8005558:	08005579 	.word	0x08005579
 800555c:	08005581 	.word	0x08005581
 8005560:	08005589 	.word	0x08005589
 8005564:	08005591 	.word	0x08005591
 8005568:	2302      	movs	r3, #2
 800556a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800556e:	e01a      	b.n	80055a6 <UART_SetConfig+0x5a6>
 8005570:	2304      	movs	r3, #4
 8005572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005576:	e016      	b.n	80055a6 <UART_SetConfig+0x5a6>
 8005578:	2308      	movs	r3, #8
 800557a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800557e:	e012      	b.n	80055a6 <UART_SetConfig+0x5a6>
 8005580:	2310      	movs	r3, #16
 8005582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005586:	e00e      	b.n	80055a6 <UART_SetConfig+0x5a6>
 8005588:	2320      	movs	r3, #32
 800558a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800558e:	e00a      	b.n	80055a6 <UART_SetConfig+0x5a6>
 8005590:	2340      	movs	r3, #64	; 0x40
 8005592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005596:	e006      	b.n	80055a6 <UART_SetConfig+0x5a6>
 8005598:	2380      	movs	r3, #128	; 0x80
 800559a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800559e:	e002      	b.n	80055a6 <UART_SetConfig+0x5a6>
 80055a0:	2380      	movs	r3, #128	; 0x80
 80055a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a3f      	ldr	r2, [pc, #252]	; (80056a8 <UART_SetConfig+0x6a8>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	f040 80f8 	bne.w	80057a2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80055b2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80055b6:	2b20      	cmp	r3, #32
 80055b8:	dc46      	bgt.n	8005648 <UART_SetConfig+0x648>
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	f2c0 8082 	blt.w	80056c4 <UART_SetConfig+0x6c4>
 80055c0:	3b02      	subs	r3, #2
 80055c2:	2b1e      	cmp	r3, #30
 80055c4:	d87e      	bhi.n	80056c4 <UART_SetConfig+0x6c4>
 80055c6:	a201      	add	r2, pc, #4	; (adr r2, 80055cc <UART_SetConfig+0x5cc>)
 80055c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055cc:	0800564f 	.word	0x0800564f
 80055d0:	080056c5 	.word	0x080056c5
 80055d4:	08005657 	.word	0x08005657
 80055d8:	080056c5 	.word	0x080056c5
 80055dc:	080056c5 	.word	0x080056c5
 80055e0:	080056c5 	.word	0x080056c5
 80055e4:	08005667 	.word	0x08005667
 80055e8:	080056c5 	.word	0x080056c5
 80055ec:	080056c5 	.word	0x080056c5
 80055f0:	080056c5 	.word	0x080056c5
 80055f4:	080056c5 	.word	0x080056c5
 80055f8:	080056c5 	.word	0x080056c5
 80055fc:	080056c5 	.word	0x080056c5
 8005600:	080056c5 	.word	0x080056c5
 8005604:	08005677 	.word	0x08005677
 8005608:	080056c5 	.word	0x080056c5
 800560c:	080056c5 	.word	0x080056c5
 8005610:	080056c5 	.word	0x080056c5
 8005614:	080056c5 	.word	0x080056c5
 8005618:	080056c5 	.word	0x080056c5
 800561c:	080056c5 	.word	0x080056c5
 8005620:	080056c5 	.word	0x080056c5
 8005624:	080056c5 	.word	0x080056c5
 8005628:	080056c5 	.word	0x080056c5
 800562c:	080056c5 	.word	0x080056c5
 8005630:	080056c5 	.word	0x080056c5
 8005634:	080056c5 	.word	0x080056c5
 8005638:	080056c5 	.word	0x080056c5
 800563c:	080056c5 	.word	0x080056c5
 8005640:	080056c5 	.word	0x080056c5
 8005644:	080056b7 	.word	0x080056b7
 8005648:	2b40      	cmp	r3, #64	; 0x40
 800564a:	d037      	beq.n	80056bc <UART_SetConfig+0x6bc>
 800564c:	e03a      	b.n	80056c4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800564e:	f7ff f865 	bl	800471c <HAL_RCCEx_GetD3PCLK1Freq>
 8005652:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005654:	e03c      	b.n	80056d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005656:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800565a:	4618      	mov	r0, r3
 800565c:	f7ff f874 	bl	8004748 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005662:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005664:	e034      	b.n	80056d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005666:	f107 0318 	add.w	r3, r7, #24
 800566a:	4618      	mov	r0, r3
 800566c:	f7ff f9c0 	bl	80049f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005674:	e02c      	b.n	80056d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005676:	4b09      	ldr	r3, [pc, #36]	; (800569c <UART_SetConfig+0x69c>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 0320 	and.w	r3, r3, #32
 800567e:	2b00      	cmp	r3, #0
 8005680:	d016      	beq.n	80056b0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005682:	4b06      	ldr	r3, [pc, #24]	; (800569c <UART_SetConfig+0x69c>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	08db      	lsrs	r3, r3, #3
 8005688:	f003 0303 	and.w	r3, r3, #3
 800568c:	4a07      	ldr	r2, [pc, #28]	; (80056ac <UART_SetConfig+0x6ac>)
 800568e:	fa22 f303 	lsr.w	r3, r2, r3
 8005692:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005694:	e01c      	b.n	80056d0 <UART_SetConfig+0x6d0>
 8005696:	bf00      	nop
 8005698:	40011400 	.word	0x40011400
 800569c:	58024400 	.word	0x58024400
 80056a0:	40007800 	.word	0x40007800
 80056a4:	40007c00 	.word	0x40007c00
 80056a8:	58000c00 	.word	0x58000c00
 80056ac:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80056b0:	4b9d      	ldr	r3, [pc, #628]	; (8005928 <UART_SetConfig+0x928>)
 80056b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056b4:	e00c      	b.n	80056d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80056b6:	4b9d      	ldr	r3, [pc, #628]	; (800592c <UART_SetConfig+0x92c>)
 80056b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056ba:	e009      	b.n	80056d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056c2:	e005      	b.n	80056d0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80056c4:	2300      	movs	r3, #0
 80056c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80056ce:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80056d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	f000 81de 	beq.w	8005a94 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056dc:	4a94      	ldr	r2, [pc, #592]	; (8005930 <UART_SetConfig+0x930>)
 80056de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056e2:	461a      	mov	r2, r3
 80056e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80056ea:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	685a      	ldr	r2, [r3, #4]
 80056f0:	4613      	mov	r3, r2
 80056f2:	005b      	lsls	r3, r3, #1
 80056f4:	4413      	add	r3, r2
 80056f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d305      	bcc.n	8005708 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005702:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005704:	429a      	cmp	r2, r3
 8005706:	d903      	bls.n	8005710 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800570e:	e1c1      	b.n	8005a94 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005712:	2200      	movs	r2, #0
 8005714:	60bb      	str	r3, [r7, #8]
 8005716:	60fa      	str	r2, [r7, #12]
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571c:	4a84      	ldr	r2, [pc, #528]	; (8005930 <UART_SetConfig+0x930>)
 800571e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005722:	b29b      	uxth	r3, r3
 8005724:	2200      	movs	r2, #0
 8005726:	603b      	str	r3, [r7, #0]
 8005728:	607a      	str	r2, [r7, #4]
 800572a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800572e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005732:	f7fa fdd1 	bl	80002d8 <__aeabi_uldivmod>
 8005736:	4602      	mov	r2, r0
 8005738:	460b      	mov	r3, r1
 800573a:	4610      	mov	r0, r2
 800573c:	4619      	mov	r1, r3
 800573e:	f04f 0200 	mov.w	r2, #0
 8005742:	f04f 0300 	mov.w	r3, #0
 8005746:	020b      	lsls	r3, r1, #8
 8005748:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800574c:	0202      	lsls	r2, r0, #8
 800574e:	6979      	ldr	r1, [r7, #20]
 8005750:	6849      	ldr	r1, [r1, #4]
 8005752:	0849      	lsrs	r1, r1, #1
 8005754:	2000      	movs	r0, #0
 8005756:	460c      	mov	r4, r1
 8005758:	4605      	mov	r5, r0
 800575a:	eb12 0804 	adds.w	r8, r2, r4
 800575e:	eb43 0905 	adc.w	r9, r3, r5
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	469a      	mov	sl, r3
 800576a:	4693      	mov	fp, r2
 800576c:	4652      	mov	r2, sl
 800576e:	465b      	mov	r3, fp
 8005770:	4640      	mov	r0, r8
 8005772:	4649      	mov	r1, r9
 8005774:	f7fa fdb0 	bl	80002d8 <__aeabi_uldivmod>
 8005778:	4602      	mov	r2, r0
 800577a:	460b      	mov	r3, r1
 800577c:	4613      	mov	r3, r2
 800577e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005782:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005786:	d308      	bcc.n	800579a <UART_SetConfig+0x79a>
 8005788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800578a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800578e:	d204      	bcs.n	800579a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005796:	60da      	str	r2, [r3, #12]
 8005798:	e17c      	b.n	8005a94 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80057a0:	e178      	b.n	8005a94 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	69db      	ldr	r3, [r3, #28]
 80057a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057aa:	f040 80c5 	bne.w	8005938 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80057ae:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80057b2:	2b20      	cmp	r3, #32
 80057b4:	dc48      	bgt.n	8005848 <UART_SetConfig+0x848>
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	db7b      	blt.n	80058b2 <UART_SetConfig+0x8b2>
 80057ba:	2b20      	cmp	r3, #32
 80057bc:	d879      	bhi.n	80058b2 <UART_SetConfig+0x8b2>
 80057be:	a201      	add	r2, pc, #4	; (adr r2, 80057c4 <UART_SetConfig+0x7c4>)
 80057c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c4:	0800584f 	.word	0x0800584f
 80057c8:	08005857 	.word	0x08005857
 80057cc:	080058b3 	.word	0x080058b3
 80057d0:	080058b3 	.word	0x080058b3
 80057d4:	0800585f 	.word	0x0800585f
 80057d8:	080058b3 	.word	0x080058b3
 80057dc:	080058b3 	.word	0x080058b3
 80057e0:	080058b3 	.word	0x080058b3
 80057e4:	0800586f 	.word	0x0800586f
 80057e8:	080058b3 	.word	0x080058b3
 80057ec:	080058b3 	.word	0x080058b3
 80057f0:	080058b3 	.word	0x080058b3
 80057f4:	080058b3 	.word	0x080058b3
 80057f8:	080058b3 	.word	0x080058b3
 80057fc:	080058b3 	.word	0x080058b3
 8005800:	080058b3 	.word	0x080058b3
 8005804:	0800587f 	.word	0x0800587f
 8005808:	080058b3 	.word	0x080058b3
 800580c:	080058b3 	.word	0x080058b3
 8005810:	080058b3 	.word	0x080058b3
 8005814:	080058b3 	.word	0x080058b3
 8005818:	080058b3 	.word	0x080058b3
 800581c:	080058b3 	.word	0x080058b3
 8005820:	080058b3 	.word	0x080058b3
 8005824:	080058b3 	.word	0x080058b3
 8005828:	080058b3 	.word	0x080058b3
 800582c:	080058b3 	.word	0x080058b3
 8005830:	080058b3 	.word	0x080058b3
 8005834:	080058b3 	.word	0x080058b3
 8005838:	080058b3 	.word	0x080058b3
 800583c:	080058b3 	.word	0x080058b3
 8005840:	080058b3 	.word	0x080058b3
 8005844:	080058a5 	.word	0x080058a5
 8005848:	2b40      	cmp	r3, #64	; 0x40
 800584a:	d02e      	beq.n	80058aa <UART_SetConfig+0x8aa>
 800584c:	e031      	b.n	80058b2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800584e:	f7fd fff3 	bl	8003838 <HAL_RCC_GetPCLK1Freq>
 8005852:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005854:	e033      	b.n	80058be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005856:	f7fe f805 	bl	8003864 <HAL_RCC_GetPCLK2Freq>
 800585a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800585c:	e02f      	b.n	80058be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800585e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005862:	4618      	mov	r0, r3
 8005864:	f7fe ff70 	bl	8004748 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800586a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800586c:	e027      	b.n	80058be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800586e:	f107 0318 	add.w	r3, r7, #24
 8005872:	4618      	mov	r0, r3
 8005874:	f7ff f8bc 	bl	80049f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800587c:	e01f      	b.n	80058be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800587e:	4b2d      	ldr	r3, [pc, #180]	; (8005934 <UART_SetConfig+0x934>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 0320 	and.w	r3, r3, #32
 8005886:	2b00      	cmp	r3, #0
 8005888:	d009      	beq.n	800589e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800588a:	4b2a      	ldr	r3, [pc, #168]	; (8005934 <UART_SetConfig+0x934>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	08db      	lsrs	r3, r3, #3
 8005890:	f003 0303 	and.w	r3, r3, #3
 8005894:	4a24      	ldr	r2, [pc, #144]	; (8005928 <UART_SetConfig+0x928>)
 8005896:	fa22 f303 	lsr.w	r3, r2, r3
 800589a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800589c:	e00f      	b.n	80058be <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800589e:	4b22      	ldr	r3, [pc, #136]	; (8005928 <UART_SetConfig+0x928>)
 80058a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058a2:	e00c      	b.n	80058be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80058a4:	4b21      	ldr	r3, [pc, #132]	; (800592c <UART_SetConfig+0x92c>)
 80058a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058a8:	e009      	b.n	80058be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058b0:	e005      	b.n	80058be <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80058b2:	2300      	movs	r3, #0
 80058b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80058bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80058be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	f000 80e7 	beq.w	8005a94 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ca:	4a19      	ldr	r2, [pc, #100]	; (8005930 <UART_SetConfig+0x930>)
 80058cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058d0:	461a      	mov	r2, r3
 80058d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80058d8:	005a      	lsls	r2, r3, #1
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	085b      	lsrs	r3, r3, #1
 80058e0:	441a      	add	r2, r3
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ea:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ee:	2b0f      	cmp	r3, #15
 80058f0:	d916      	bls.n	8005920 <UART_SetConfig+0x920>
 80058f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058f8:	d212      	bcs.n	8005920 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	f023 030f 	bic.w	r3, r3, #15
 8005902:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005906:	085b      	lsrs	r3, r3, #1
 8005908:	b29b      	uxth	r3, r3
 800590a:	f003 0307 	and.w	r3, r3, #7
 800590e:	b29a      	uxth	r2, r3
 8005910:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005912:	4313      	orrs	r3, r2
 8005914:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800591c:	60da      	str	r2, [r3, #12]
 800591e:	e0b9      	b.n	8005a94 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005926:	e0b5      	b.n	8005a94 <UART_SetConfig+0xa94>
 8005928:	03d09000 	.word	0x03d09000
 800592c:	003d0900 	.word	0x003d0900
 8005930:	08006758 	.word	0x08006758
 8005934:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005938:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800593c:	2b20      	cmp	r3, #32
 800593e:	dc49      	bgt.n	80059d4 <UART_SetConfig+0x9d4>
 8005940:	2b00      	cmp	r3, #0
 8005942:	db7c      	blt.n	8005a3e <UART_SetConfig+0xa3e>
 8005944:	2b20      	cmp	r3, #32
 8005946:	d87a      	bhi.n	8005a3e <UART_SetConfig+0xa3e>
 8005948:	a201      	add	r2, pc, #4	; (adr r2, 8005950 <UART_SetConfig+0x950>)
 800594a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800594e:	bf00      	nop
 8005950:	080059db 	.word	0x080059db
 8005954:	080059e3 	.word	0x080059e3
 8005958:	08005a3f 	.word	0x08005a3f
 800595c:	08005a3f 	.word	0x08005a3f
 8005960:	080059eb 	.word	0x080059eb
 8005964:	08005a3f 	.word	0x08005a3f
 8005968:	08005a3f 	.word	0x08005a3f
 800596c:	08005a3f 	.word	0x08005a3f
 8005970:	080059fb 	.word	0x080059fb
 8005974:	08005a3f 	.word	0x08005a3f
 8005978:	08005a3f 	.word	0x08005a3f
 800597c:	08005a3f 	.word	0x08005a3f
 8005980:	08005a3f 	.word	0x08005a3f
 8005984:	08005a3f 	.word	0x08005a3f
 8005988:	08005a3f 	.word	0x08005a3f
 800598c:	08005a3f 	.word	0x08005a3f
 8005990:	08005a0b 	.word	0x08005a0b
 8005994:	08005a3f 	.word	0x08005a3f
 8005998:	08005a3f 	.word	0x08005a3f
 800599c:	08005a3f 	.word	0x08005a3f
 80059a0:	08005a3f 	.word	0x08005a3f
 80059a4:	08005a3f 	.word	0x08005a3f
 80059a8:	08005a3f 	.word	0x08005a3f
 80059ac:	08005a3f 	.word	0x08005a3f
 80059b0:	08005a3f 	.word	0x08005a3f
 80059b4:	08005a3f 	.word	0x08005a3f
 80059b8:	08005a3f 	.word	0x08005a3f
 80059bc:	08005a3f 	.word	0x08005a3f
 80059c0:	08005a3f 	.word	0x08005a3f
 80059c4:	08005a3f 	.word	0x08005a3f
 80059c8:	08005a3f 	.word	0x08005a3f
 80059cc:	08005a3f 	.word	0x08005a3f
 80059d0:	08005a31 	.word	0x08005a31
 80059d4:	2b40      	cmp	r3, #64	; 0x40
 80059d6:	d02e      	beq.n	8005a36 <UART_SetConfig+0xa36>
 80059d8:	e031      	b.n	8005a3e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059da:	f7fd ff2d 	bl	8003838 <HAL_RCC_GetPCLK1Freq>
 80059de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80059e0:	e033      	b.n	8005a4a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059e2:	f7fd ff3f 	bl	8003864 <HAL_RCC_GetPCLK2Freq>
 80059e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80059e8:	e02f      	b.n	8005a4a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059ee:	4618      	mov	r0, r3
 80059f0:	f7fe feaa 	bl	8004748 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80059f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059f8:	e027      	b.n	8005a4a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059fa:	f107 0318 	add.w	r3, r7, #24
 80059fe:	4618      	mov	r0, r3
 8005a00:	f7fe fff6 	bl	80049f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a08:	e01f      	b.n	8005a4a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a0a:	4b2d      	ldr	r3, [pc, #180]	; (8005ac0 <UART_SetConfig+0xac0>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 0320 	and.w	r3, r3, #32
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d009      	beq.n	8005a2a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005a16:	4b2a      	ldr	r3, [pc, #168]	; (8005ac0 <UART_SetConfig+0xac0>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	08db      	lsrs	r3, r3, #3
 8005a1c:	f003 0303 	and.w	r3, r3, #3
 8005a20:	4a28      	ldr	r2, [pc, #160]	; (8005ac4 <UART_SetConfig+0xac4>)
 8005a22:	fa22 f303 	lsr.w	r3, r2, r3
 8005a26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005a28:	e00f      	b.n	8005a4a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005a2a:	4b26      	ldr	r3, [pc, #152]	; (8005ac4 <UART_SetConfig+0xac4>)
 8005a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a2e:	e00c      	b.n	8005a4a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005a30:	4b25      	ldr	r3, [pc, #148]	; (8005ac8 <UART_SetConfig+0xac8>)
 8005a32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a34:	e009      	b.n	8005a4a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a3c:	e005      	b.n	8005a4a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005a48:	bf00      	nop
    }

    if (pclk != 0U)
 8005a4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d021      	beq.n	8005a94 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a54:	4a1d      	ldr	r2, [pc, #116]	; (8005acc <UART_SetConfig+0xacc>)
 8005a56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a5e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	085b      	lsrs	r3, r3, #1
 8005a68:	441a      	add	r2, r3
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a72:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a76:	2b0f      	cmp	r3, #15
 8005a78:	d909      	bls.n	8005a8e <UART_SetConfig+0xa8e>
 8005a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a80:	d205      	bcs.n	8005a8e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a84:	b29a      	uxth	r2, r3
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	60da      	str	r2, [r3, #12]
 8005a8c:	e002      	b.n	8005a94 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	2200      	movs	r2, #0
 8005aae:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005ab0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3748      	adds	r7, #72	; 0x48
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005abe:	bf00      	nop
 8005ac0:	58024400 	.word	0x58024400
 8005ac4:	03d09000 	.word	0x03d09000
 8005ac8:	003d0900 	.word	0x003d0900
 8005acc:	08006758 	.word	0x08006758

08005ad0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005adc:	f003 0301 	and.w	r3, r3, #1
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d00a      	beq.n	8005afa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	430a      	orrs	r2, r1
 8005af8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005afe:	f003 0302 	and.w	r3, r3, #2
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d00a      	beq.n	8005b1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	430a      	orrs	r2, r1
 8005b1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b20:	f003 0304 	and.w	r3, r3, #4
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d00a      	beq.n	8005b3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	430a      	orrs	r2, r1
 8005b3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b42:	f003 0308 	and.w	r3, r3, #8
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d00a      	beq.n	8005b60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	430a      	orrs	r2, r1
 8005b5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b64:	f003 0310 	and.w	r3, r3, #16
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d00a      	beq.n	8005b82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	430a      	orrs	r2, r1
 8005b80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b86:	f003 0320 	and.w	r3, r3, #32
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d00a      	beq.n	8005ba4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	430a      	orrs	r2, r1
 8005ba2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d01a      	beq.n	8005be6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	430a      	orrs	r2, r1
 8005bc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bce:	d10a      	bne.n	8005be6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	430a      	orrs	r2, r1
 8005be4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d00a      	beq.n	8005c08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	430a      	orrs	r2, r1
 8005c06:	605a      	str	r2, [r3, #4]
  }
}
 8005c08:	bf00      	nop
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b086      	sub	sp, #24
 8005c18:	af02      	add	r7, sp, #8
 8005c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c24:	f7fb fde4 	bl	80017f0 <HAL_GetTick>
 8005c28:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 0308 	and.w	r3, r3, #8
 8005c34:	2b08      	cmp	r3, #8
 8005c36:	d10e      	bne.n	8005c56 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c3c:	9300      	str	r3, [sp, #0]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 f82f 	bl	8005caa <UART_WaitOnFlagUntilTimeout>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d001      	beq.n	8005c56 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c52:	2303      	movs	r3, #3
 8005c54:	e025      	b.n	8005ca2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 0304 	and.w	r3, r3, #4
 8005c60:	2b04      	cmp	r3, #4
 8005c62:	d10e      	bne.n	8005c82 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c68:	9300      	str	r3, [sp, #0]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 f819 	bl	8005caa <UART_WaitOnFlagUntilTimeout>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d001      	beq.n	8005c82 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e00f      	b.n	8005ca2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2220      	movs	r2, #32
 8005c86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2220      	movs	r2, #32
 8005c8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3710      	adds	r7, #16
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}

08005caa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b09c      	sub	sp, #112	; 0x70
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	60f8      	str	r0, [r7, #12]
 8005cb2:	60b9      	str	r1, [r7, #8]
 8005cb4:	603b      	str	r3, [r7, #0]
 8005cb6:	4613      	mov	r3, r2
 8005cb8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cba:	e0a9      	b.n	8005e10 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc2:	f000 80a5 	beq.w	8005e10 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cc6:	f7fb fd93 	bl	80017f0 <HAL_GetTick>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	1ad3      	subs	r3, r2, r3
 8005cd0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d302      	bcc.n	8005cdc <UART_WaitOnFlagUntilTimeout+0x32>
 8005cd6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d140      	bne.n	8005d5e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ce4:	e853 3f00 	ldrex	r3, [r3]
 8005ce8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005cea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005cf0:	667b      	str	r3, [r7, #100]	; 0x64
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cfa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cfc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cfe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005d00:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005d02:	e841 2300 	strex	r3, r2, [r1]
 8005d06:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005d08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d1e6      	bne.n	8005cdc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	3308      	adds	r3, #8
 8005d14:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d18:	e853 3f00 	ldrex	r3, [r3]
 8005d1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d20:	f023 0301 	bic.w	r3, r3, #1
 8005d24:	663b      	str	r3, [r7, #96]	; 0x60
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	3308      	adds	r3, #8
 8005d2c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005d2e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005d30:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d32:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005d34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d36:	e841 2300 	strex	r3, r2, [r1]
 8005d3a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005d3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d1e5      	bne.n	8005d0e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2220      	movs	r2, #32
 8005d46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2220      	movs	r2, #32
 8005d4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	e069      	b.n	8005e32 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 0304 	and.w	r3, r3, #4
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d051      	beq.n	8005e10 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	69db      	ldr	r3, [r3, #28]
 8005d72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d7a:	d149      	bne.n	8005e10 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d84:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d8e:	e853 3f00 	ldrex	r3, [r3]
 8005d92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d96:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d9a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	461a      	mov	r2, r3
 8005da2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005da4:	637b      	str	r3, [r7, #52]	; 0x34
 8005da6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005daa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005dac:	e841 2300 	strex	r3, r2, [r1]
 8005db0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d1e6      	bne.n	8005d86 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	3308      	adds	r3, #8
 8005dbe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	e853 3f00 	ldrex	r3, [r3]
 8005dc6:	613b      	str	r3, [r7, #16]
   return(result);
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	f023 0301 	bic.w	r3, r3, #1
 8005dce:	66bb      	str	r3, [r7, #104]	; 0x68
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	3308      	adds	r3, #8
 8005dd6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005dd8:	623a      	str	r2, [r7, #32]
 8005dda:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ddc:	69f9      	ldr	r1, [r7, #28]
 8005dde:	6a3a      	ldr	r2, [r7, #32]
 8005de0:	e841 2300 	strex	r3, r2, [r1]
 8005de4:	61bb      	str	r3, [r7, #24]
   return(result);
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d1e5      	bne.n	8005db8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2220      	movs	r2, #32
 8005df0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2220      	movs	r2, #32
 8005df8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2220      	movs	r2, #32
 8005e00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2200      	movs	r2, #0
 8005e08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005e0c:	2303      	movs	r3, #3
 8005e0e:	e010      	b.n	8005e32 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	69da      	ldr	r2, [r3, #28]
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	4013      	ands	r3, r2
 8005e1a:	68ba      	ldr	r2, [r7, #8]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	bf0c      	ite	eq
 8005e20:	2301      	moveq	r3, #1
 8005e22:	2300      	movne	r3, #0
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	461a      	mov	r2, r3
 8005e28:	79fb      	ldrb	r3, [r7, #7]
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	f43f af46 	beq.w	8005cbc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e30:	2300      	movs	r3, #0
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3770      	adds	r7, #112	; 0x70
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}

08005e3a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005e3a:	b480      	push	{r7}
 8005e3c:	b085      	sub	sp, #20
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d101      	bne.n	8005e50 <HAL_UARTEx_DisableFifoMode+0x16>
 8005e4c:	2302      	movs	r3, #2
 8005e4e:	e027      	b.n	8005ea0 <HAL_UARTEx_DisableFifoMode+0x66>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2224      	movs	r2, #36	; 0x24
 8005e5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f022 0201 	bic.w	r2, r2, #1
 8005e76:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005e7e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	68fa      	ldr	r2, [r7, #12]
 8005e8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2220      	movs	r2, #32
 8005e92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005e9e:	2300      	movs	r3, #0
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3714      	adds	r7, #20
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr

08005eac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d101      	bne.n	8005ec4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005ec0:	2302      	movs	r3, #2
 8005ec2:	e02d      	b.n	8005f20 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2224      	movs	r2, #36	; 0x24
 8005ed0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f022 0201 	bic.w	r2, r2, #1
 8005eea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	683a      	ldr	r2, [r7, #0]
 8005efc:	430a      	orrs	r2, r1
 8005efe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f000 f84f 	bl	8005fa4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	68fa      	ldr	r2, [r7, #12]
 8005f0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2220      	movs	r2, #32
 8005f12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005f1e:	2300      	movs	r3, #0
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3710      	adds	r7, #16
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d101      	bne.n	8005f40 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005f3c:	2302      	movs	r3, #2
 8005f3e:	e02d      	b.n	8005f9c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2224      	movs	r2, #36	; 0x24
 8005f4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f022 0201 	bic.w	r2, r2, #1
 8005f66:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	683a      	ldr	r2, [r7, #0]
 8005f78:	430a      	orrs	r2, r1
 8005f7a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 f811 	bl	8005fa4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	68fa      	ldr	r2, [r7, #12]
 8005f88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2220      	movs	r2, #32
 8005f8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3710      	adds	r7, #16
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b085      	sub	sp, #20
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d108      	bne.n	8005fc6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005fc4:	e031      	b.n	800602a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005fc6:	2310      	movs	r3, #16
 8005fc8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005fca:	2310      	movs	r3, #16
 8005fcc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	0e5b      	lsrs	r3, r3, #25
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	f003 0307 	and.w	r3, r3, #7
 8005fdc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	0f5b      	lsrs	r3, r3, #29
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	f003 0307 	and.w	r3, r3, #7
 8005fec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005fee:	7bbb      	ldrb	r3, [r7, #14]
 8005ff0:	7b3a      	ldrb	r2, [r7, #12]
 8005ff2:	4911      	ldr	r1, [pc, #68]	; (8006038 <UARTEx_SetNbDataToProcess+0x94>)
 8005ff4:	5c8a      	ldrb	r2, [r1, r2]
 8005ff6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005ffa:	7b3a      	ldrb	r2, [r7, #12]
 8005ffc:	490f      	ldr	r1, [pc, #60]	; (800603c <UARTEx_SetNbDataToProcess+0x98>)
 8005ffe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006000:	fb93 f3f2 	sdiv	r3, r3, r2
 8006004:	b29a      	uxth	r2, r3
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800600c:	7bfb      	ldrb	r3, [r7, #15]
 800600e:	7b7a      	ldrb	r2, [r7, #13]
 8006010:	4909      	ldr	r1, [pc, #36]	; (8006038 <UARTEx_SetNbDataToProcess+0x94>)
 8006012:	5c8a      	ldrb	r2, [r1, r2]
 8006014:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006018:	7b7a      	ldrb	r2, [r7, #13]
 800601a:	4908      	ldr	r1, [pc, #32]	; (800603c <UARTEx_SetNbDataToProcess+0x98>)
 800601c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800601e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006022:	b29a      	uxth	r2, r3
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800602a:	bf00      	nop
 800602c:	3714      	adds	r7, #20
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr
 8006036:	bf00      	nop
 8006038:	08006770 	.word	0x08006770
 800603c:	08006778 	.word	0x08006778

08006040 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006040:	b084      	sub	sp, #16
 8006042:	b580      	push	{r7, lr}
 8006044:	b084      	sub	sp, #16
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
 800604a:	f107 001c 	add.w	r0, r7, #28
 800604e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006054:	2b01      	cmp	r3, #1
 8006056:	d120      	bne.n	800609a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	68da      	ldr	r2, [r3, #12]
 8006068:	4b2a      	ldr	r3, [pc, #168]	; (8006114 <USB_CoreInit+0xd4>)
 800606a:	4013      	ands	r3, r2
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800607c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800607e:	2b01      	cmp	r3, #1
 8006080:	d105      	bne.n	800608e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 faac 	bl	80065ec <USB_CoreReset>
 8006094:	4603      	mov	r3, r0
 8006096:	73fb      	strb	r3, [r7, #15]
 8006098:	e01a      	b.n	80060d0 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	68db      	ldr	r3, [r3, #12]
 800609e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 faa0 	bl	80065ec <USB_CoreReset>
 80060ac:	4603      	mov	r3, r0
 80060ae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80060b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d106      	bne.n	80060c4 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	639a      	str	r2, [r3, #56]	; 0x38
 80060c2:	e005      	b.n	80060d0 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80060d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d116      	bne.n	8006104 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060da:	b29a      	uxth	r2, r3
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80060e4:	4b0c      	ldr	r3, [pc, #48]	; (8006118 <USB_CoreInit+0xd8>)
 80060e6:	4313      	orrs	r3, r2
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	f043 0206 	orr.w	r2, r3, #6
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	f043 0220 	orr.w	r2, r3, #32
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006104:	7bfb      	ldrb	r3, [r7, #15]
}
 8006106:	4618      	mov	r0, r3
 8006108:	3710      	adds	r7, #16
 800610a:	46bd      	mov	sp, r7
 800610c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006110:	b004      	add	sp, #16
 8006112:	4770      	bx	lr
 8006114:	ffbdffbf 	.word	0xffbdffbf
 8006118:	03ee0000 	.word	0x03ee0000

0800611c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	f023 0201 	bic.w	r2, r3, #1
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	370c      	adds	r7, #12
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr

0800613e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800613e:	b580      	push	{r7, lr}
 8006140:	b084      	sub	sp, #16
 8006142:	af00      	add	r7, sp, #0
 8006144:	6078      	str	r0, [r7, #4]
 8006146:	460b      	mov	r3, r1
 8006148:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800614a:	2300      	movs	r3, #0
 800614c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800615a:	78fb      	ldrb	r3, [r7, #3]
 800615c:	2b01      	cmp	r3, #1
 800615e:	d115      	bne.n	800618c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800616c:	2001      	movs	r0, #1
 800616e:	f7fb fb4b 	bl	8001808 <HAL_Delay>
      ms++;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	3301      	adds	r3, #1
 8006176:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f000 fa29 	bl	80065d0 <USB_GetMode>
 800617e:	4603      	mov	r3, r0
 8006180:	2b01      	cmp	r3, #1
 8006182:	d01e      	beq.n	80061c2 <USB_SetCurrentMode+0x84>
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2b31      	cmp	r3, #49	; 0x31
 8006188:	d9f0      	bls.n	800616c <USB_SetCurrentMode+0x2e>
 800618a:	e01a      	b.n	80061c2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800618c:	78fb      	ldrb	r3, [r7, #3]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d115      	bne.n	80061be <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800619e:	2001      	movs	r0, #1
 80061a0:	f7fb fb32 	bl	8001808 <HAL_Delay>
      ms++;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	3301      	adds	r3, #1
 80061a8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 fa10 	bl	80065d0 <USB_GetMode>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d005      	beq.n	80061c2 <USB_SetCurrentMode+0x84>
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2b31      	cmp	r3, #49	; 0x31
 80061ba:	d9f0      	bls.n	800619e <USB_SetCurrentMode+0x60>
 80061bc:	e001      	b.n	80061c2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	e005      	b.n	80061ce <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2b32      	cmp	r3, #50	; 0x32
 80061c6:	d101      	bne.n	80061cc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e000      	b.n	80061ce <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80061cc:	2300      	movs	r3, #0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3710      	adds	r7, #16
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
	...

080061d8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80061d8:	b084      	sub	sp, #16
 80061da:	b580      	push	{r7, lr}
 80061dc:	b086      	sub	sp, #24
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
 80061e2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80061e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80061ea:	2300      	movs	r3, #0
 80061ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80061f2:	2300      	movs	r3, #0
 80061f4:	613b      	str	r3, [r7, #16]
 80061f6:	e009      	b.n	800620c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	3340      	adds	r3, #64	; 0x40
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	4413      	add	r3, r2
 8006202:	2200      	movs	r2, #0
 8006204:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	3301      	adds	r3, #1
 800620a:	613b      	str	r3, [r7, #16]
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	2b0e      	cmp	r3, #14
 8006210:	d9f2      	bls.n	80061f8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006212:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006214:	2b00      	cmp	r3, #0
 8006216:	d11c      	bne.n	8006252 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	68fa      	ldr	r2, [r7, #12]
 8006222:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006226:	f043 0302 	orr.w	r3, r3, #2
 800622a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006230:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	601a      	str	r2, [r3, #0]
 8006250:	e005      	b.n	800625e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006256:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006264:	461a      	mov	r2, r3
 8006266:	2300      	movs	r3, #0
 8006268:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006270:	4619      	mov	r1, r3
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006278:	461a      	mov	r2, r3
 800627a:	680b      	ldr	r3, [r1, #0]
 800627c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800627e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006280:	2b01      	cmp	r3, #1
 8006282:	d10c      	bne.n	800629e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006286:	2b00      	cmp	r3, #0
 8006288:	d104      	bne.n	8006294 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800628a:	2100      	movs	r1, #0
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 f965 	bl	800655c <USB_SetDevSpeed>
 8006292:	e008      	b.n	80062a6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006294:	2101      	movs	r1, #1
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 f960 	bl	800655c <USB_SetDevSpeed>
 800629c:	e003      	b.n	80062a6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800629e:	2103      	movs	r1, #3
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f000 f95b 	bl	800655c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80062a6:	2110      	movs	r1, #16
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 f8f3 	bl	8006494 <USB_FlushTxFifo>
 80062ae:	4603      	mov	r3, r0
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d001      	beq.n	80062b8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 f91f 	bl	80064fc <USB_FlushRxFifo>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d001      	beq.n	80062c8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062ce:	461a      	mov	r2, r3
 80062d0:	2300      	movs	r3, #0
 80062d2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062da:	461a      	mov	r2, r3
 80062dc:	2300      	movs	r3, #0
 80062de:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062e6:	461a      	mov	r2, r3
 80062e8:	2300      	movs	r3, #0
 80062ea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062ec:	2300      	movs	r3, #0
 80062ee:	613b      	str	r3, [r7, #16]
 80062f0:	e043      	b.n	800637a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	015a      	lsls	r2, r3, #5
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	4413      	add	r3, r2
 80062fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006304:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006308:	d118      	bne.n	800633c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d10a      	bne.n	8006326 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	015a      	lsls	r2, r3, #5
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	4413      	add	r3, r2
 8006318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800631c:	461a      	mov	r2, r3
 800631e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006322:	6013      	str	r3, [r2, #0]
 8006324:	e013      	b.n	800634e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	015a      	lsls	r2, r3, #5
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	4413      	add	r3, r2
 800632e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006332:	461a      	mov	r2, r3
 8006334:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006338:	6013      	str	r3, [r2, #0]
 800633a:	e008      	b.n	800634e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	015a      	lsls	r2, r3, #5
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	4413      	add	r3, r2
 8006344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006348:	461a      	mov	r2, r3
 800634a:	2300      	movs	r3, #0
 800634c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	015a      	lsls	r2, r3, #5
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	4413      	add	r3, r2
 8006356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800635a:	461a      	mov	r2, r3
 800635c:	2300      	movs	r3, #0
 800635e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	015a      	lsls	r2, r3, #5
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	4413      	add	r3, r2
 8006368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800636c:	461a      	mov	r2, r3
 800636e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006372:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	3301      	adds	r3, #1
 8006378:	613b      	str	r3, [r7, #16]
 800637a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637c:	693a      	ldr	r2, [r7, #16]
 800637e:	429a      	cmp	r2, r3
 8006380:	d3b7      	bcc.n	80062f2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006382:	2300      	movs	r3, #0
 8006384:	613b      	str	r3, [r7, #16]
 8006386:	e043      	b.n	8006410 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	015a      	lsls	r2, r3, #5
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	4413      	add	r3, r2
 8006390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800639a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800639e:	d118      	bne.n	80063d2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d10a      	bne.n	80063bc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	015a      	lsls	r2, r3, #5
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	4413      	add	r3, r2
 80063ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063b2:	461a      	mov	r2, r3
 80063b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80063b8:	6013      	str	r3, [r2, #0]
 80063ba:	e013      	b.n	80063e4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	015a      	lsls	r2, r3, #5
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	4413      	add	r3, r2
 80063c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063c8:	461a      	mov	r2, r3
 80063ca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80063ce:	6013      	str	r3, [r2, #0]
 80063d0:	e008      	b.n	80063e4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	015a      	lsls	r2, r3, #5
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	4413      	add	r3, r2
 80063da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063de:	461a      	mov	r2, r3
 80063e0:	2300      	movs	r3, #0
 80063e2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	015a      	lsls	r2, r3, #5
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	4413      	add	r3, r2
 80063ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063f0:	461a      	mov	r2, r3
 80063f2:	2300      	movs	r3, #0
 80063f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	015a      	lsls	r2, r3, #5
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	4413      	add	r3, r2
 80063fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006402:	461a      	mov	r2, r3
 8006404:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006408:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	3301      	adds	r3, #1
 800640e:	613b      	str	r3, [r7, #16]
 8006410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006412:	693a      	ldr	r2, [r7, #16]
 8006414:	429a      	cmp	r2, r3
 8006416:	d3b7      	bcc.n	8006388 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800641e:	691b      	ldr	r3, [r3, #16]
 8006420:	68fa      	ldr	r2, [r7, #12]
 8006422:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006426:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800642a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006438:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800643a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800643c:	2b00      	cmp	r3, #0
 800643e:	d105      	bne.n	800644c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	699b      	ldr	r3, [r3, #24]
 8006444:	f043 0210 	orr.w	r2, r3, #16
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	699a      	ldr	r2, [r3, #24]
 8006450:	4b0e      	ldr	r3, [pc, #56]	; (800648c <USB_DevInit+0x2b4>)
 8006452:	4313      	orrs	r3, r2
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800645a:	2b00      	cmp	r3, #0
 800645c:	d005      	beq.n	800646a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	699b      	ldr	r3, [r3, #24]
 8006462:	f043 0208 	orr.w	r2, r3, #8
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800646a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800646c:	2b01      	cmp	r3, #1
 800646e:	d105      	bne.n	800647c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	699a      	ldr	r2, [r3, #24]
 8006474:	4b06      	ldr	r3, [pc, #24]	; (8006490 <USB_DevInit+0x2b8>)
 8006476:	4313      	orrs	r3, r2
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800647c:	7dfb      	ldrb	r3, [r7, #23]
}
 800647e:	4618      	mov	r0, r3
 8006480:	3718      	adds	r7, #24
 8006482:	46bd      	mov	sp, r7
 8006484:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006488:	b004      	add	sp, #16
 800648a:	4770      	bx	lr
 800648c:	803c3800 	.word	0x803c3800
 8006490:	40000004 	.word	0x40000004

08006494 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006494:	b480      	push	{r7}
 8006496:	b085      	sub	sp, #20
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800649e:	2300      	movs	r3, #0
 80064a0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	3301      	adds	r3, #1
 80064a6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	4a13      	ldr	r2, [pc, #76]	; (80064f8 <USB_FlushTxFifo+0x64>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d901      	bls.n	80064b4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80064b0:	2303      	movs	r3, #3
 80064b2:	e01b      	b.n	80064ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	691b      	ldr	r3, [r3, #16]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	daf2      	bge.n	80064a2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80064bc:	2300      	movs	r3, #0
 80064be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	019b      	lsls	r3, r3, #6
 80064c4:	f043 0220 	orr.w	r2, r3, #32
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	3301      	adds	r3, #1
 80064d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	4a08      	ldr	r2, [pc, #32]	; (80064f8 <USB_FlushTxFifo+0x64>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d901      	bls.n	80064de <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80064da:	2303      	movs	r3, #3
 80064dc:	e006      	b.n	80064ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	f003 0320 	and.w	r3, r3, #32
 80064e6:	2b20      	cmp	r3, #32
 80064e8:	d0f0      	beq.n	80064cc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80064ea:	2300      	movs	r3, #0
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3714      	adds	r7, #20
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr
 80064f8:	00030d40 	.word	0x00030d40

080064fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b085      	sub	sp, #20
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006504:	2300      	movs	r3, #0
 8006506:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	3301      	adds	r3, #1
 800650c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	4a11      	ldr	r2, [pc, #68]	; (8006558 <USB_FlushRxFifo+0x5c>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d901      	bls.n	800651a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006516:	2303      	movs	r3, #3
 8006518:	e018      	b.n	800654c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	691b      	ldr	r3, [r3, #16]
 800651e:	2b00      	cmp	r3, #0
 8006520:	daf2      	bge.n	8006508 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006522:	2300      	movs	r3, #0
 8006524:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2210      	movs	r2, #16
 800652a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	3301      	adds	r3, #1
 8006530:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	4a08      	ldr	r2, [pc, #32]	; (8006558 <USB_FlushRxFifo+0x5c>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d901      	bls.n	800653e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800653a:	2303      	movs	r3, #3
 800653c:	e006      	b.n	800654c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	691b      	ldr	r3, [r3, #16]
 8006542:	f003 0310 	and.w	r3, r3, #16
 8006546:	2b10      	cmp	r3, #16
 8006548:	d0f0      	beq.n	800652c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800654a:	2300      	movs	r3, #0
}
 800654c:	4618      	mov	r0, r3
 800654e:	3714      	adds	r7, #20
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr
 8006558:	00030d40 	.word	0x00030d40

0800655c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800655c:	b480      	push	{r7}
 800655e:	b085      	sub	sp, #20
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	460b      	mov	r3, r1
 8006566:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	78fb      	ldrb	r3, [r7, #3]
 8006576:	68f9      	ldr	r1, [r7, #12]
 8006578:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800657c:	4313      	orrs	r3, r2
 800657e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	3714      	adds	r7, #20
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr

0800658e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800658e:	b480      	push	{r7}
 8006590:	b085      	sub	sp, #20
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68fa      	ldr	r2, [r7, #12]
 80065a4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80065a8:	f023 0303 	bic.w	r3, r3, #3
 80065ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	68fa      	ldr	r2, [r7, #12]
 80065b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065bc:	f043 0302 	orr.w	r3, r3, #2
 80065c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3714      	adds	r7, #20
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b083      	sub	sp, #12
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	695b      	ldr	r3, [r3, #20]
 80065dc:	f003 0301 	and.w	r3, r3, #1
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	370c      	adds	r7, #12
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr

080065ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b085      	sub	sp, #20
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065f4:	2300      	movs	r3, #0
 80065f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	3301      	adds	r3, #1
 80065fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	4a13      	ldr	r2, [pc, #76]	; (8006650 <USB_CoreReset+0x64>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d901      	bls.n	800660a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006606:	2303      	movs	r3, #3
 8006608:	e01b      	b.n	8006642 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	2b00      	cmp	r3, #0
 8006610:	daf2      	bge.n	80065f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006612:	2300      	movs	r3, #0
 8006614:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	f043 0201 	orr.w	r2, r3, #1
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	3301      	adds	r3, #1
 8006626:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	4a09      	ldr	r2, [pc, #36]	; (8006650 <USB_CoreReset+0x64>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d901      	bls.n	8006634 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006630:	2303      	movs	r3, #3
 8006632:	e006      	b.n	8006642 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	691b      	ldr	r3, [r3, #16]
 8006638:	f003 0301 	and.w	r3, r3, #1
 800663c:	2b01      	cmp	r3, #1
 800663e:	d0f0      	beq.n	8006622 <USB_CoreReset+0x36>

  return HAL_OK;
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	3714      	adds	r7, #20
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr
 800664e:	bf00      	nop
 8006650:	00030d40 	.word	0x00030d40

08006654 <__libc_init_array>:
 8006654:	b570      	push	{r4, r5, r6, lr}
 8006656:	4d0d      	ldr	r5, [pc, #52]	; (800668c <__libc_init_array+0x38>)
 8006658:	4c0d      	ldr	r4, [pc, #52]	; (8006690 <__libc_init_array+0x3c>)
 800665a:	1b64      	subs	r4, r4, r5
 800665c:	10a4      	asrs	r4, r4, #2
 800665e:	2600      	movs	r6, #0
 8006660:	42a6      	cmp	r6, r4
 8006662:	d109      	bne.n	8006678 <__libc_init_array+0x24>
 8006664:	4d0b      	ldr	r5, [pc, #44]	; (8006694 <__libc_init_array+0x40>)
 8006666:	4c0c      	ldr	r4, [pc, #48]	; (8006698 <__libc_init_array+0x44>)
 8006668:	f000 f820 	bl	80066ac <_init>
 800666c:	1b64      	subs	r4, r4, r5
 800666e:	10a4      	asrs	r4, r4, #2
 8006670:	2600      	movs	r6, #0
 8006672:	42a6      	cmp	r6, r4
 8006674:	d105      	bne.n	8006682 <__libc_init_array+0x2e>
 8006676:	bd70      	pop	{r4, r5, r6, pc}
 8006678:	f855 3b04 	ldr.w	r3, [r5], #4
 800667c:	4798      	blx	r3
 800667e:	3601      	adds	r6, #1
 8006680:	e7ee      	b.n	8006660 <__libc_init_array+0xc>
 8006682:	f855 3b04 	ldr.w	r3, [r5], #4
 8006686:	4798      	blx	r3
 8006688:	3601      	adds	r6, #1
 800668a:	e7f2      	b.n	8006672 <__libc_init_array+0x1e>
 800668c:	08006788 	.word	0x08006788
 8006690:	08006788 	.word	0x08006788
 8006694:	08006788 	.word	0x08006788
 8006698:	0800678c 	.word	0x0800678c

0800669c <memset>:
 800669c:	4402      	add	r2, r0
 800669e:	4603      	mov	r3, r0
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d100      	bne.n	80066a6 <memset+0xa>
 80066a4:	4770      	bx	lr
 80066a6:	f803 1b01 	strb.w	r1, [r3], #1
 80066aa:	e7f9      	b.n	80066a0 <memset+0x4>

080066ac <_init>:
 80066ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ae:	bf00      	nop
 80066b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066b2:	bc08      	pop	{r3}
 80066b4:	469e      	mov	lr, r3
 80066b6:	4770      	bx	lr

080066b8 <_fini>:
 80066b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ba:	bf00      	nop
 80066bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066be:	bc08      	pop	{r3}
 80066c0:	469e      	mov	lr, r3
 80066c2:	4770      	bx	lr
