
LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006430  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  080066c8  080066c8  000166c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080067bc  080067bc  000167bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080067c4  080067c4  000167c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080067c8  080067c8  000167c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000020  24000000  080067cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000610  24000020  080067ec  00020020  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000630  080067ec  00020630  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 10 .debug_info   000183d6  00000000  00000000  0002004e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002b78  00000000  00000000  00038424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001148  00000000  00000000  0003afa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001050  00000000  00000000  0003c0e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00036a0f  00000000  00000000  0003d138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000167cd  00000000  00000000  00073b47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00158dbb  00000000  00000000  0008a314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001e30cf  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004964  00000000  00000000  001e3120  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000020 	.word	0x24000020
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080066b0 	.word	0x080066b0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000024 	.word	0x24000024
 80002d4:	080066b0 	.word	0x080066b0

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 80005e6:	4a38      	ldr	r2, [pc, #224]	; (80006c8 <HD44780_Init+0xec>)
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 80005ec:	4b37      	ldr	r3, [pc, #220]	; (80006cc <HD44780_Init+0xf0>)
 80005ee:	2208      	movs	r2, #8
 80005f0:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80005f2:	4b37      	ldr	r3, [pc, #220]	; (80006d0 <HD44780_Init+0xf4>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 80005f8:	4b33      	ldr	r3, [pc, #204]	; (80006c8 <HD44780_Init+0xec>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d907      	bls.n	8000610 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000600:	4b33      	ldr	r3, [pc, #204]	; (80006d0 <HD44780_Init+0xf4>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	f043 0308 	orr.w	r3, r3, #8
 8000608:	b2da      	uxtb	r2, r3
 800060a:	4b31      	ldr	r3, [pc, #196]	; (80006d0 <HD44780_Init+0xf4>)
 800060c:	701a      	strb	r2, [r3, #0]
 800060e:	e006      	b.n	800061e <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000610:	4b2f      	ldr	r3, [pc, #188]	; (80006d0 <HD44780_Init+0xf4>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	f043 0304 	orr.w	r3, r3, #4
 8000618:	b2da      	uxtb	r2, r3
 800061a:	4b2d      	ldr	r3, [pc, #180]	; (80006d0 <HD44780_Init+0xf4>)
 800061c:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 800061e:	f000 fa13 	bl	8000a48 <DelayInit>
  HAL_Delay(50);
 8000622:	2032      	movs	r0, #50	; 0x32
 8000624:	f001 f896 	bl	8001754 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000628:	4b28      	ldr	r3, [pc, #160]	; (80006cc <HD44780_Init+0xf0>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	4618      	mov	r0, r3
 800062e:	f000 f9d1 	bl	80009d4 <ExpanderWrite>
  HAL_Delay(1000);
 8000632:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000636:	f001 f88d 	bl	8001754 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 800063a:	2030      	movs	r0, #48	; 0x30
 800063c:	f000 f9b9 	bl	80009b2 <Write4Bits>
  DelayUS(4500);
 8000640:	f241 1094 	movw	r0, #4500	; 0x1194
 8000644:	f000 fa2a 	bl	8000a9c <DelayUS>

  Write4Bits(0x03 << 4);
 8000648:	2030      	movs	r0, #48	; 0x30
 800064a:	f000 f9b2 	bl	80009b2 <Write4Bits>
  DelayUS(4500);
 800064e:	f241 1094 	movw	r0, #4500	; 0x1194
 8000652:	f000 fa23 	bl	8000a9c <DelayUS>

  Write4Bits(0x03 << 4);
 8000656:	2030      	movs	r0, #48	; 0x30
 8000658:	f000 f9ab 	bl	80009b2 <Write4Bits>
  DelayUS(4500);
 800065c:	f241 1094 	movw	r0, #4500	; 0x1194
 8000660:	f000 fa1c 	bl	8000a9c <DelayUS>

  Write4Bits(0x02 << 4);
 8000664:	2020      	movs	r0, #32
 8000666:	f000 f9a4 	bl	80009b2 <Write4Bits>
  DelayUS(100);
 800066a:	2064      	movs	r0, #100	; 0x64
 800066c:	f000 fa16 	bl	8000a9c <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000670:	4b17      	ldr	r3, [pc, #92]	; (80006d0 <HD44780_Init+0xf4>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	f043 0320 	orr.w	r3, r3, #32
 8000678:	b2db      	uxtb	r3, r3
 800067a:	4618      	mov	r0, r3
 800067c:	f000 f95c 	bl	8000938 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000680:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <HD44780_Init+0xf8>)
 8000682:	2204      	movs	r2, #4
 8000684:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8000686:	f000 f88b 	bl	80007a0 <HD44780_Display>
  HD44780_Clear();
 800068a:	f000 f82b 	bl	80006e4 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800068e:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <HD44780_Init+0xfc>)
 8000690:	2202      	movs	r2, #2
 8000692:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000694:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <HD44780_Init+0xfc>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	f043 0304 	orr.w	r3, r3, #4
 800069c:	b2db      	uxtb	r3, r3
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 f94a 	bl	8000938 <SendCommand>
  DelayUS(4500);
 80006a4:	f241 1094 	movw	r0, #4500	; 0x1194
 80006a8:	f000 f9f8 	bl	8000a9c <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 80006ac:	490b      	ldr	r1, [pc, #44]	; (80006dc <HD44780_Init+0x100>)
 80006ae:	2000      	movs	r0, #0
 80006b0:	f000 f8eb 	bl	800088a <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 80006b4:	490a      	ldr	r1, [pc, #40]	; (80006e0 <HD44780_Init+0x104>)
 80006b6:	2001      	movs	r0, #1
 80006b8:	f000 f8e7 	bl	800088a <HD44780_CreateSpecialChar>

  HD44780_Home();
 80006bc:	f000 f81d 	bl	80006fa <HD44780_Home>
}
 80006c0:	bf00      	nop
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	2400003f 	.word	0x2400003f
 80006cc:	24000040 	.word	0x24000040
 80006d0:	2400003c 	.word	0x2400003c
 80006d4:	2400003d 	.word	0x2400003d
 80006d8:	2400003e 	.word	0x2400003e
 80006dc:	24000000 	.word	0x24000000
 80006e0:	24000008 	.word	0x24000008

080006e4 <HD44780_Clear>:

void HD44780_Clear()
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 80006e8:	2001      	movs	r0, #1
 80006ea:	f000 f925 	bl	8000938 <SendCommand>
  DelayUS(2000);
 80006ee:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006f2:	f000 f9d3 	bl	8000a9c <DelayUS>
}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}

080006fa <HD44780_Home>:

void HD44780_Home()
{
 80006fa:	b580      	push	{r7, lr}
 80006fc:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 80006fe:	2002      	movs	r0, #2
 8000700:	f000 f91a 	bl	8000938 <SendCommand>
  DelayUS(2000);
 8000704:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000708:	f000 f9c8 	bl	8000a9c <DelayUS>
}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}

08000710 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000710:	b590      	push	{r4, r7, lr}
 8000712:	b087      	sub	sp, #28
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	460a      	mov	r2, r1
 800071a:	71fb      	strb	r3, [r7, #7]
 800071c:	4613      	mov	r3, r2
 800071e:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000720:	4b12      	ldr	r3, [pc, #72]	; (800076c <HD44780_SetCursor+0x5c>)
 8000722:	f107 0408 	add.w	r4, r7, #8
 8000726:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000728:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 800072c:	4b10      	ldr	r3, [pc, #64]	; (8000770 <HD44780_SetCursor+0x60>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	79ba      	ldrb	r2, [r7, #6]
 8000732:	429a      	cmp	r2, r3
 8000734:	d303      	bcc.n	800073e <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <HD44780_SetCursor+0x60>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	3b01      	subs	r3, #1
 800073c:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 800073e:	79bb      	ldrb	r3, [r7, #6]
 8000740:	009b      	lsls	r3, r3, #2
 8000742:	3318      	adds	r3, #24
 8000744:	443b      	add	r3, r7
 8000746:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800074a:	b2da      	uxtb	r2, r3
 800074c:	79fb      	ldrb	r3, [r7, #7]
 800074e:	4413      	add	r3, r2
 8000750:	b2db      	uxtb	r3, r3
 8000752:	b25b      	sxtb	r3, r3
 8000754:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000758:	b25b      	sxtb	r3, r3
 800075a:	b2db      	uxtb	r3, r3
 800075c:	4618      	mov	r0, r3
 800075e:	f000 f8eb 	bl	8000938 <SendCommand>
}
 8000762:	bf00      	nop
 8000764:	371c      	adds	r7, #28
 8000766:	46bd      	mov	sp, r7
 8000768:	bd90      	pop	{r4, r7, pc}
 800076a:	bf00      	nop
 800076c:	080066c8 	.word	0x080066c8
 8000770:	2400003f 	.word	0x2400003f

08000774 <HD44780_NoDisplay>:

void HD44780_NoDisplay()
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  dpControl &= ~LCD_DISPLAYON;
 8000778:	4b08      	ldr	r3, [pc, #32]	; (800079c <HD44780_NoDisplay+0x28>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	f023 0304 	bic.w	r3, r3, #4
 8000780:	b2da      	uxtb	r2, r3
 8000782:	4b06      	ldr	r3, [pc, #24]	; (800079c <HD44780_NoDisplay+0x28>)
 8000784:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000786:	4b05      	ldr	r3, [pc, #20]	; (800079c <HD44780_NoDisplay+0x28>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	f043 0308 	orr.w	r3, r3, #8
 800078e:	b2db      	uxtb	r3, r3
 8000790:	4618      	mov	r0, r3
 8000792:	f000 f8d1 	bl	8000938 <SendCommand>
}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	2400003d 	.word	0x2400003d

080007a0 <HD44780_Display>:

void HD44780_Display()
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 80007a4:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <HD44780_Display+0x28>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	f043 0304 	orr.w	r3, r3, #4
 80007ac:	b2da      	uxtb	r2, r3
 80007ae:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <HD44780_Display+0x28>)
 80007b0:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80007b2:	4b05      	ldr	r3, [pc, #20]	; (80007c8 <HD44780_Display+0x28>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	f043 0308 	orr.w	r3, r3, #8
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 f8bb 	bl	8000938 <SendCommand>
}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	2400003d 	.word	0x2400003d

080007cc <HD44780_NoCursor>:

void HD44780_NoCursor()
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  dpControl &= ~LCD_CURSORON;
 80007d0:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <HD44780_NoCursor+0x28>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	f023 0302 	bic.w	r3, r3, #2
 80007d8:	b2da      	uxtb	r2, r3
 80007da:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <HD44780_NoCursor+0x28>)
 80007dc:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80007de:	4b05      	ldr	r3, [pc, #20]	; (80007f4 <HD44780_NoCursor+0x28>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	f043 0308 	orr.w	r3, r3, #8
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	4618      	mov	r0, r3
 80007ea:	f000 f8a5 	bl	8000938 <SendCommand>
}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	2400003d 	.word	0x2400003d

080007f8 <HD44780_Cursor>:

void HD44780_Cursor()
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  dpControl |= LCD_CURSORON;
 80007fc:	4b08      	ldr	r3, [pc, #32]	; (8000820 <HD44780_Cursor+0x28>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	f043 0302 	orr.w	r3, r3, #2
 8000804:	b2da      	uxtb	r2, r3
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <HD44780_Cursor+0x28>)
 8000808:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800080a:	4b05      	ldr	r3, [pc, #20]	; (8000820 <HD44780_Cursor+0x28>)
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	f043 0308 	orr.w	r3, r3, #8
 8000812:	b2db      	uxtb	r3, r3
 8000814:	4618      	mov	r0, r3
 8000816:	f000 f88f 	bl	8000938 <SendCommand>
}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	2400003d 	.word	0x2400003d

08000824 <HD44780_NoBlink>:

void HD44780_NoBlink()
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  dpControl &= ~LCD_BLINKON;
 8000828:	4b08      	ldr	r3, [pc, #32]	; (800084c <HD44780_NoBlink+0x28>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	f023 0301 	bic.w	r3, r3, #1
 8000830:	b2da      	uxtb	r2, r3
 8000832:	4b06      	ldr	r3, [pc, #24]	; (800084c <HD44780_NoBlink+0x28>)
 8000834:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000836:	4b05      	ldr	r3, [pc, #20]	; (800084c <HD44780_NoBlink+0x28>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	f043 0308 	orr.w	r3, r3, #8
 800083e:	b2db      	uxtb	r3, r3
 8000840:	4618      	mov	r0, r3
 8000842:	f000 f879 	bl	8000938 <SendCommand>
}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	2400003d 	.word	0x2400003d

08000850 <HD44780_Blink>:

void HD44780_Blink()
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  dpControl |= LCD_BLINKON;
 8000854:	4b08      	ldr	r3, [pc, #32]	; (8000878 <HD44780_Blink+0x28>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	b2da      	uxtb	r2, r3
 800085e:	4b06      	ldr	r3, [pc, #24]	; (8000878 <HD44780_Blink+0x28>)
 8000860:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000862:	4b05      	ldr	r3, [pc, #20]	; (8000878 <HD44780_Blink+0x28>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	f043 0308 	orr.w	r3, r3, #8
 800086a:	b2db      	uxtb	r3, r3
 800086c:	4618      	mov	r0, r3
 800086e:	f000 f863 	bl	8000938 <SendCommand>
}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	2400003d 	.word	0x2400003d

0800087c <HD44780_ScrollDisplayLeft>:

void HD44780_ScrollDisplayLeft(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  SendCommand(LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVELEFT);
 8000880:	2018      	movs	r0, #24
 8000882:	f000 f859 	bl	8000938 <SendCommand>
}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}

0800088a <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 800088a:	b580      	push	{r7, lr}
 800088c:	b084      	sub	sp, #16
 800088e:	af00      	add	r7, sp, #0
 8000890:	4603      	mov	r3, r0
 8000892:	6039      	str	r1, [r7, #0]
 8000894:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	f003 0307 	and.w	r3, r3, #7
 800089c:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	00db      	lsls	r3, r3, #3
 80008a2:	b25b      	sxtb	r3, r3
 80008a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008a8:	b25b      	sxtb	r3, r3
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	4618      	mov	r0, r3
 80008ae:	f000 f843 	bl	8000938 <SendCommand>
  for (int i=0; i<8; i++)
 80008b2:	2300      	movs	r3, #0
 80008b4:	60fb      	str	r3, [r7, #12]
 80008b6:	e009      	b.n	80008cc <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	683a      	ldr	r2, [r7, #0]
 80008bc:	4413      	add	r3, r2
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	4618      	mov	r0, r3
 80008c2:	f000 f847 	bl	8000954 <SendChar>
  for (int i=0; i<8; i++)
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	3301      	adds	r3, #1
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	2b07      	cmp	r3, #7
 80008d0:	ddf2      	ble.n	80008b8 <HD44780_CreateSpecialChar+0x2e>
  }
}
 80008d2:	bf00      	nop
 80008d4:	bf00      	nop
 80008d6:	3710      	adds	r7, #16
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}

080008dc <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 80008e4:	e006      	b.n	80008f4 <HD44780_PrintStr+0x18>
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	1c5a      	adds	r2, r3, #1
 80008ea:	607a      	str	r2, [r7, #4]
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 f830 	bl	8000954 <SendChar>
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d1f4      	bne.n	80008e6 <HD44780_PrintStr+0xa>
}
 80008fc:	bf00      	nop
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
	...

08000908 <HD44780_NoBacklight>:
  if(new_val) HD44780_Backlight();
  else HD44780_NoBacklight();
}

void HD44780_NoBacklight(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  dpBacklight=LCD_NOBACKLIGHT;
 800090c:	4b03      	ldr	r3, [pc, #12]	; (800091c <HD44780_NoBacklight+0x14>)
 800090e:	2200      	movs	r2, #0
 8000910:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(0);
 8000912:	2000      	movs	r0, #0
 8000914:	f000 f85e 	bl	80009d4 <ExpanderWrite>
}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}
 800091c:	24000040 	.word	0x24000040

08000920 <HD44780_Backlight>:

void HD44780_Backlight(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  dpBacklight=LCD_BACKLIGHT;
 8000924:	4b03      	ldr	r3, [pc, #12]	; (8000934 <HD44780_Backlight+0x14>)
 8000926:	2208      	movs	r2, #8
 8000928:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(0);
 800092a:	2000      	movs	r0, #0
 800092c:	f000 f852 	bl	80009d4 <ExpanderWrite>
}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}
 8000934:	24000040 	.word	0x24000040

08000938 <SendCommand>:

static void SendCommand(uint8_t cmd)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	2100      	movs	r1, #0
 8000946:	4618      	mov	r0, r3
 8000948:	f000 f812 	bl	8000970 <Send>
}
 800094c:	bf00      	nop
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}

08000954 <SendChar>:

static void SendChar(uint8_t ch)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	2101      	movs	r1, #1
 8000962:	4618      	mov	r0, r3
 8000964:	f000 f804 	bl	8000970 <Send>
}
 8000968:	bf00      	nop
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}

08000970 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	460a      	mov	r2, r1
 800097a:	71fb      	strb	r3, [r7, #7]
 800097c:	4613      	mov	r3, r2
 800097e:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8000980:	79fb      	ldrb	r3, [r7, #7]
 8000982:	f023 030f 	bic.w	r3, r3, #15
 8000986:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	011b      	lsls	r3, r3, #4
 800098c:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 800098e:	7bfa      	ldrb	r2, [r7, #15]
 8000990:	79bb      	ldrb	r3, [r7, #6]
 8000992:	4313      	orrs	r3, r2
 8000994:	b2db      	uxtb	r3, r3
 8000996:	4618      	mov	r0, r3
 8000998:	f000 f80b 	bl	80009b2 <Write4Bits>
  Write4Bits((lownib)|mode);
 800099c:	7bba      	ldrb	r2, [r7, #14]
 800099e:	79bb      	ldrb	r3, [r7, #6]
 80009a0:	4313      	orrs	r3, r2
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	4618      	mov	r0, r3
 80009a6:	f000 f804 	bl	80009b2 <Write4Bits>
}
 80009aa:	bf00      	nop
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 80009b2:	b580      	push	{r7, lr}
 80009b4:	b082      	sub	sp, #8
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	4603      	mov	r3, r0
 80009ba:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 80009bc:	79fb      	ldrb	r3, [r7, #7]
 80009be:	4618      	mov	r0, r3
 80009c0:	f000 f808 	bl	80009d4 <ExpanderWrite>
  PulseEnable(value);
 80009c4:	79fb      	ldrb	r3, [r7, #7]
 80009c6:	4618      	mov	r0, r3
 80009c8:	f000 f820 	bl	8000a0c <PulseEnable>
}
 80009cc:	bf00      	nop
 80009ce:	3708      	adds	r7, #8
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b086      	sub	sp, #24
 80009d8:	af02      	add	r7, sp, #8
 80009da:	4603      	mov	r3, r0
 80009dc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 80009de:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <ExpanderWrite+0x30>)
 80009e0:	781a      	ldrb	r2, [r3, #0]
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	4313      	orrs	r3, r2
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 80009ea:	f107 020f 	add.w	r2, r7, #15
 80009ee:	230a      	movs	r3, #10
 80009f0:	9300      	str	r3, [sp, #0]
 80009f2:	2301      	movs	r3, #1
 80009f4:	214e      	movs	r1, #78	; 0x4e
 80009f6:	4804      	ldr	r0, [pc, #16]	; (8000a08 <ExpanderWrite+0x34>)
 80009f8:	f001 fa1a 	bl	8001e30 <HAL_I2C_Master_Transmit>
}
 80009fc:	bf00      	nop
 80009fe:	3710      	adds	r7, #16
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	24000040 	.word	0x24000040
 8000a08:	24000044 	.word	0x24000044

08000a0c <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8000a16:	79fb      	ldrb	r3, [r7, #7]
 8000a18:	f043 0304 	orr.w	r3, r3, #4
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff ffd8 	bl	80009d4 <ExpanderWrite>
  DelayUS(20);
 8000a24:	2014      	movs	r0, #20
 8000a26:	f000 f839 	bl	8000a9c <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	f023 0304 	bic.w	r3, r3, #4
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	4618      	mov	r0, r3
 8000a34:	f7ff ffce 	bl	80009d4 <ExpanderWrite>
  DelayUS(20);
 8000a38:	2014      	movs	r0, #20
 8000a3a:	f000 f82f 	bl	8000a9c <DelayUS>
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
	...

08000a48 <DelayInit>:

static void DelayInit(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000a4c:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <DelayInit+0x4c>)
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	4a10      	ldr	r2, [pc, #64]	; (8000a94 <DelayInit+0x4c>)
 8000a52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000a56:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8000a58:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <DelayInit+0x4c>)
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	4a0d      	ldr	r2, [pc, #52]	; (8000a94 <DelayInit+0x4c>)
 8000a5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a62:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <DelayInit+0x50>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a0b      	ldr	r2, [pc, #44]	; (8000a98 <DelayInit+0x50>)
 8000a6a:	f023 0301 	bic.w	r3, r3, #1
 8000a6e:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000a70:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <DelayInit+0x50>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a08      	ldr	r2, [pc, #32]	; (8000a98 <DelayInit+0x50>)
 8000a76:	f043 0301 	orr.w	r3, r3, #1
 8000a7a:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <DelayInit+0x50>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8000a82:	bf00      	nop
  __ASM volatile ("NOP");
 8000a84:	bf00      	nop
  __ASM volatile ("NOP");
 8000a86:	bf00      	nop
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	e000edf0 	.word	0xe000edf0
 8000a98:	e0001000 	.word	0xe0001000

08000a9c <DelayUS>:

static void DelayUS(uint32_t us) {
 8000a9c:	b480      	push	{r7}
 8000a9e:	b087      	sub	sp, #28
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000aa4:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <DelayUS+0x44>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a0e      	ldr	r2, [pc, #56]	; (8000ae4 <DelayUS+0x48>)
 8000aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8000aae:	0c9a      	lsrs	r2, r3, #18
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	fb02 f303 	mul.w	r3, r2, r3
 8000ab6:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000ab8:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <DelayUS+0x4c>)
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8000abe:	4b0a      	ldr	r3, [pc, #40]	; (8000ae8 <DelayUS+0x4c>)
 8000ac0:	685a      	ldr	r2, [r3, #4]
 8000ac2:	693b      	ldr	r3, [r7, #16]
 8000ac4:	1ad3      	subs	r3, r2, r3
 8000ac6:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	697a      	ldr	r2, [r7, #20]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d8f6      	bhi.n	8000abe <DelayUS+0x22>
}
 8000ad0:	bf00      	nop
 8000ad2:	bf00      	nop
 8000ad4:	371c      	adds	r7, #28
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	24000010 	.word	0x24000010
 8000ae4:	431bde83 	.word	0x431bde83
 8000ae8:	e0001000 	.word	0xe0001000

08000aec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000af2:	f000 fd9d 	bl	8001630 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000af6:	f000 f8c3 	bl	8000c80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000afa:	f000 f9ff 	bl	8000efc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000afe:	f000 f97f 	bl	8000e00 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000b02:	f000 f9c9 	bl	8000e98 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8000b06:	f000 f93b 	bl	8000d80 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HD44780_Init(2);
 8000b0a:	2002      	movs	r0, #2
 8000b0c:	f7ff fd66 	bl	80005dc <HD44780_Init>
    HD44780_Clear();
 8000b10:	f7ff fde8 	bl	80006e4 <HD44780_Clear>
    HD44780_SetCursor(0,0);
 8000b14:	2100      	movs	r1, #0
 8000b16:	2000      	movs	r0, #0
 8000b18:	f7ff fdfa 	bl	8000710 <HD44780_SetCursor>
    //HD44780_PrintStr("Welcome to V2X");
    HD44780_PrintStr("We love JP");
 8000b1c:	484f      	ldr	r0, [pc, #316]	; (8000c5c <main+0x170>)
 8000b1e:	f7ff fedd 	bl	80008dc <HD44780_PrintStr>
    HD44780_SetCursor(0,1);
 8000b22:	2101      	movs	r1, #1
 8000b24:	2000      	movs	r0, #0
 8000b26:	f7ff fdf3 	bl	8000710 <HD44780_SetCursor>
    HD44780_PrintStr("By: Team 2");
 8000b2a:	484d      	ldr	r0, [pc, #308]	; (8000c60 <main+0x174>)
 8000b2c:	f7ff fed6 	bl	80008dc <HD44780_PrintStr>
    HD44780_SetCursor(84,18);
 8000b30:	2112      	movs	r1, #18
 8000b32:	2054      	movs	r0, #84	; 0x54
 8000b34:	f7ff fdec 	bl	8000710 <HD44780_SetCursor>
    HD44780_PrintStr("Version 1.0");
 8000b38:	484a      	ldr	r0, [pc, #296]	; (8000c64 <main+0x178>)
 8000b3a:	f7ff fecf 	bl	80008dc <HD44780_PrintStr>
    HD44780_SetCursor(20,24);
 8000b3e:	2118      	movs	r1, #24
 8000b40:	2014      	movs	r0, #20
 8000b42:	f7ff fde5 	bl	8000710 <HD44780_SetCursor>
    HD44780_PrintStr("Press Button 1");
 8000b46:	4848      	ldr	r0, [pc, #288]	; (8000c68 <main+0x17c>)
 8000b48:	f7ff fec8 	bl	80008dc <HD44780_PrintStr>
    HAL_Delay(2000);
 8000b4c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b50:	f000 fe00 	bl	8001754 <HAL_Delay>

    HD44780_Clear();
 8000b54:	f7ff fdc6 	bl	80006e4 <HD44780_Clear>
    HD44780_SetCursor(0,0);
 8000b58:	2100      	movs	r1, #0
 8000b5a:	2000      	movs	r0, #0
 8000b5c:	f7ff fdd8 	bl	8000710 <HD44780_SetCursor>
    HD44780_PrintStr("Oil Temperature");
 8000b60:	4842      	ldr	r0, [pc, #264]	; (8000c6c <main+0x180>)
 8000b62:	f7ff febb 	bl	80008dc <HD44780_PrintStr>
    HD44780_SetCursor(0,1);
 8000b66:	2101      	movs	r1, #1
 8000b68:	2000      	movs	r0, #0
 8000b6a:	f7ff fdd1 	bl	8000710 <HD44780_SetCursor>
    HD44780_PrintStr("Coolant Temperature");
 8000b6e:	4840      	ldr	r0, [pc, #256]	; (8000c70 <main+0x184>)
 8000b70:	f7ff feb4 	bl	80008dc <HD44780_PrintStr>
    HD44780_SetCursor(84,18);
 8000b74:	2112      	movs	r1, #18
 8000b76:	2054      	movs	r0, #84	; 0x54
 8000b78:	f7ff fdca 	bl	8000710 <HD44780_SetCursor>
    HD44780_PrintStr("Tire Pressure");
 8000b7c:	483d      	ldr	r0, [pc, #244]	; (8000c74 <main+0x188>)
 8000b7e:	f7ff fead 	bl	80008dc <HD44780_PrintStr>
    HD44780_SetCursor(20,24);
 8000b82:	2118      	movs	r1, #24
 8000b84:	2014      	movs	r0, #20
 8000b86:	f7ff fdc3 	bl	8000710 <HD44780_SetCursor>
    HD44780_PrintStr("RSU Alerts");
 8000b8a:	483b      	ldr	r0, [pc, #236]	; (8000c78 <main+0x18c>)
 8000b8c:	f7ff fea6 	bl	80008dc <HD44780_PrintStr>
    HAL_Delay(20000);
 8000b90:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000b94:	f000 fdde 	bl	8001754 <HAL_Delay>
    HD44780_NoBacklight();
 8000b98:	f7ff feb6 	bl	8000908 <HD44780_NoBacklight>
    HAL_Delay(2000);
 8000b9c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ba0:	f000 fdd8 	bl	8001754 <HAL_Delay>
    HD44780_Backlight();
 8000ba4:	f7ff febc 	bl	8000920 <HD44780_Backlight>

    HAL_Delay(2000);
 8000ba8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000bac:	f000 fdd2 	bl	8001754 <HAL_Delay>
    HD44780_Cursor();
 8000bb0:	f7ff fe22 	bl	80007f8 <HD44780_Cursor>
    HAL_Delay(2000);
 8000bb4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000bb8:	f000 fdcc 	bl	8001754 <HAL_Delay>
    HD44780_Blink();
 8000bbc:	f7ff fe48 	bl	8000850 <HD44780_Blink>
    HAL_Delay(5000);
 8000bc0:	f241 3088 	movw	r0, #5000	; 0x1388
 8000bc4:	f000 fdc6 	bl	8001754 <HAL_Delay>
    HD44780_NoBlink();
 8000bc8:	f7ff fe2c 	bl	8000824 <HD44780_NoBlink>
    HAL_Delay(2000);
 8000bcc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000bd0:	f000 fdc0 	bl	8001754 <HAL_Delay>
    HD44780_NoCursor();
 8000bd4:	f7ff fdfa 	bl	80007cc <HD44780_NoCursor>
    HAL_Delay(2000);
 8000bd8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000bdc:	f000 fdba 	bl	8001754 <HAL_Delay>

    HD44780_NoDisplay();
 8000be0:	f7ff fdc8 	bl	8000774 <HD44780_NoDisplay>
    HAL_Delay(2000);
 8000be4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000be8:	f000 fdb4 	bl	8001754 <HAL_Delay>
    HD44780_Display();
 8000bec:	f7ff fdd8 	bl	80007a0 <HD44780_Display>

    HD44780_Clear();
 8000bf0:	f7ff fd78 	bl	80006e4 <HD44780_Clear>
    HD44780_SetCursor(0,0);
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	2000      	movs	r0, #0
 8000bf8:	f7ff fd8a 	bl	8000710 <HD44780_SetCursor>
    HD44780_PrintStr("Charlie Nguyen");
 8000bfc:	481f      	ldr	r0, [pc, #124]	; (8000c7c <main+0x190>)
 8000bfe:	f7ff fe6d 	bl	80008dc <HD44780_PrintStr>
    int x;
    for(int x=0; x<20; x=x+1)
 8000c02:	2300      	movs	r3, #0
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	e008      	b.n	8000c1a <main+0x12e>
    {
      HD44780_ScrollDisplayLeft();  //HD44780_ScrollDisplayRight();
 8000c08:	f7ff fe38 	bl	800087c <HD44780_ScrollDisplayLeft>
      HAL_Delay(500);
 8000c0c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c10:	f000 fda0 	bl	8001754 <HAL_Delay>
    for(int x=0; x<20; x=x+1)
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	3301      	adds	r3, #1
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	2b13      	cmp	r3, #19
 8000c1e:	ddf3      	ble.n	8000c08 <main+0x11c>
    }

    char snum[5];
    for ( int x = 1; x <= 200 ; x++ )
 8000c20:	2301      	movs	r3, #1
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	e016      	b.n	8000c54 <main+0x168>
    {
      itoa(x, snum, 10);
 8000c26:	463b      	mov	r3, r7
 8000c28:	220a      	movs	r2, #10
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	68b8      	ldr	r0, [r7, #8]
 8000c2e:	f005 fcf3 	bl	8006618 <itoa>
      HD44780_Clear();
 8000c32:	f7ff fd57 	bl	80006e4 <HD44780_Clear>
      HD44780_SetCursor(0,0);
 8000c36:	2100      	movs	r1, #0
 8000c38:	2000      	movs	r0, #0
 8000c3a:	f7ff fd69 	bl	8000710 <HD44780_SetCursor>
      HD44780_PrintStr(snum);
 8000c3e:	463b      	mov	r3, r7
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff fe4b 	bl	80008dc <HD44780_PrintStr>
      HAL_Delay (1000);
 8000c46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c4a:	f000 fd83 	bl	8001754 <HAL_Delay>
    for ( int x = 1; x <= 200 ; x++ )
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	3301      	adds	r3, #1
 8000c52:	60bb      	str	r3, [r7, #8]
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	2bc8      	cmp	r3, #200	; 0xc8
 8000c58:	dde5      	ble.n	8000c26 <main+0x13a>
    }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c5a:	e7fe      	b.n	8000c5a <main+0x16e>
 8000c5c:	080066d8 	.word	0x080066d8
 8000c60:	080066e4 	.word	0x080066e4
 8000c64:	080066f0 	.word	0x080066f0
 8000c68:	080066fc 	.word	0x080066fc
 8000c6c:	0800670c 	.word	0x0800670c
 8000c70:	0800671c 	.word	0x0800671c
 8000c74:	08006730 	.word	0x08006730
 8000c78:	08006740 	.word	0x08006740
 8000c7c:	0800674c 	.word	0x0800674c

08000c80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b09c      	sub	sp, #112	; 0x70
 8000c84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c8a:	224c      	movs	r2, #76	; 0x4c
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f005 fcc4 	bl	800661c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	2220      	movs	r2, #32
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f005 fcbe 	bl	800661c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ca0:	2002      	movs	r0, #2
 8000ca2:	f001 fd97 	bl	80027d4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	603b      	str	r3, [r7, #0]
 8000caa:	4b33      	ldr	r3, [pc, #204]	; (8000d78 <SystemClock_Config+0xf8>)
 8000cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cae:	4a32      	ldr	r2, [pc, #200]	; (8000d78 <SystemClock_Config+0xf8>)
 8000cb0:	f023 0301 	bic.w	r3, r3, #1
 8000cb4:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000cb6:	4b30      	ldr	r3, [pc, #192]	; (8000d78 <SystemClock_Config+0xf8>)
 8000cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	603b      	str	r3, [r7, #0]
 8000cc0:	4b2e      	ldr	r3, [pc, #184]	; (8000d7c <SystemClock_Config+0xfc>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000cc8:	4a2c      	ldr	r2, [pc, #176]	; (8000d7c <SystemClock_Config+0xfc>)
 8000cca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cce:	6193      	str	r3, [r2, #24]
 8000cd0:	4b2a      	ldr	r3, [pc, #168]	; (8000d7c <SystemClock_Config+0xfc>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cd8:	603b      	str	r3, [r7, #0]
 8000cda:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000cdc:	bf00      	nop
 8000cde:	4b27      	ldr	r3, [pc, #156]	; (8000d7c <SystemClock_Config+0xfc>)
 8000ce0:	699b      	ldr	r3, [r3, #24]
 8000ce2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ce6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cea:	d1f8      	bne.n	8000cde <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000cec:	2303      	movs	r3, #3
 8000cee:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000cf0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000cf4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cfa:	2340      	movs	r3, #64	; 0x40
 8000cfc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d02:	2302      	movs	r3, #2
 8000d04:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d06:	2301      	movs	r3, #1
 8000d08:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000d0a:	2318      	movs	r3, #24
 8000d0c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d12:	2304      	movs	r3, #4
 8000d14:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d16:	2302      	movs	r3, #2
 8000d18:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d1a:	230c      	movs	r3, #12
 8000d1c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d22:	2300      	movs	r3, #0
 8000d24:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f001 fd9c 	bl	8002868 <HAL_RCC_OscConfig>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000d36:	f000 fa39 	bl	80011ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d3a:	233f      	movs	r3, #63	; 0x3f
 8000d3c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d42:	2300      	movs	r3, #0
 8000d44:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000d46:	2300      	movs	r3, #0
 8000d48:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000d56:	2300      	movs	r3, #0
 8000d58:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	2101      	movs	r1, #1
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f002 f9b0 	bl	80030c4 <HAL_RCC_ClockConfig>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000d6a:	f000 fa1f 	bl	80011ac <Error_Handler>
  }
}
 8000d6e:	bf00      	nop
 8000d70:	3770      	adds	r7, #112	; 0x70
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	58000400 	.word	0x58000400
 8000d7c:	58024800 	.word	0x58024800

08000d80 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d84:	4b1b      	ldr	r3, [pc, #108]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000d86:	4a1c      	ldr	r2, [pc, #112]	; (8000df8 <MX_I2C1_Init+0x78>)
 8000d88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8000d8a:	4b1a      	ldr	r3, [pc, #104]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000d8c:	4a1b      	ldr	r2, [pc, #108]	; (8000dfc <MX_I2C1_Init+0x7c>)
 8000d8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d90:	4b18      	ldr	r3, [pc, #96]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d96:	4b17      	ldr	r3, [pc, #92]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d9c:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000da2:	4b14      	ldr	r3, [pc, #80]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000da8:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dae:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000db4:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dba:	480e      	ldr	r0, [pc, #56]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000dbc:	f000 ffa8 	bl	8001d10 <HAL_I2C_Init>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000dc6:	f000 f9f1 	bl	80011ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4809      	ldr	r0, [pc, #36]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000dce:	f001 fb21 	bl	8002414 <HAL_I2CEx_ConfigAnalogFilter>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000dd8:	f000 f9e8 	bl	80011ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4805      	ldr	r0, [pc, #20]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000de0:	f001 fb63 	bl	80024aa <HAL_I2CEx_ConfigDigitalFilter>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000dea:	f000 f9df 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	24000044 	.word	0x24000044
 8000df8:	40005400 	.word	0x40005400
 8000dfc:	10707dbc 	.word	0x10707dbc

08000e00 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e04:	4b22      	ldr	r3, [pc, #136]	; (8000e90 <MX_USART3_UART_Init+0x90>)
 8000e06:	4a23      	ldr	r2, [pc, #140]	; (8000e94 <MX_USART3_UART_Init+0x94>)
 8000e08:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e0a:	4b21      	ldr	r3, [pc, #132]	; (8000e90 <MX_USART3_UART_Init+0x90>)
 8000e0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e10:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e12:	4b1f      	ldr	r3, [pc, #124]	; (8000e90 <MX_USART3_UART_Init+0x90>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e18:	4b1d      	ldr	r3, [pc, #116]	; (8000e90 <MX_USART3_UART_Init+0x90>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e1e:	4b1c      	ldr	r3, [pc, #112]	; (8000e90 <MX_USART3_UART_Init+0x90>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e24:	4b1a      	ldr	r3, [pc, #104]	; (8000e90 <MX_USART3_UART_Init+0x90>)
 8000e26:	220c      	movs	r2, #12
 8000e28:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e2a:	4b19      	ldr	r3, [pc, #100]	; (8000e90 <MX_USART3_UART_Init+0x90>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e30:	4b17      	ldr	r3, [pc, #92]	; (8000e90 <MX_USART3_UART_Init+0x90>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e36:	4b16      	ldr	r3, [pc, #88]	; (8000e90 <MX_USART3_UART_Init+0x90>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e3c:	4b14      	ldr	r3, [pc, #80]	; (8000e90 <MX_USART3_UART_Init+0x90>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e42:	4b13      	ldr	r3, [pc, #76]	; (8000e90 <MX_USART3_UART_Init+0x90>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e48:	4811      	ldr	r0, [pc, #68]	; (8000e90 <MX_USART3_UART_Init+0x90>)
 8000e4a:	f004 f82f 	bl	8004eac <HAL_UART_Init>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000e54:	f000 f9aa 	bl	80011ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e58:	2100      	movs	r1, #0
 8000e5a:	480d      	ldr	r0, [pc, #52]	; (8000e90 <MX_USART3_UART_Init+0x90>)
 8000e5c:	f004 ffcc 	bl	8005df8 <HAL_UARTEx_SetTxFifoThreshold>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000e66:	f000 f9a1 	bl	80011ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	4808      	ldr	r0, [pc, #32]	; (8000e90 <MX_USART3_UART_Init+0x90>)
 8000e6e:	f005 f801 	bl	8005e74 <HAL_UARTEx_SetRxFifoThreshold>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000e78:	f000 f998 	bl	80011ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000e7c:	4804      	ldr	r0, [pc, #16]	; (8000e90 <MX_USART3_UART_Init+0x90>)
 8000e7e:	f004 ff82 	bl	8005d86 <HAL_UARTEx_DisableFifoMode>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000e88:	f000 f990 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e8c:	bf00      	nop
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	24000090 	.word	0x24000090
 8000e94:	40004800 	.word	0x40004800

08000e98 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000e9c:	4b15      	ldr	r3, [pc, #84]	; (8000ef4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e9e:	4a16      	ldr	r2, [pc, #88]	; (8000ef8 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000ea0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000ea2:	4b14      	ldr	r3, [pc, #80]	; (8000ef4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ea4:	2209      	movs	r2, #9
 8000ea6:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000ea8:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000eaa:	2202      	movs	r2, #2
 8000eac:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000eae:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000eb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000eb6:	2202      	movs	r2, #2
 8000eb8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000eba:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ebc:	2204      	movs	r2, #4
 8000ebe:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ec6:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000ecc:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ece:	2204      	movs	r2, #4
 8000ed0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000ed2:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ed4:	2204      	movs	r2, #4
 8000ed6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000ede:	4805      	ldr	r0, [pc, #20]	; (8000ef4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ee0:	f001 fb2f 	bl	8002542 <HAL_PCD_Init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000eea:	f000 f95f 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	24000120 	.word	0x24000120
 8000ef8:	40080000 	.word	0x40080000

08000efc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08c      	sub	sp, #48	; 0x30
 8000f00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f02:	f107 031c 	add.w	r3, r7, #28
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
 8000f0e:	60da      	str	r2, [r3, #12]
 8000f10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f12:	4b9f      	ldr	r3, [pc, #636]	; (8001190 <MX_GPIO_Init+0x294>)
 8000f14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f18:	4a9d      	ldr	r2, [pc, #628]	; (8001190 <MX_GPIO_Init+0x294>)
 8000f1a:	f043 0304 	orr.w	r3, r3, #4
 8000f1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f22:	4b9b      	ldr	r3, [pc, #620]	; (8001190 <MX_GPIO_Init+0x294>)
 8000f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f28:	f003 0304 	and.w	r3, r3, #4
 8000f2c:	61bb      	str	r3, [r7, #24]
 8000f2e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f30:	4b97      	ldr	r3, [pc, #604]	; (8001190 <MX_GPIO_Init+0x294>)
 8000f32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f36:	4a96      	ldr	r2, [pc, #600]	; (8001190 <MX_GPIO_Init+0x294>)
 8000f38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f40:	4b93      	ldr	r3, [pc, #588]	; (8001190 <MX_GPIO_Init+0x294>)
 8000f42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f4a:	617b      	str	r3, [r7, #20]
 8000f4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4e:	4b90      	ldr	r3, [pc, #576]	; (8001190 <MX_GPIO_Init+0x294>)
 8000f50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f54:	4a8e      	ldr	r2, [pc, #568]	; (8001190 <MX_GPIO_Init+0x294>)
 8000f56:	f043 0301 	orr.w	r3, r3, #1
 8000f5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f5e:	4b8c      	ldr	r3, [pc, #560]	; (8001190 <MX_GPIO_Init+0x294>)
 8000f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f64:	f003 0301 	and.w	r3, r3, #1
 8000f68:	613b      	str	r3, [r7, #16]
 8000f6a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6c:	4b88      	ldr	r3, [pc, #544]	; (8001190 <MX_GPIO_Init+0x294>)
 8000f6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f72:	4a87      	ldr	r2, [pc, #540]	; (8001190 <MX_GPIO_Init+0x294>)
 8000f74:	f043 0302 	orr.w	r3, r3, #2
 8000f78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f7c:	4b84      	ldr	r3, [pc, #528]	; (8001190 <MX_GPIO_Init+0x294>)
 8000f7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f82:	f003 0302 	and.w	r3, r3, #2
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f8a:	4b81      	ldr	r3, [pc, #516]	; (8001190 <MX_GPIO_Init+0x294>)
 8000f8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f90:	4a7f      	ldr	r2, [pc, #508]	; (8001190 <MX_GPIO_Init+0x294>)
 8000f92:	f043 0308 	orr.w	r3, r3, #8
 8000f96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f9a:	4b7d      	ldr	r3, [pc, #500]	; (8001190 <MX_GPIO_Init+0x294>)
 8000f9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa0:	f003 0308 	and.w	r3, r3, #8
 8000fa4:	60bb      	str	r3, [r7, #8]
 8000fa6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fa8:	4b79      	ldr	r3, [pc, #484]	; (8001190 <MX_GPIO_Init+0x294>)
 8000faa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fae:	4a78      	ldr	r2, [pc, #480]	; (8001190 <MX_GPIO_Init+0x294>)
 8000fb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fb4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fb8:	4b75      	ldr	r3, [pc, #468]	; (8001190 <MX_GPIO_Init+0x294>)
 8000fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fc6:	4b72      	ldr	r3, [pc, #456]	; (8001190 <MX_GPIO_Init+0x294>)
 8000fc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fcc:	4a70      	ldr	r2, [pc, #448]	; (8001190 <MX_GPIO_Init+0x294>)
 8000fce:	f043 0310 	orr.w	r3, r3, #16
 8000fd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fd6:	4b6e      	ldr	r3, [pc, #440]	; (8001190 <MX_GPIO_Init+0x294>)
 8000fd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fdc:	f003 0310 	and.w	r3, r3, #16
 8000fe0:	603b      	str	r3, [r7, #0]
 8000fe2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	f244 0101 	movw	r1, #16385	; 0x4001
 8000fea:	486a      	ldr	r0, [pc, #424]	; (8001194 <MX_GPIO_Init+0x298>)
 8000fec:	f000 fe76 	bl	8001cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ff6:	4868      	ldr	r0, [pc, #416]	; (8001198 <MX_GPIO_Init+0x29c>)
 8000ff8:	f000 fe70 	bl	8001cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2102      	movs	r1, #2
 8001000:	4866      	ldr	r0, [pc, #408]	; (800119c <MX_GPIO_Init+0x2a0>)
 8001002:	f000 fe6b 	bl	8001cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin button_1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|button_1_Pin;
 8001006:	f242 0301 	movw	r3, #8193	; 0x2001
 800100a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800100c:	2300      	movs	r3, #0
 800100e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001014:	f107 031c 	add.w	r3, r7, #28
 8001018:	4619      	mov	r1, r3
 800101a:	4861      	ldr	r0, [pc, #388]	; (80011a0 <MX_GPIO_Init+0x2a4>)
 800101c:	f000 fcae 	bl	800197c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001020:	2332      	movs	r3, #50	; 0x32
 8001022:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001024:	2302      	movs	r3, #2
 8001026:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102c:	2300      	movs	r3, #0
 800102e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001030:	230b      	movs	r3, #11
 8001032:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001034:	f107 031c 	add.w	r3, r7, #28
 8001038:	4619      	mov	r1, r3
 800103a:	4859      	ldr	r0, [pc, #356]	; (80011a0 <MX_GPIO_Init+0x2a4>)
 800103c:	f000 fc9e 	bl	800197c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001040:	2302      	movs	r3, #2
 8001042:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001044:	2302      	movs	r3, #2
 8001046:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104c:	2300      	movs	r3, #0
 800104e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001050:	2308      	movs	r3, #8
 8001052:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001054:	f107 031c 	add.w	r3, r7, #28
 8001058:	4619      	mov	r1, r3
 800105a:	4852      	ldr	r0, [pc, #328]	; (80011a4 <MX_GPIO_Init+0x2a8>)
 800105c:	f000 fc8e 	bl	800197c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001060:	2304      	movs	r3, #4
 8001062:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001064:	2302      	movs	r3, #2
 8001066:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106c:	2300      	movs	r3, #0
 800106e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001070:	2307      	movs	r3, #7
 8001072:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001074:	f107 031c 	add.w	r3, r7, #28
 8001078:	4619      	mov	r1, r3
 800107a:	484a      	ldr	r0, [pc, #296]	; (80011a4 <MX_GPIO_Init+0x2a8>)
 800107c:	f000 fc7e 	bl	800197c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001080:	2380      	movs	r3, #128	; 0x80
 8001082:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001084:	2302      	movs	r3, #2
 8001086:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108c:	2300      	movs	r3, #0
 800108e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001090:	230b      	movs	r3, #11
 8001092:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001094:	f107 031c 	add.w	r3, r7, #28
 8001098:	4619      	mov	r1, r3
 800109a:	4842      	ldr	r0, [pc, #264]	; (80011a4 <MX_GPIO_Init+0x2a8>)
 800109c:	f000 fc6e 	bl	800197c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80010a0:	f244 0301 	movw	r3, #16385	; 0x4001
 80010a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a6:	2301      	movs	r3, #1
 80010a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ae:	2300      	movs	r3, #0
 80010b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b2:	f107 031c 	add.w	r3, r7, #28
 80010b6:	4619      	mov	r1, r3
 80010b8:	4836      	ldr	r0, [pc, #216]	; (8001194 <MX_GPIO_Init+0x298>)
 80010ba:	f000 fc5f 	bl	800197c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80010be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c4:	2302      	movs	r3, #2
 80010c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010cc:	2300      	movs	r3, #0
 80010ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010d0:	230b      	movs	r3, #11
 80010d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d4:	f107 031c 	add.w	r3, r7, #28
 80010d8:	4619      	mov	r1, r3
 80010da:	482e      	ldr	r0, [pc, #184]	; (8001194 <MX_GPIO_Init+0x298>)
 80010dc:	f000 fc4e 	bl	800197c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80010e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e6:	2301      	movs	r3, #1
 80010e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ee:	2300      	movs	r3, #0
 80010f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80010f2:	f107 031c 	add.w	r3, r7, #28
 80010f6:	4619      	mov	r1, r3
 80010f8:	4827      	ldr	r0, [pc, #156]	; (8001198 <MX_GPIO_Init+0x29c>)
 80010fa:	f000 fc3f 	bl	800197c <HAL_GPIO_Init>

  /*Configure GPIO pins : button_3_Pin button_4_Pin */
  GPIO_InitStruct.Pin = button_3_Pin|button_4_Pin;
 80010fe:	230c      	movs	r3, #12
 8001100:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001102:	2300      	movs	r3, #0
 8001104:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800110a:	f107 031c 	add.w	r3, r7, #28
 800110e:	4619      	mov	r1, r3
 8001110:	4825      	ldr	r0, [pc, #148]	; (80011a8 <MX_GPIO_Init+0x2ac>)
 8001112:	f000 fc33 	bl	800197c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8001116:	2380      	movs	r3, #128	; 0x80
 8001118:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800111a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800111e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001124:	f107 031c 	add.w	r3, r7, #28
 8001128:	4619      	mov	r1, r3
 800112a:	481f      	ldr	r0, [pc, #124]	; (80011a8 <MX_GPIO_Init+0x2ac>)
 800112c:	f000 fc26 	bl	800197c <HAL_GPIO_Init>

  /*Configure GPIO pin : button_2_Pin */
  GPIO_InitStruct.Pin = button_2_Pin;
 8001130:	2308      	movs	r3, #8
 8001132:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001134:	2300      	movs	r3, #0
 8001136:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(button_2_GPIO_Port, &GPIO_InitStruct);
 800113c:	f107 031c 	add.w	r3, r7, #28
 8001140:	4619      	mov	r1, r3
 8001142:	4815      	ldr	r0, [pc, #84]	; (8001198 <MX_GPIO_Init+0x29c>)
 8001144:	f000 fc1a 	bl	800197c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001148:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800114c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114e:	2302      	movs	r3, #2
 8001150:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001156:	2300      	movs	r3, #0
 8001158:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800115a:	230b      	movs	r3, #11
 800115c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800115e:	f107 031c 	add.w	r3, r7, #28
 8001162:	4619      	mov	r1, r3
 8001164:	4810      	ldr	r0, [pc, #64]	; (80011a8 <MX_GPIO_Init+0x2ac>)
 8001166:	f000 fc09 	bl	800197c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800116a:	2302      	movs	r3, #2
 800116c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116e:	2301      	movs	r3, #1
 8001170:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001176:	2300      	movs	r3, #0
 8001178:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800117a:	f107 031c 	add.w	r3, r7, #28
 800117e:	4619      	mov	r1, r3
 8001180:	4806      	ldr	r0, [pc, #24]	; (800119c <MX_GPIO_Init+0x2a0>)
 8001182:	f000 fbfb 	bl	800197c <HAL_GPIO_Init>

}
 8001186:	bf00      	nop
 8001188:	3730      	adds	r7, #48	; 0x30
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	58024400 	.word	0x58024400
 8001194:	58020400 	.word	0x58020400
 8001198:	58020c00 	.word	0x58020c00
 800119c:	58021000 	.word	0x58021000
 80011a0:	58020800 	.word	0x58020800
 80011a4:	58020000 	.word	0x58020000
 80011a8:	58021800 	.word	0x58021800

080011ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011b0:	b672      	cpsid	i
}
 80011b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011b4:	e7fe      	b.n	80011b4 <Error_Handler+0x8>
	...

080011b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011be:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <HAL_MspInit+0x30>)
 80011c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011c4:	4a08      	ldr	r2, [pc, #32]	; (80011e8 <HAL_MspInit+0x30>)
 80011c6:	f043 0302 	orr.w	r3, r3, #2
 80011ca:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <HAL_MspInit+0x30>)
 80011d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011d4:	f003 0302 	and.w	r3, r3, #2
 80011d8:	607b      	str	r3, [r7, #4]
 80011da:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	58024400 	.word	0x58024400

080011ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b0b8      	sub	sp, #224	; 0xe0
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
 8001202:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001204:	f107 0310 	add.w	r3, r7, #16
 8001208:	22bc      	movs	r2, #188	; 0xbc
 800120a:	2100      	movs	r1, #0
 800120c:	4618      	mov	r0, r3
 800120e:	f005 fa05 	bl	800661c <memset>
  if(hi2c->Instance==I2C1)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a25      	ldr	r2, [pc, #148]	; (80012ac <HAL_I2C_MspInit+0xc0>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d142      	bne.n	80012a2 <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800121c:	2308      	movs	r3, #8
 800121e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001220:	2300      	movs	r3, #0
 8001222:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001226:	f107 0310 	add.w	r3, r7, #16
 800122a:	4618      	mov	r0, r3
 800122c:	f002 fad6 	bl	80037dc <HAL_RCCEx_PeriphCLKConfig>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001236:	f7ff ffb9 	bl	80011ac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800123a:	4b1d      	ldr	r3, [pc, #116]	; (80012b0 <HAL_I2C_MspInit+0xc4>)
 800123c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001240:	4a1b      	ldr	r2, [pc, #108]	; (80012b0 <HAL_I2C_MspInit+0xc4>)
 8001242:	f043 0302 	orr.w	r3, r3, #2
 8001246:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800124a:	4b19      	ldr	r3, [pc, #100]	; (80012b0 <HAL_I2C_MspInit+0xc4>)
 800124c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001250:	f003 0302 	and.w	r3, r3, #2
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001258:	f44f 7340 	mov.w	r3, #768	; 0x300
 800125c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001260:	2312      	movs	r3, #18
 8001262:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126c:	2300      	movs	r3, #0
 800126e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001272:	2304      	movs	r3, #4
 8001274:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001278:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800127c:	4619      	mov	r1, r3
 800127e:	480d      	ldr	r0, [pc, #52]	; (80012b4 <HAL_I2C_MspInit+0xc8>)
 8001280:	f000 fb7c 	bl	800197c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001284:	4b0a      	ldr	r3, [pc, #40]	; (80012b0 <HAL_I2C_MspInit+0xc4>)
 8001286:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800128a:	4a09      	ldr	r2, [pc, #36]	; (80012b0 <HAL_I2C_MspInit+0xc4>)
 800128c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001290:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001294:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <HAL_I2C_MspInit+0xc4>)
 8001296:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800129a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012a2:	bf00      	nop
 80012a4:	37e0      	adds	r7, #224	; 0xe0
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40005400 	.word	0x40005400
 80012b0:	58024400 	.word	0x58024400
 80012b4:	58020400 	.word	0x58020400

080012b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b0b8      	sub	sp, #224	; 0xe0
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012d0:	f107 0310 	add.w	r3, r7, #16
 80012d4:	22bc      	movs	r2, #188	; 0xbc
 80012d6:	2100      	movs	r1, #0
 80012d8:	4618      	mov	r0, r3
 80012da:	f005 f99f 	bl	800661c <memset>
  if(huart->Instance==USART3)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a25      	ldr	r2, [pc, #148]	; (8001378 <HAL_UART_MspInit+0xc0>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d142      	bne.n	800136e <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80012e8:	2302      	movs	r3, #2
 80012ea:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80012ec:	2300      	movs	r3, #0
 80012ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012f2:	f107 0310 	add.w	r3, r7, #16
 80012f6:	4618      	mov	r0, r3
 80012f8:	f002 fa70 	bl	80037dc <HAL_RCCEx_PeriphCLKConfig>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001302:	f7ff ff53 	bl	80011ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001306:	4b1d      	ldr	r3, [pc, #116]	; (800137c <HAL_UART_MspInit+0xc4>)
 8001308:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800130c:	4a1b      	ldr	r2, [pc, #108]	; (800137c <HAL_UART_MspInit+0xc4>)
 800130e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001312:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001316:	4b19      	ldr	r3, [pc, #100]	; (800137c <HAL_UART_MspInit+0xc4>)
 8001318:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800131c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001324:	4b15      	ldr	r3, [pc, #84]	; (800137c <HAL_UART_MspInit+0xc4>)
 8001326:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800132a:	4a14      	ldr	r2, [pc, #80]	; (800137c <HAL_UART_MspInit+0xc4>)
 800132c:	f043 0308 	orr.w	r3, r3, #8
 8001330:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001334:	4b11      	ldr	r3, [pc, #68]	; (800137c <HAL_UART_MspInit+0xc4>)
 8001336:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800133a:	f003 0308 	and.w	r3, r3, #8
 800133e:	60bb      	str	r3, [r7, #8]
 8001340:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001342:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001346:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134a:	2302      	movs	r3, #2
 800134c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001356:	2300      	movs	r3, #0
 8001358:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800135c:	2307      	movs	r3, #7
 800135e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001362:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001366:	4619      	mov	r1, r3
 8001368:	4805      	ldr	r0, [pc, #20]	; (8001380 <HAL_UART_MspInit+0xc8>)
 800136a:	f000 fb07 	bl	800197c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800136e:	bf00      	nop
 8001370:	37e0      	adds	r7, #224	; 0xe0
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40004800 	.word	0x40004800
 800137c:	58024400 	.word	0x58024400
 8001380:	58020c00 	.word	0x58020c00

08001384 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b0b8      	sub	sp, #224	; 0xe0
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	60da      	str	r2, [r3, #12]
 800139a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800139c:	f107 0310 	add.w	r3, r7, #16
 80013a0:	22bc      	movs	r2, #188	; 0xbc
 80013a2:	2100      	movs	r1, #0
 80013a4:	4618      	mov	r0, r3
 80013a6:	f005 f939 	bl	800661c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a2f      	ldr	r2, [pc, #188]	; (800146c <HAL_PCD_MspInit+0xe8>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d156      	bne.n	8001462 <HAL_PCD_MspInit+0xde>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80013b4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80013b8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80013ba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80013be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013c2:	f107 0310 	add.w	r3, r7, #16
 80013c6:	4618      	mov	r0, r3
 80013c8:	f002 fa08 	bl	80037dc <HAL_RCCEx_PeriphCLKConfig>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 80013d2:	f7ff feeb 	bl	80011ac <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80013d6:	f001 fa37 	bl	8002848 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013da:	4b25      	ldr	r3, [pc, #148]	; (8001470 <HAL_PCD_MspInit+0xec>)
 80013dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013e0:	4a23      	ldr	r2, [pc, #140]	; (8001470 <HAL_PCD_MspInit+0xec>)
 80013e2:	f043 0301 	orr.w	r3, r3, #1
 80013e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013ea:	4b21      	ldr	r3, [pc, #132]	; (8001470 <HAL_PCD_MspInit+0xec>)
 80013ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013f0:	f003 0301 	and.w	r3, r3, #1
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80013f8:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80013fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001400:	2302      	movs	r3, #2
 8001402:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140c:	2300      	movs	r3, #0
 800140e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001412:	230a      	movs	r3, #10
 8001414:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001418:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800141c:	4619      	mov	r1, r3
 800141e:	4815      	ldr	r0, [pc, #84]	; (8001474 <HAL_PCD_MspInit+0xf0>)
 8001420:	f000 faac 	bl	800197c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001424:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001428:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800142c:	2300      	movs	r3, #0
 800142e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001438:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800143c:	4619      	mov	r1, r3
 800143e:	480d      	ldr	r0, [pc, #52]	; (8001474 <HAL_PCD_MspInit+0xf0>)
 8001440:	f000 fa9c 	bl	800197c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001444:	4b0a      	ldr	r3, [pc, #40]	; (8001470 <HAL_PCD_MspInit+0xec>)
 8001446:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800144a:	4a09      	ldr	r2, [pc, #36]	; (8001470 <HAL_PCD_MspInit+0xec>)
 800144c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001450:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001454:	4b06      	ldr	r3, [pc, #24]	; (8001470 <HAL_PCD_MspInit+0xec>)
 8001456:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800145a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001462:	bf00      	nop
 8001464:	37e0      	adds	r7, #224	; 0xe0
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40080000 	.word	0x40080000
 8001470:	58024400 	.word	0x58024400
 8001474:	58020000 	.word	0x58020000

08001478 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800147c:	e7fe      	b.n	800147c <NMI_Handler+0x4>

0800147e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001482:	e7fe      	b.n	8001482 <HardFault_Handler+0x4>

08001484 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001488:	e7fe      	b.n	8001488 <MemManage_Handler+0x4>

0800148a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800148e:	e7fe      	b.n	800148e <BusFault_Handler+0x4>

08001490 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001494:	e7fe      	b.n	8001494 <UsageFault_Handler+0x4>

08001496 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr

080014b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014b2:	b480      	push	{r7}
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014c4:	f000 f926 	bl	8001714 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014c8:	bf00      	nop
 80014ca:	bd80      	pop	{r7, pc}

080014cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80014d0:	4b37      	ldr	r3, [pc, #220]	; (80015b0 <SystemInit+0xe4>)
 80014d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014d6:	4a36      	ldr	r2, [pc, #216]	; (80015b0 <SystemInit+0xe4>)
 80014d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014e0:	4b34      	ldr	r3, [pc, #208]	; (80015b4 <SystemInit+0xe8>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 030f 	and.w	r3, r3, #15
 80014e8:	2b06      	cmp	r3, #6
 80014ea:	d807      	bhi.n	80014fc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014ec:	4b31      	ldr	r3, [pc, #196]	; (80015b4 <SystemInit+0xe8>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f023 030f 	bic.w	r3, r3, #15
 80014f4:	4a2f      	ldr	r2, [pc, #188]	; (80015b4 <SystemInit+0xe8>)
 80014f6:	f043 0307 	orr.w	r3, r3, #7
 80014fa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80014fc:	4b2e      	ldr	r3, [pc, #184]	; (80015b8 <SystemInit+0xec>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a2d      	ldr	r2, [pc, #180]	; (80015b8 <SystemInit+0xec>)
 8001502:	f043 0301 	orr.w	r3, r3, #1
 8001506:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001508:	4b2b      	ldr	r3, [pc, #172]	; (80015b8 <SystemInit+0xec>)
 800150a:	2200      	movs	r2, #0
 800150c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800150e:	4b2a      	ldr	r3, [pc, #168]	; (80015b8 <SystemInit+0xec>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	4929      	ldr	r1, [pc, #164]	; (80015b8 <SystemInit+0xec>)
 8001514:	4b29      	ldr	r3, [pc, #164]	; (80015bc <SystemInit+0xf0>)
 8001516:	4013      	ands	r3, r2
 8001518:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800151a:	4b26      	ldr	r3, [pc, #152]	; (80015b4 <SystemInit+0xe8>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0308 	and.w	r3, r3, #8
 8001522:	2b00      	cmp	r3, #0
 8001524:	d007      	beq.n	8001536 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001526:	4b23      	ldr	r3, [pc, #140]	; (80015b4 <SystemInit+0xe8>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f023 030f 	bic.w	r3, r3, #15
 800152e:	4a21      	ldr	r2, [pc, #132]	; (80015b4 <SystemInit+0xe8>)
 8001530:	f043 0307 	orr.w	r3, r3, #7
 8001534:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001536:	4b20      	ldr	r3, [pc, #128]	; (80015b8 <SystemInit+0xec>)
 8001538:	2200      	movs	r2, #0
 800153a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800153c:	4b1e      	ldr	r3, [pc, #120]	; (80015b8 <SystemInit+0xec>)
 800153e:	2200      	movs	r2, #0
 8001540:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001542:	4b1d      	ldr	r3, [pc, #116]	; (80015b8 <SystemInit+0xec>)
 8001544:	2200      	movs	r2, #0
 8001546:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001548:	4b1b      	ldr	r3, [pc, #108]	; (80015b8 <SystemInit+0xec>)
 800154a:	4a1d      	ldr	r2, [pc, #116]	; (80015c0 <SystemInit+0xf4>)
 800154c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800154e:	4b1a      	ldr	r3, [pc, #104]	; (80015b8 <SystemInit+0xec>)
 8001550:	4a1c      	ldr	r2, [pc, #112]	; (80015c4 <SystemInit+0xf8>)
 8001552:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001554:	4b18      	ldr	r3, [pc, #96]	; (80015b8 <SystemInit+0xec>)
 8001556:	4a1c      	ldr	r2, [pc, #112]	; (80015c8 <SystemInit+0xfc>)
 8001558:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800155a:	4b17      	ldr	r3, [pc, #92]	; (80015b8 <SystemInit+0xec>)
 800155c:	2200      	movs	r2, #0
 800155e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001560:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <SystemInit+0xec>)
 8001562:	4a19      	ldr	r2, [pc, #100]	; (80015c8 <SystemInit+0xfc>)
 8001564:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001566:	4b14      	ldr	r3, [pc, #80]	; (80015b8 <SystemInit+0xec>)
 8001568:	2200      	movs	r2, #0
 800156a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800156c:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <SystemInit+0xec>)
 800156e:	4a16      	ldr	r2, [pc, #88]	; (80015c8 <SystemInit+0xfc>)
 8001570:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001572:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <SystemInit+0xec>)
 8001574:	2200      	movs	r2, #0
 8001576:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001578:	4b0f      	ldr	r3, [pc, #60]	; (80015b8 <SystemInit+0xec>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a0e      	ldr	r2, [pc, #56]	; (80015b8 <SystemInit+0xec>)
 800157e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001582:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001584:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <SystemInit+0xec>)
 8001586:	2200      	movs	r2, #0
 8001588:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800158a:	4b10      	ldr	r3, [pc, #64]	; (80015cc <SystemInit+0x100>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	4b10      	ldr	r3, [pc, #64]	; (80015d0 <SystemInit+0x104>)
 8001590:	4013      	ands	r3, r2
 8001592:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001596:	d202      	bcs.n	800159e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001598:	4b0e      	ldr	r3, [pc, #56]	; (80015d4 <SystemInit+0x108>)
 800159a:	2201      	movs	r2, #1
 800159c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800159e:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <SystemInit+0x10c>)
 80015a0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80015a4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80015a6:	bf00      	nop
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	e000ed00 	.word	0xe000ed00
 80015b4:	52002000 	.word	0x52002000
 80015b8:	58024400 	.word	0x58024400
 80015bc:	eaf6ed7f 	.word	0xeaf6ed7f
 80015c0:	02020200 	.word	0x02020200
 80015c4:	01ff0000 	.word	0x01ff0000
 80015c8:	01010280 	.word	0x01010280
 80015cc:	5c001000 	.word	0x5c001000
 80015d0:	ffff0000 	.word	0xffff0000
 80015d4:	51008108 	.word	0x51008108
 80015d8:	52004000 	.word	0x52004000

080015dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80015dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001614 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80015e0:	f7ff ff74 	bl	80014cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015e4:	480c      	ldr	r0, [pc, #48]	; (8001618 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015e6:	490d      	ldr	r1, [pc, #52]	; (800161c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015e8:	4a0d      	ldr	r2, [pc, #52]	; (8001620 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015ec:	e002      	b.n	80015f4 <LoopCopyDataInit>

080015ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015f2:	3304      	adds	r3, #4

080015f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015f8:	d3f9      	bcc.n	80015ee <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015fa:	4a0a      	ldr	r2, [pc, #40]	; (8001624 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015fc:	4c0a      	ldr	r4, [pc, #40]	; (8001628 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001600:	e001      	b.n	8001606 <LoopFillZerobss>

08001602 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001602:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001604:	3204      	adds	r2, #4

08001606 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001606:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001608:	d3fb      	bcc.n	8001602 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800160a:	f004 ffc9 	bl	80065a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800160e:	f7ff fa6d 	bl	8000aec <main>
  bx  lr
 8001612:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001614:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001618:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800161c:	24000020 	.word	0x24000020
  ldr r2, =_sidata
 8001620:	080067cc 	.word	0x080067cc
  ldr r2, =_sbss
 8001624:	24000020 	.word	0x24000020
  ldr r4, =_ebss
 8001628:	24000630 	.word	0x24000630

0800162c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800162c:	e7fe      	b.n	800162c <ADC3_IRQHandler>
	...

08001630 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001636:	2003      	movs	r0, #3
 8001638:	f000 f96e 	bl	8001918 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800163c:	f001 fef8 	bl	8003430 <HAL_RCC_GetSysClockFreq>
 8001640:	4602      	mov	r2, r0
 8001642:	4b15      	ldr	r3, [pc, #84]	; (8001698 <HAL_Init+0x68>)
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	0a1b      	lsrs	r3, r3, #8
 8001648:	f003 030f 	and.w	r3, r3, #15
 800164c:	4913      	ldr	r1, [pc, #76]	; (800169c <HAL_Init+0x6c>)
 800164e:	5ccb      	ldrb	r3, [r1, r3]
 8001650:	f003 031f 	and.w	r3, r3, #31
 8001654:	fa22 f303 	lsr.w	r3, r2, r3
 8001658:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800165a:	4b0f      	ldr	r3, [pc, #60]	; (8001698 <HAL_Init+0x68>)
 800165c:	699b      	ldr	r3, [r3, #24]
 800165e:	f003 030f 	and.w	r3, r3, #15
 8001662:	4a0e      	ldr	r2, [pc, #56]	; (800169c <HAL_Init+0x6c>)
 8001664:	5cd3      	ldrb	r3, [r2, r3]
 8001666:	f003 031f 	and.w	r3, r3, #31
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	fa22 f303 	lsr.w	r3, r2, r3
 8001670:	4a0b      	ldr	r2, [pc, #44]	; (80016a0 <HAL_Init+0x70>)
 8001672:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001674:	4a0b      	ldr	r2, [pc, #44]	; (80016a4 <HAL_Init+0x74>)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800167a:	2000      	movs	r0, #0
 800167c:	f000 f814 	bl	80016a8 <HAL_InitTick>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e002      	b.n	8001690 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800168a:	f7ff fd95 	bl	80011b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800168e:	2300      	movs	r3, #0
}
 8001690:	4618      	mov	r0, r3
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	58024400 	.word	0x58024400
 800169c:	0800675c 	.word	0x0800675c
 80016a0:	24000014 	.word	0x24000014
 80016a4:	24000010 	.word	0x24000010

080016a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80016b0:	4b15      	ldr	r3, [pc, #84]	; (8001708 <HAL_InitTick+0x60>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d101      	bne.n	80016bc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e021      	b.n	8001700 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80016bc:	4b13      	ldr	r3, [pc, #76]	; (800170c <HAL_InitTick+0x64>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	4b11      	ldr	r3, [pc, #68]	; (8001708 <HAL_InitTick+0x60>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	4619      	mov	r1, r3
 80016c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d2:	4618      	mov	r0, r3
 80016d4:	f000 f945 	bl	8001962 <HAL_SYSTICK_Config>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e00e      	b.n	8001700 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2b0f      	cmp	r3, #15
 80016e6:	d80a      	bhi.n	80016fe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016e8:	2200      	movs	r2, #0
 80016ea:	6879      	ldr	r1, [r7, #4]
 80016ec:	f04f 30ff 	mov.w	r0, #4294967295
 80016f0:	f000 f91d 	bl	800192e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016f4:	4a06      	ldr	r2, [pc, #24]	; (8001710 <HAL_InitTick+0x68>)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016fa:	2300      	movs	r3, #0
 80016fc:	e000      	b.n	8001700 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
}
 8001700:	4618      	mov	r0, r3
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	2400001c 	.word	0x2400001c
 800170c:	24000010 	.word	0x24000010
 8001710:	24000018 	.word	0x24000018

08001714 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001718:	4b06      	ldr	r3, [pc, #24]	; (8001734 <HAL_IncTick+0x20>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	461a      	mov	r2, r3
 800171e:	4b06      	ldr	r3, [pc, #24]	; (8001738 <HAL_IncTick+0x24>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4413      	add	r3, r2
 8001724:	4a04      	ldr	r2, [pc, #16]	; (8001738 <HAL_IncTick+0x24>)
 8001726:	6013      	str	r3, [r2, #0]
}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	2400001c 	.word	0x2400001c
 8001738:	2400062c 	.word	0x2400062c

0800173c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  return uwTick;
 8001740:	4b03      	ldr	r3, [pc, #12]	; (8001750 <HAL_GetTick+0x14>)
 8001742:	681b      	ldr	r3, [r3, #0]
}
 8001744:	4618      	mov	r0, r3
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	2400062c 	.word	0x2400062c

08001754 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800175c:	f7ff ffee 	bl	800173c <HAL_GetTick>
 8001760:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800176c:	d005      	beq.n	800177a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800176e:	4b0a      	ldr	r3, [pc, #40]	; (8001798 <HAL_Delay+0x44>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	461a      	mov	r2, r3
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	4413      	add	r3, r2
 8001778:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800177a:	bf00      	nop
 800177c:	f7ff ffde 	bl	800173c <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	68fa      	ldr	r2, [r7, #12]
 8001788:	429a      	cmp	r2, r3
 800178a:	d8f7      	bhi.n	800177c <HAL_Delay+0x28>
  {
  }
}
 800178c:	bf00      	nop
 800178e:	bf00      	nop
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	2400001c 	.word	0x2400001c

0800179c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80017a0:	4b03      	ldr	r3, [pc, #12]	; (80017b0 <HAL_GetREVID+0x14>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	0c1b      	lsrs	r3, r3, #16
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	5c001000 	.word	0x5c001000

080017b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f003 0307 	and.w	r3, r3, #7
 80017c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017c4:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <__NVIC_SetPriorityGrouping+0x40>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ca:	68ba      	ldr	r2, [r7, #8]
 80017cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017d0:	4013      	ands	r3, r2
 80017d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017dc:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <__NVIC_SetPriorityGrouping+0x44>)
 80017de:	4313      	orrs	r3, r2
 80017e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017e2:	4a04      	ldr	r2, [pc, #16]	; (80017f4 <__NVIC_SetPriorityGrouping+0x40>)
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	60d3      	str	r3, [r2, #12]
}
 80017e8:	bf00      	nop
 80017ea:	3714      	adds	r7, #20
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	e000ed00 	.word	0xe000ed00
 80017f8:	05fa0000 	.word	0x05fa0000

080017fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001800:	4b04      	ldr	r3, [pc, #16]	; (8001814 <__NVIC_GetPriorityGrouping+0x18>)
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	0a1b      	lsrs	r3, r3, #8
 8001806:	f003 0307 	and.w	r3, r3, #7
}
 800180a:	4618      	mov	r0, r3
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	e000ed00 	.word	0xe000ed00

08001818 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	6039      	str	r1, [r7, #0]
 8001822:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001824:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001828:	2b00      	cmp	r3, #0
 800182a:	db0a      	blt.n	8001842 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	b2da      	uxtb	r2, r3
 8001830:	490c      	ldr	r1, [pc, #48]	; (8001864 <__NVIC_SetPriority+0x4c>)
 8001832:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001836:	0112      	lsls	r2, r2, #4
 8001838:	b2d2      	uxtb	r2, r2
 800183a:	440b      	add	r3, r1
 800183c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001840:	e00a      	b.n	8001858 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	b2da      	uxtb	r2, r3
 8001846:	4908      	ldr	r1, [pc, #32]	; (8001868 <__NVIC_SetPriority+0x50>)
 8001848:	88fb      	ldrh	r3, [r7, #6]
 800184a:	f003 030f 	and.w	r3, r3, #15
 800184e:	3b04      	subs	r3, #4
 8001850:	0112      	lsls	r2, r2, #4
 8001852:	b2d2      	uxtb	r2, r2
 8001854:	440b      	add	r3, r1
 8001856:	761a      	strb	r2, [r3, #24]
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	e000e100 	.word	0xe000e100
 8001868:	e000ed00 	.word	0xe000ed00

0800186c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800186c:	b480      	push	{r7}
 800186e:	b089      	sub	sp, #36	; 0x24
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	f1c3 0307 	rsb	r3, r3, #7
 8001886:	2b04      	cmp	r3, #4
 8001888:	bf28      	it	cs
 800188a:	2304      	movcs	r3, #4
 800188c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	3304      	adds	r3, #4
 8001892:	2b06      	cmp	r3, #6
 8001894:	d902      	bls.n	800189c <NVIC_EncodePriority+0x30>
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	3b03      	subs	r3, #3
 800189a:	e000      	b.n	800189e <NVIC_EncodePriority+0x32>
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a0:	f04f 32ff 	mov.w	r2, #4294967295
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	43da      	mvns	r2, r3
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	401a      	ands	r2, r3
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018b4:	f04f 31ff 	mov.w	r1, #4294967295
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	fa01 f303 	lsl.w	r3, r1, r3
 80018be:	43d9      	mvns	r1, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c4:	4313      	orrs	r3, r2
         );
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3724      	adds	r7, #36	; 0x24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
	...

080018d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3b01      	subs	r3, #1
 80018e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018e4:	d301      	bcc.n	80018ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018e6:	2301      	movs	r3, #1
 80018e8:	e00f      	b.n	800190a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ea:	4a0a      	ldr	r2, [pc, #40]	; (8001914 <SysTick_Config+0x40>)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018f2:	210f      	movs	r1, #15
 80018f4:	f04f 30ff 	mov.w	r0, #4294967295
 80018f8:	f7ff ff8e 	bl	8001818 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018fc:	4b05      	ldr	r3, [pc, #20]	; (8001914 <SysTick_Config+0x40>)
 80018fe:	2200      	movs	r2, #0
 8001900:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001902:	4b04      	ldr	r3, [pc, #16]	; (8001914 <SysTick_Config+0x40>)
 8001904:	2207      	movs	r2, #7
 8001906:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	e000e010 	.word	0xe000e010

08001918 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f7ff ff47 	bl	80017b4 <__NVIC_SetPriorityGrouping>
}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b086      	sub	sp, #24
 8001932:	af00      	add	r7, sp, #0
 8001934:	4603      	mov	r3, r0
 8001936:	60b9      	str	r1, [r7, #8]
 8001938:	607a      	str	r2, [r7, #4]
 800193a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800193c:	f7ff ff5e 	bl	80017fc <__NVIC_GetPriorityGrouping>
 8001940:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	68b9      	ldr	r1, [r7, #8]
 8001946:	6978      	ldr	r0, [r7, #20]
 8001948:	f7ff ff90 	bl	800186c <NVIC_EncodePriority>
 800194c:	4602      	mov	r2, r0
 800194e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001952:	4611      	mov	r1, r2
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff ff5f 	bl	8001818 <__NVIC_SetPriority>
}
 800195a:	bf00      	nop
 800195c:	3718      	adds	r7, #24
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b082      	sub	sp, #8
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7ff ffb2 	bl	80018d4 <SysTick_Config>
 8001970:	4603      	mov	r3, r0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
	...

0800197c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800197c:	b480      	push	{r7}
 800197e:	b089      	sub	sp, #36	; 0x24
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001986:	2300      	movs	r3, #0
 8001988:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800198a:	4b89      	ldr	r3, [pc, #548]	; (8001bb0 <HAL_GPIO_Init+0x234>)
 800198c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800198e:	e194      	b.n	8001cba <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	2101      	movs	r1, #1
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	fa01 f303 	lsl.w	r3, r1, r3
 800199c:	4013      	ands	r3, r2
 800199e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f000 8186 	beq.w	8001cb4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 0303 	and.w	r3, r3, #3
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d005      	beq.n	80019c0 <HAL_GPIO_Init+0x44>
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f003 0303 	and.w	r3, r3, #3
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d130      	bne.n	8001a22 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	2203      	movs	r2, #3
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	43db      	mvns	r3, r3
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	4013      	ands	r3, r2
 80019d6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	68da      	ldr	r2, [r3, #12]
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019f6:	2201      	movs	r2, #1
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	43db      	mvns	r3, r3
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4013      	ands	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	091b      	lsrs	r3, r3, #4
 8001a0c:	f003 0201 	and.w	r2, r3, #1
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f003 0303 	and.w	r3, r3, #3
 8001a2a:	2b03      	cmp	r3, #3
 8001a2c:	d017      	beq.n	8001a5e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	2203      	movs	r2, #3
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	4013      	ands	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	689a      	ldr	r2, [r3, #8]
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f003 0303 	and.w	r3, r3, #3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d123      	bne.n	8001ab2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	08da      	lsrs	r2, r3, #3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	3208      	adds	r2, #8
 8001a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	f003 0307 	and.w	r3, r3, #7
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	220f      	movs	r2, #15
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	43db      	mvns	r3, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	691a      	ldr	r2, [r3, #16]
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	f003 0307 	and.w	r3, r3, #7
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	08da      	lsrs	r2, r3, #3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	3208      	adds	r2, #8
 8001aac:	69b9      	ldr	r1, [r7, #24]
 8001aae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	2203      	movs	r2, #3
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f003 0203 	and.w	r2, r3, #3
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	f000 80e0 	beq.w	8001cb4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001af4:	4b2f      	ldr	r3, [pc, #188]	; (8001bb4 <HAL_GPIO_Init+0x238>)
 8001af6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001afa:	4a2e      	ldr	r2, [pc, #184]	; (8001bb4 <HAL_GPIO_Init+0x238>)
 8001afc:	f043 0302 	orr.w	r3, r3, #2
 8001b00:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001b04:	4b2b      	ldr	r3, [pc, #172]	; (8001bb4 <HAL_GPIO_Init+0x238>)
 8001b06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b12:	4a29      	ldr	r2, [pc, #164]	; (8001bb8 <HAL_GPIO_Init+0x23c>)
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	089b      	lsrs	r3, r3, #2
 8001b18:	3302      	adds	r3, #2
 8001b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	f003 0303 	and.w	r3, r3, #3
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	220f      	movs	r2, #15
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	43db      	mvns	r3, r3
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	4013      	ands	r3, r2
 8001b34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a20      	ldr	r2, [pc, #128]	; (8001bbc <HAL_GPIO_Init+0x240>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d052      	beq.n	8001be4 <HAL_GPIO_Init+0x268>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a1f      	ldr	r2, [pc, #124]	; (8001bc0 <HAL_GPIO_Init+0x244>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d031      	beq.n	8001baa <HAL_GPIO_Init+0x22e>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a1e      	ldr	r2, [pc, #120]	; (8001bc4 <HAL_GPIO_Init+0x248>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d02b      	beq.n	8001ba6 <HAL_GPIO_Init+0x22a>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a1d      	ldr	r2, [pc, #116]	; (8001bc8 <HAL_GPIO_Init+0x24c>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d025      	beq.n	8001ba2 <HAL_GPIO_Init+0x226>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a1c      	ldr	r2, [pc, #112]	; (8001bcc <HAL_GPIO_Init+0x250>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d01f      	beq.n	8001b9e <HAL_GPIO_Init+0x222>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a1b      	ldr	r2, [pc, #108]	; (8001bd0 <HAL_GPIO_Init+0x254>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d019      	beq.n	8001b9a <HAL_GPIO_Init+0x21e>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a1a      	ldr	r2, [pc, #104]	; (8001bd4 <HAL_GPIO_Init+0x258>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d013      	beq.n	8001b96 <HAL_GPIO_Init+0x21a>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a19      	ldr	r2, [pc, #100]	; (8001bd8 <HAL_GPIO_Init+0x25c>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d00d      	beq.n	8001b92 <HAL_GPIO_Init+0x216>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a18      	ldr	r2, [pc, #96]	; (8001bdc <HAL_GPIO_Init+0x260>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d007      	beq.n	8001b8e <HAL_GPIO_Init+0x212>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a17      	ldr	r2, [pc, #92]	; (8001be0 <HAL_GPIO_Init+0x264>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d101      	bne.n	8001b8a <HAL_GPIO_Init+0x20e>
 8001b86:	2309      	movs	r3, #9
 8001b88:	e02d      	b.n	8001be6 <HAL_GPIO_Init+0x26a>
 8001b8a:	230a      	movs	r3, #10
 8001b8c:	e02b      	b.n	8001be6 <HAL_GPIO_Init+0x26a>
 8001b8e:	2308      	movs	r3, #8
 8001b90:	e029      	b.n	8001be6 <HAL_GPIO_Init+0x26a>
 8001b92:	2307      	movs	r3, #7
 8001b94:	e027      	b.n	8001be6 <HAL_GPIO_Init+0x26a>
 8001b96:	2306      	movs	r3, #6
 8001b98:	e025      	b.n	8001be6 <HAL_GPIO_Init+0x26a>
 8001b9a:	2305      	movs	r3, #5
 8001b9c:	e023      	b.n	8001be6 <HAL_GPIO_Init+0x26a>
 8001b9e:	2304      	movs	r3, #4
 8001ba0:	e021      	b.n	8001be6 <HAL_GPIO_Init+0x26a>
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e01f      	b.n	8001be6 <HAL_GPIO_Init+0x26a>
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	e01d      	b.n	8001be6 <HAL_GPIO_Init+0x26a>
 8001baa:	2301      	movs	r3, #1
 8001bac:	e01b      	b.n	8001be6 <HAL_GPIO_Init+0x26a>
 8001bae:	bf00      	nop
 8001bb0:	58000080 	.word	0x58000080
 8001bb4:	58024400 	.word	0x58024400
 8001bb8:	58000400 	.word	0x58000400
 8001bbc:	58020000 	.word	0x58020000
 8001bc0:	58020400 	.word	0x58020400
 8001bc4:	58020800 	.word	0x58020800
 8001bc8:	58020c00 	.word	0x58020c00
 8001bcc:	58021000 	.word	0x58021000
 8001bd0:	58021400 	.word	0x58021400
 8001bd4:	58021800 	.word	0x58021800
 8001bd8:	58021c00 	.word	0x58021c00
 8001bdc:	58022000 	.word	0x58022000
 8001be0:	58022400 	.word	0x58022400
 8001be4:	2300      	movs	r3, #0
 8001be6:	69fa      	ldr	r2, [r7, #28]
 8001be8:	f002 0203 	and.w	r2, r2, #3
 8001bec:	0092      	lsls	r2, r2, #2
 8001bee:	4093      	lsls	r3, r2
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bf6:	4938      	ldr	r1, [pc, #224]	; (8001cd8 <HAL_GPIO_Init+0x35c>)
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	089b      	lsrs	r3, r3, #2
 8001bfc:	3302      	adds	r3, #2
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	4013      	ands	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d003      	beq.n	8001c2a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001c2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001c32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	4013      	ands	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d003      	beq.n	8001c58 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001c58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d003      	beq.n	8001c84 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	43db      	mvns	r3, r3
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4013      	ands	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d003      	beq.n	8001cae <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	f47f ae63 	bne.w	8001990 <HAL_GPIO_Init+0x14>
  }
}
 8001cca:	bf00      	nop
 8001ccc:	bf00      	nop
 8001cce:	3724      	adds	r7, #36	; 0x24
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	58000400 	.word	0x58000400

08001cdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	807b      	strh	r3, [r7, #2]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cec:	787b      	ldrb	r3, [r7, #1]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d003      	beq.n	8001cfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cf2:	887a      	ldrh	r2, [r7, #2]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001cf8:	e003      	b.n	8001d02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001cfa:	887b      	ldrh	r3, [r7, #2]
 8001cfc:	041a      	lsls	r2, r3, #16
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	619a      	str	r2, [r3, #24]
}
 8001d02:	bf00      	nop
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
	...

08001d10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d101      	bne.n	8001d22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e07f      	b.n	8001e22 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d106      	bne.n	8001d3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f7ff fa58 	bl	80011ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2224      	movs	r2, #36	; 0x24
 8001d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f022 0201 	bic.w	r2, r2, #1
 8001d52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685a      	ldr	r2, [r3, #4]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d60:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d70:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d107      	bne.n	8001d8a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	689a      	ldr	r2, [r3, #8]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d86:	609a      	str	r2, [r3, #8]
 8001d88:	e006      	b.n	8001d98 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	689a      	ldr	r2, [r3, #8]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001d96:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d104      	bne.n	8001daa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001da8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	6859      	ldr	r1, [r3, #4]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	4b1d      	ldr	r3, [pc, #116]	; (8001e2c <HAL_I2C_Init+0x11c>)
 8001db6:	430b      	orrs	r3, r1
 8001db8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	68da      	ldr	r2, [r3, #12]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001dc8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	691a      	ldr	r2, [r3, #16]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	695b      	ldr	r3, [r3, #20]
 8001dd2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	430a      	orrs	r2, r1
 8001de2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	69d9      	ldr	r1, [r3, #28]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a1a      	ldr	r2, [r3, #32]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	430a      	orrs	r2, r1
 8001df2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f042 0201 	orr.w	r2, r2, #1
 8001e02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2220      	movs	r2, #32
 8001e0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	02008000 	.word	0x02008000

08001e30 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b088      	sub	sp, #32
 8001e34:	af02      	add	r7, sp, #8
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	607a      	str	r2, [r7, #4]
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	817b      	strh	r3, [r7, #10]
 8001e40:	4613      	mov	r3, r2
 8001e42:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2b20      	cmp	r3, #32
 8001e4e:	f040 80da 	bne.w	8002006 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d101      	bne.n	8001e60 <HAL_I2C_Master_Transmit+0x30>
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	e0d3      	b.n	8002008 <HAL_I2C_Master_Transmit+0x1d8>
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001e68:	f7ff fc68 	bl	800173c <HAL_GetTick>
 8001e6c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	9300      	str	r3, [sp, #0]
 8001e72:	2319      	movs	r3, #25
 8001e74:	2201      	movs	r2, #1
 8001e76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e7a:	68f8      	ldr	r0, [r7, #12]
 8001e7c:	f000 f8f0 	bl	8002060 <I2C_WaitOnFlagUntilTimeout>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e0be      	b.n	8002008 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2221      	movs	r2, #33	; 0x21
 8001e8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2210      	movs	r2, #16
 8001e96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	893a      	ldrh	r2, [r7, #8]
 8001eaa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	2bff      	cmp	r3, #255	; 0xff
 8001eba:	d90e      	bls.n	8001eda <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	22ff      	movs	r2, #255	; 0xff
 8001ec0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ec6:	b2da      	uxtb	r2, r3
 8001ec8:	8979      	ldrh	r1, [r7, #10]
 8001eca:	4b51      	ldr	r3, [pc, #324]	; (8002010 <HAL_I2C_Master_Transmit+0x1e0>)
 8001ecc:	9300      	str	r3, [sp, #0]
 8001ece:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ed2:	68f8      	ldr	r0, [r7, #12]
 8001ed4:	f000 fa6c 	bl	80023b0 <I2C_TransferConfig>
 8001ed8:	e06c      	b.n	8001fb4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	8979      	ldrh	r1, [r7, #10]
 8001eec:	4b48      	ldr	r3, [pc, #288]	; (8002010 <HAL_I2C_Master_Transmit+0x1e0>)
 8001eee:	9300      	str	r3, [sp, #0]
 8001ef0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ef4:	68f8      	ldr	r0, [r7, #12]
 8001ef6:	f000 fa5b 	bl	80023b0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001efa:	e05b      	b.n	8001fb4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001efc:	697a      	ldr	r2, [r7, #20]
 8001efe:	6a39      	ldr	r1, [r7, #32]
 8001f00:	68f8      	ldr	r0, [r7, #12]
 8001f02:	f000 f8ed 	bl	80020e0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e07b      	b.n	8002008 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f14:	781a      	ldrb	r2, [r3, #0]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f20:	1c5a      	adds	r2, r3, #1
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f38:	3b01      	subs	r3, #1
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d034      	beq.n	8001fb4 <HAL_I2C_Master_Transmit+0x184>
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d130      	bne.n	8001fb4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	9300      	str	r3, [sp, #0]
 8001f56:	6a3b      	ldr	r3, [r7, #32]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	2180      	movs	r1, #128	; 0x80
 8001f5c:	68f8      	ldr	r0, [r7, #12]
 8001f5e:	f000 f87f 	bl	8002060 <I2C_WaitOnFlagUntilTimeout>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e04d      	b.n	8002008 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	2bff      	cmp	r3, #255	; 0xff
 8001f74:	d90e      	bls.n	8001f94 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	22ff      	movs	r2, #255	; 0xff
 8001f7a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f80:	b2da      	uxtb	r2, r3
 8001f82:	8979      	ldrh	r1, [r7, #10]
 8001f84:	2300      	movs	r3, #0
 8001f86:	9300      	str	r3, [sp, #0]
 8001f88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f8c:	68f8      	ldr	r0, [r7, #12]
 8001f8e:	f000 fa0f 	bl	80023b0 <I2C_TransferConfig>
 8001f92:	e00f      	b.n	8001fb4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa2:	b2da      	uxtb	r2, r3
 8001fa4:	8979      	ldrh	r1, [r7, #10]
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	9300      	str	r3, [sp, #0]
 8001faa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f000 f9fe 	bl	80023b0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d19e      	bne.n	8001efc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fbe:	697a      	ldr	r2, [r7, #20]
 8001fc0:	6a39      	ldr	r1, [r7, #32]
 8001fc2:	68f8      	ldr	r0, [r7, #12]
 8001fc4:	f000 f8cc 	bl	8002160 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e01a      	b.n	8002008 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2220      	movs	r2, #32
 8001fd8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	6859      	ldr	r1, [r3, #4]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <HAL_I2C_Master_Transmit+0x1e4>)
 8001fe6:	400b      	ands	r3, r1
 8001fe8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2220      	movs	r2, #32
 8001fee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002002:	2300      	movs	r3, #0
 8002004:	e000      	b.n	8002008 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002006:	2302      	movs	r3, #2
  }
}
 8002008:	4618      	mov	r0, r3
 800200a:	3718      	adds	r7, #24
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	80002000 	.word	0x80002000
 8002014:	fe00e800 	.word	0xfe00e800

08002018 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b02      	cmp	r3, #2
 800202c:	d103      	bne.n	8002036 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2200      	movs	r2, #0
 8002034:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	f003 0301 	and.w	r3, r3, #1
 8002040:	2b01      	cmp	r3, #1
 8002042:	d007      	beq.n	8002054 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	699a      	ldr	r2, [r3, #24]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f042 0201 	orr.w	r2, r2, #1
 8002052:	619a      	str	r2, [r3, #24]
  }
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	603b      	str	r3, [r7, #0]
 800206c:	4613      	mov	r3, r2
 800206e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002070:	e022      	b.n	80020b8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002078:	d01e      	beq.n	80020b8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800207a:	f7ff fb5f 	bl	800173c <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	429a      	cmp	r2, r3
 8002088:	d302      	bcc.n	8002090 <I2C_WaitOnFlagUntilTimeout+0x30>
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d113      	bne.n	80020b8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002094:	f043 0220 	orr.w	r2, r3, #32
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2220      	movs	r2, #32
 80020a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e00f      	b.n	80020d8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	699a      	ldr	r2, [r3, #24]
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	4013      	ands	r3, r2
 80020c2:	68ba      	ldr	r2, [r7, #8]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	bf0c      	ite	eq
 80020c8:	2301      	moveq	r3, #1
 80020ca:	2300      	movne	r3, #0
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	461a      	mov	r2, r3
 80020d0:	79fb      	ldrb	r3, [r7, #7]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d0cd      	beq.n	8002072 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80020ec:	e02c      	b.n	8002148 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	68b9      	ldr	r1, [r7, #8]
 80020f2:	68f8      	ldr	r0, [r7, #12]
 80020f4:	f000 f870 	bl	80021d8 <I2C_IsErrorOccurred>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e02a      	b.n	8002158 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002108:	d01e      	beq.n	8002148 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800210a:	f7ff fb17 	bl	800173c <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	68ba      	ldr	r2, [r7, #8]
 8002116:	429a      	cmp	r2, r3
 8002118:	d302      	bcc.n	8002120 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d113      	bne.n	8002148 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002124:	f043 0220 	orr.w	r2, r3, #32
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2220      	movs	r2, #32
 8002130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e007      	b.n	8002158 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b02      	cmp	r3, #2
 8002154:	d1cb      	bne.n	80020ee <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	3710      	adds	r7, #16
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800216c:	e028      	b.n	80021c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	68b9      	ldr	r1, [r7, #8]
 8002172:	68f8      	ldr	r0, [r7, #12]
 8002174:	f000 f830 	bl	80021d8 <I2C_IsErrorOccurred>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e026      	b.n	80021d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002182:	f7ff fadb 	bl	800173c <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	68ba      	ldr	r2, [r7, #8]
 800218e:	429a      	cmp	r2, r3
 8002190:	d302      	bcc.n	8002198 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d113      	bne.n	80021c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219c:	f043 0220 	orr.w	r2, r3, #32
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2220      	movs	r2, #32
 80021a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e007      	b.n	80021d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	699b      	ldr	r3, [r3, #24]
 80021c6:	f003 0320 	and.w	r3, r3, #32
 80021ca:	2b20      	cmp	r3, #32
 80021cc:	d1cf      	bne.n	800216e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80021ce:	2300      	movs	r3, #0
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3710      	adds	r7, #16
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b08a      	sub	sp, #40	; 0x28
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021e4:	2300      	movs	r3, #0
 80021e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80021f2:	2300      	movs	r3, #0
 80021f4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	f003 0310 	and.w	r3, r3, #16
 8002200:	2b00      	cmp	r3, #0
 8002202:	d075      	beq.n	80022f0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2210      	movs	r2, #16
 800220a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800220c:	e056      	b.n	80022bc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002214:	d052      	beq.n	80022bc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002216:	f7ff fa91 	bl	800173c <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	68ba      	ldr	r2, [r7, #8]
 8002222:	429a      	cmp	r2, r3
 8002224:	d302      	bcc.n	800222c <I2C_IsErrorOccurred+0x54>
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d147      	bne.n	80022bc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002236:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800223e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800224a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800224e:	d12e      	bne.n	80022ae <I2C_IsErrorOccurred+0xd6>
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002256:	d02a      	beq.n	80022ae <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002258:	7cfb      	ldrb	r3, [r7, #19]
 800225a:	2b20      	cmp	r3, #32
 800225c:	d027      	beq.n	80022ae <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	685a      	ldr	r2, [r3, #4]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800226c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800226e:	f7ff fa65 	bl	800173c <HAL_GetTick>
 8002272:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002274:	e01b      	b.n	80022ae <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002276:	f7ff fa61 	bl	800173c <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	2b19      	cmp	r3, #25
 8002282:	d914      	bls.n	80022ae <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002288:	f043 0220 	orr.w	r2, r3, #32
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2220      	movs	r2, #32
 8002294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2200      	movs	r2, #0
 800229c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	f003 0320 	and.w	r3, r3, #32
 80022b8:	2b20      	cmp	r3, #32
 80022ba:	d1dc      	bne.n	8002276 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	f003 0320 	and.w	r3, r3, #32
 80022c6:	2b20      	cmp	r3, #32
 80022c8:	d003      	beq.n	80022d2 <I2C_IsErrorOccurred+0xfa>
 80022ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d09d      	beq.n	800220e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80022d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d103      	bne.n	80022e2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2220      	movs	r2, #32
 80022e0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80022e2:	6a3b      	ldr	r3, [r7, #32]
 80022e4:	f043 0304 	orr.w	r3, r3, #4
 80022e8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00b      	beq.n	800231a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002302:	6a3b      	ldr	r3, [r7, #32]
 8002304:	f043 0301 	orr.w	r3, r3, #1
 8002308:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002312:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00b      	beq.n	800233c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002324:	6a3b      	ldr	r3, [r7, #32]
 8002326:	f043 0308 	orr.w	r3, r3, #8
 800232a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002334:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00b      	beq.n	800235e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002346:	6a3b      	ldr	r3, [r7, #32]
 8002348:	f043 0302 	orr.w	r3, r3, #2
 800234c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002356:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800235e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002362:	2b00      	cmp	r3, #0
 8002364:	d01c      	beq.n	80023a0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002366:	68f8      	ldr	r0, [r7, #12]
 8002368:	f7ff fe56 	bl	8002018 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6859      	ldr	r1, [r3, #4]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	4b0d      	ldr	r3, [pc, #52]	; (80023ac <I2C_IsErrorOccurred+0x1d4>)
 8002378:	400b      	ands	r3, r1
 800237a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002380:	6a3b      	ldr	r3, [r7, #32]
 8002382:	431a      	orrs	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2220      	movs	r2, #32
 800238c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80023a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3728      	adds	r7, #40	; 0x28
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	fe00e800 	.word	0xfe00e800

080023b0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b087      	sub	sp, #28
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	607b      	str	r3, [r7, #4]
 80023ba:	460b      	mov	r3, r1
 80023bc:	817b      	strh	r3, [r7, #10]
 80023be:	4613      	mov	r3, r2
 80023c0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80023c2:	897b      	ldrh	r3, [r7, #10]
 80023c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80023c8:	7a7b      	ldrb	r3, [r7, #9]
 80023ca:	041b      	lsls	r3, r3, #16
 80023cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80023d0:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80023d6:	6a3b      	ldr	r3, [r7, #32]
 80023d8:	4313      	orrs	r3, r2
 80023da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023de:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	685a      	ldr	r2, [r3, #4]
 80023e6:	6a3b      	ldr	r3, [r7, #32]
 80023e8:	0d5b      	lsrs	r3, r3, #21
 80023ea:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80023ee:	4b08      	ldr	r3, [pc, #32]	; (8002410 <I2C_TransferConfig+0x60>)
 80023f0:	430b      	orrs	r3, r1
 80023f2:	43db      	mvns	r3, r3
 80023f4:	ea02 0103 	and.w	r1, r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	697a      	ldr	r2, [r7, #20]
 80023fe:	430a      	orrs	r2, r1
 8002400:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002402:	bf00      	nop
 8002404:	371c      	adds	r7, #28
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	03ff63ff 	.word	0x03ff63ff

08002414 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b20      	cmp	r3, #32
 8002428:	d138      	bne.n	800249c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002430:	2b01      	cmp	r3, #1
 8002432:	d101      	bne.n	8002438 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002434:	2302      	movs	r3, #2
 8002436:	e032      	b.n	800249e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2224      	movs	r2, #36	; 0x24
 8002444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f022 0201 	bic.w	r2, r2, #1
 8002456:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002466:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6819      	ldr	r1, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	430a      	orrs	r2, r1
 8002476:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f042 0201 	orr.w	r2, r2, #1
 8002486:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2220      	movs	r2, #32
 800248c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002498:	2300      	movs	r3, #0
 800249a:	e000      	b.n	800249e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800249c:	2302      	movs	r3, #2
  }
}
 800249e:	4618      	mov	r0, r3
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr

080024aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b085      	sub	sp, #20
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
 80024b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	2b20      	cmp	r3, #32
 80024be:	d139      	bne.n	8002534 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d101      	bne.n	80024ce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80024ca:	2302      	movs	r3, #2
 80024cc:	e033      	b.n	8002536 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2201      	movs	r2, #1
 80024d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2224      	movs	r2, #36	; 0x24
 80024da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f022 0201 	bic.w	r2, r2, #1
 80024ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80024fc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	021b      	lsls	r3, r3, #8
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	4313      	orrs	r3, r2
 8002506:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f042 0201 	orr.w	r2, r2, #1
 800251e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2220      	movs	r2, #32
 8002524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002530:	2300      	movs	r3, #0
 8002532:	e000      	b.n	8002536 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002534:	2302      	movs	r3, #2
  }
}
 8002536:	4618      	mov	r0, r3
 8002538:	3714      	adds	r7, #20
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr

08002542 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002542:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002544:	b08f      	sub	sp, #60	; 0x3c
 8002546:	af0a      	add	r7, sp, #40	; 0x28
 8002548:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d101      	bne.n	8002554 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e116      	b.n	8002782 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d106      	bne.n	8002574 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f7fe ff08 	bl	8001384 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2203      	movs	r2, #3
 8002578:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002584:	2b00      	cmp	r3, #0
 8002586:	d102      	bne.n	800258e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4618      	mov	r0, r3
 8002594:	f003 fd68 	bl	8006068 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	603b      	str	r3, [r7, #0]
 800259e:	687e      	ldr	r6, [r7, #4]
 80025a0:	466d      	mov	r5, sp
 80025a2:	f106 0410 	add.w	r4, r6, #16
 80025a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80025b6:	1d33      	adds	r3, r6, #4
 80025b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025ba:	6838      	ldr	r0, [r7, #0]
 80025bc:	f003 fce6 	bl	8005f8c <USB_CoreInit>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d005      	beq.n	80025d2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2202      	movs	r2, #2
 80025ca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e0d7      	b.n	8002782 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2100      	movs	r1, #0
 80025d8:	4618      	mov	r0, r3
 80025da:	f003 fd56 	bl	800608a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025de:	2300      	movs	r3, #0
 80025e0:	73fb      	strb	r3, [r7, #15]
 80025e2:	e04a      	b.n	800267a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80025e4:	7bfa      	ldrb	r2, [r7, #15]
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	4613      	mov	r3, r2
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	4413      	add	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	440b      	add	r3, r1
 80025f2:	333d      	adds	r3, #61	; 0x3d
 80025f4:	2201      	movs	r2, #1
 80025f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80025f8:	7bfa      	ldrb	r2, [r7, #15]
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	4613      	mov	r3, r2
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	4413      	add	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	440b      	add	r3, r1
 8002606:	333c      	adds	r3, #60	; 0x3c
 8002608:	7bfa      	ldrb	r2, [r7, #15]
 800260a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800260c:	7bfa      	ldrb	r2, [r7, #15]
 800260e:	7bfb      	ldrb	r3, [r7, #15]
 8002610:	b298      	uxth	r0, r3
 8002612:	6879      	ldr	r1, [r7, #4]
 8002614:	4613      	mov	r3, r2
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	4413      	add	r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	440b      	add	r3, r1
 800261e:	3344      	adds	r3, #68	; 0x44
 8002620:	4602      	mov	r2, r0
 8002622:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002624:	7bfa      	ldrb	r2, [r7, #15]
 8002626:	6879      	ldr	r1, [r7, #4]
 8002628:	4613      	mov	r3, r2
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	4413      	add	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	440b      	add	r3, r1
 8002632:	3340      	adds	r3, #64	; 0x40
 8002634:	2200      	movs	r2, #0
 8002636:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002638:	7bfa      	ldrb	r2, [r7, #15]
 800263a:	6879      	ldr	r1, [r7, #4]
 800263c:	4613      	mov	r3, r2
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	4413      	add	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	440b      	add	r3, r1
 8002646:	3348      	adds	r3, #72	; 0x48
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800264c:	7bfa      	ldrb	r2, [r7, #15]
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	4613      	mov	r3, r2
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	4413      	add	r3, r2
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	440b      	add	r3, r1
 800265a:	334c      	adds	r3, #76	; 0x4c
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002660:	7bfa      	ldrb	r2, [r7, #15]
 8002662:	6879      	ldr	r1, [r7, #4]
 8002664:	4613      	mov	r3, r2
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	4413      	add	r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	440b      	add	r3, r1
 800266e:	3354      	adds	r3, #84	; 0x54
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002674:	7bfb      	ldrb	r3, [r7, #15]
 8002676:	3301      	adds	r3, #1
 8002678:	73fb      	strb	r3, [r7, #15]
 800267a:	7bfa      	ldrb	r2, [r7, #15]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	429a      	cmp	r2, r3
 8002682:	d3af      	bcc.n	80025e4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002684:	2300      	movs	r3, #0
 8002686:	73fb      	strb	r3, [r7, #15]
 8002688:	e044      	b.n	8002714 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800268a:	7bfa      	ldrb	r2, [r7, #15]
 800268c:	6879      	ldr	r1, [r7, #4]
 800268e:	4613      	mov	r3, r2
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	4413      	add	r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	440b      	add	r3, r1
 8002698:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800269c:	2200      	movs	r2, #0
 800269e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80026a0:	7bfa      	ldrb	r2, [r7, #15]
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	4613      	mov	r3, r2
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	4413      	add	r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	440b      	add	r3, r1
 80026ae:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80026b2:	7bfa      	ldrb	r2, [r7, #15]
 80026b4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80026b6:	7bfa      	ldrb	r2, [r7, #15]
 80026b8:	6879      	ldr	r1, [r7, #4]
 80026ba:	4613      	mov	r3, r2
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	4413      	add	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	440b      	add	r3, r1
 80026c4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80026c8:	2200      	movs	r2, #0
 80026ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80026cc:	7bfa      	ldrb	r2, [r7, #15]
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	4613      	mov	r3, r2
 80026d2:	00db      	lsls	r3, r3, #3
 80026d4:	4413      	add	r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	440b      	add	r3, r1
 80026da:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80026de:	2200      	movs	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80026e2:	7bfa      	ldrb	r2, [r7, #15]
 80026e4:	6879      	ldr	r1, [r7, #4]
 80026e6:	4613      	mov	r3, r2
 80026e8:	00db      	lsls	r3, r3, #3
 80026ea:	4413      	add	r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	440b      	add	r3, r1
 80026f0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80026f4:	2200      	movs	r2, #0
 80026f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80026f8:	7bfa      	ldrb	r2, [r7, #15]
 80026fa:	6879      	ldr	r1, [r7, #4]
 80026fc:	4613      	mov	r3, r2
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	4413      	add	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	440b      	add	r3, r1
 8002706:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800270a:	2200      	movs	r2, #0
 800270c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800270e:	7bfb      	ldrb	r3, [r7, #15]
 8002710:	3301      	adds	r3, #1
 8002712:	73fb      	strb	r3, [r7, #15]
 8002714:	7bfa      	ldrb	r2, [r7, #15]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	429a      	cmp	r2, r3
 800271c:	d3b5      	bcc.n	800268a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	603b      	str	r3, [r7, #0]
 8002724:	687e      	ldr	r6, [r7, #4]
 8002726:	466d      	mov	r5, sp
 8002728:	f106 0410 	add.w	r4, r6, #16
 800272c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800272e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002730:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002732:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002734:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002738:	e885 0003 	stmia.w	r5, {r0, r1}
 800273c:	1d33      	adds	r3, r6, #4
 800273e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002740:	6838      	ldr	r0, [r7, #0]
 8002742:	f003 fcef 	bl	8006124 <USB_DevInit>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d005      	beq.n	8002758 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2202      	movs	r2, #2
 8002750:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e014      	b.n	8002782 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276c:	2b01      	cmp	r3, #1
 800276e:	d102      	bne.n	8002776 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f000 f80b 	bl	800278c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f003 fead 	bl	80064da <USB_DevDisconnect>

  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3714      	adds	r7, #20
 8002786:	46bd      	mov	sp, r7
 8002788:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800278c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2201      	movs	r2, #1
 800279e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80027ba:	4b05      	ldr	r3, [pc, #20]	; (80027d0 <HAL_PCDEx_ActivateLPM+0x44>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3714      	adds	r7, #20
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr
 80027d0:	10000003 	.word	0x10000003

080027d4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80027dc:	4b19      	ldr	r3, [pc, #100]	; (8002844 <HAL_PWREx_ConfigSupply+0x70>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	f003 0304 	and.w	r3, r3, #4
 80027e4:	2b04      	cmp	r3, #4
 80027e6:	d00a      	beq.n	80027fe <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80027e8:	4b16      	ldr	r3, [pc, #88]	; (8002844 <HAL_PWREx_ConfigSupply+0x70>)
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	f003 0307 	and.w	r3, r3, #7
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d001      	beq.n	80027fa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e01f      	b.n	800283a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80027fa:	2300      	movs	r3, #0
 80027fc:	e01d      	b.n	800283a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80027fe:	4b11      	ldr	r3, [pc, #68]	; (8002844 <HAL_PWREx_ConfigSupply+0x70>)
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	f023 0207 	bic.w	r2, r3, #7
 8002806:	490f      	ldr	r1, [pc, #60]	; (8002844 <HAL_PWREx_ConfigSupply+0x70>)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4313      	orrs	r3, r2
 800280c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800280e:	f7fe ff95 	bl	800173c <HAL_GetTick>
 8002812:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002814:	e009      	b.n	800282a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002816:	f7fe ff91 	bl	800173c <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002824:	d901      	bls.n	800282a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e007      	b.n	800283a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800282a:	4b06      	ldr	r3, [pc, #24]	; (8002844 <HAL_PWREx_ConfigSupply+0x70>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002832:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002836:	d1ee      	bne.n	8002816 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	58024800 	.word	0x58024800

08002848 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800284c:	4b05      	ldr	r3, [pc, #20]	; (8002864 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	4a04      	ldr	r2, [pc, #16]	; (8002864 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002852:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002856:	60d3      	str	r3, [r2, #12]
}
 8002858:	bf00      	nop
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	58024800 	.word	0x58024800

08002868 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b08c      	sub	sp, #48	; 0x30
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d102      	bne.n	800287c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	f000 bc1d 	b.w	80030b6 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	2b00      	cmp	r3, #0
 8002886:	f000 8087 	beq.w	8002998 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800288a:	4b99      	ldr	r3, [pc, #612]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002892:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002894:	4b96      	ldr	r3, [pc, #600]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 8002896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002898:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800289a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800289c:	2b10      	cmp	r3, #16
 800289e:	d007      	beq.n	80028b0 <HAL_RCC_OscConfig+0x48>
 80028a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a2:	2b18      	cmp	r3, #24
 80028a4:	d110      	bne.n	80028c8 <HAL_RCC_OscConfig+0x60>
 80028a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a8:	f003 0303 	and.w	r3, r3, #3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d10b      	bne.n	80028c8 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028b0:	4b8f      	ldr	r3, [pc, #572]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d06c      	beq.n	8002996 <HAL_RCC_OscConfig+0x12e>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d168      	bne.n	8002996 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e3f6      	b.n	80030b6 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028d0:	d106      	bne.n	80028e0 <HAL_RCC_OscConfig+0x78>
 80028d2:	4b87      	ldr	r3, [pc, #540]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a86      	ldr	r2, [pc, #536]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 80028d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028dc:	6013      	str	r3, [r2, #0]
 80028de:	e02e      	b.n	800293e <HAL_RCC_OscConfig+0xd6>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d10c      	bne.n	8002902 <HAL_RCC_OscConfig+0x9a>
 80028e8:	4b81      	ldr	r3, [pc, #516]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a80      	ldr	r2, [pc, #512]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 80028ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028f2:	6013      	str	r3, [r2, #0]
 80028f4:	4b7e      	ldr	r3, [pc, #504]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a7d      	ldr	r2, [pc, #500]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 80028fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028fe:	6013      	str	r3, [r2, #0]
 8002900:	e01d      	b.n	800293e <HAL_RCC_OscConfig+0xd6>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800290a:	d10c      	bne.n	8002926 <HAL_RCC_OscConfig+0xbe>
 800290c:	4b78      	ldr	r3, [pc, #480]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a77      	ldr	r2, [pc, #476]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 8002912:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002916:	6013      	str	r3, [r2, #0]
 8002918:	4b75      	ldr	r3, [pc, #468]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a74      	ldr	r2, [pc, #464]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 800291e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002922:	6013      	str	r3, [r2, #0]
 8002924:	e00b      	b.n	800293e <HAL_RCC_OscConfig+0xd6>
 8002926:	4b72      	ldr	r3, [pc, #456]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a71      	ldr	r2, [pc, #452]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 800292c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002930:	6013      	str	r3, [r2, #0]
 8002932:	4b6f      	ldr	r3, [pc, #444]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a6e      	ldr	r2, [pc, #440]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 8002938:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800293c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d013      	beq.n	800296e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002946:	f7fe fef9 	bl	800173c <HAL_GetTick>
 800294a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800294c:	e008      	b.n	8002960 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800294e:	f7fe fef5 	bl	800173c <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b64      	cmp	r3, #100	; 0x64
 800295a:	d901      	bls.n	8002960 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e3aa      	b.n	80030b6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002960:	4b63      	ldr	r3, [pc, #396]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d0f0      	beq.n	800294e <HAL_RCC_OscConfig+0xe6>
 800296c:	e014      	b.n	8002998 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800296e:	f7fe fee5 	bl	800173c <HAL_GetTick>
 8002972:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002974:	e008      	b.n	8002988 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002976:	f7fe fee1 	bl	800173c <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b64      	cmp	r3, #100	; 0x64
 8002982:	d901      	bls.n	8002988 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e396      	b.n	80030b6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002988:	4b59      	ldr	r3, [pc, #356]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d1f0      	bne.n	8002976 <HAL_RCC_OscConfig+0x10e>
 8002994:	e000      	b.n	8002998 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002996:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f000 80cb 	beq.w	8002b3c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029a6:	4b52      	ldr	r3, [pc, #328]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029ae:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80029b0:	4b4f      	ldr	r3, [pc, #316]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 80029b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b4:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80029b6:	6a3b      	ldr	r3, [r7, #32]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d007      	beq.n	80029cc <HAL_RCC_OscConfig+0x164>
 80029bc:	6a3b      	ldr	r3, [r7, #32]
 80029be:	2b18      	cmp	r3, #24
 80029c0:	d156      	bne.n	8002a70 <HAL_RCC_OscConfig+0x208>
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	f003 0303 	and.w	r3, r3, #3
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d151      	bne.n	8002a70 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029cc:	4b48      	ldr	r3, [pc, #288]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0304 	and.w	r3, r3, #4
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d005      	beq.n	80029e4 <HAL_RCC_OscConfig+0x17c>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d101      	bne.n	80029e4 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e368      	b.n	80030b6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80029e4:	4b42      	ldr	r3, [pc, #264]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f023 0219 	bic.w	r2, r3, #25
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	493f      	ldr	r1, [pc, #252]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029f6:	f7fe fea1 	bl	800173c <HAL_GetTick>
 80029fa:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029fc:	e008      	b.n	8002a10 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029fe:	f7fe fe9d 	bl	800173c <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d901      	bls.n	8002a10 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e352      	b.n	80030b6 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a10:	4b37      	ldr	r3, [pc, #220]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0304 	and.w	r3, r3, #4
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d0f0      	beq.n	80029fe <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a1c:	f7fe febe 	bl	800179c <HAL_GetREVID>
 8002a20:	4603      	mov	r3, r0
 8002a22:	f241 0203 	movw	r2, #4099	; 0x1003
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d817      	bhi.n	8002a5a <HAL_RCC_OscConfig+0x1f2>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	2b40      	cmp	r3, #64	; 0x40
 8002a30:	d108      	bne.n	8002a44 <HAL_RCC_OscConfig+0x1dc>
 8002a32:	4b2f      	ldr	r3, [pc, #188]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002a3a:	4a2d      	ldr	r2, [pc, #180]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 8002a3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a40:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a42:	e07b      	b.n	8002b3c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a44:	4b2a      	ldr	r3, [pc, #168]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	691b      	ldr	r3, [r3, #16]
 8002a50:	031b      	lsls	r3, r3, #12
 8002a52:	4927      	ldr	r1, [pc, #156]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a58:	e070      	b.n	8002b3c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a5a:	4b25      	ldr	r3, [pc, #148]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	061b      	lsls	r3, r3, #24
 8002a68:	4921      	ldr	r1, [pc, #132]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a6e:	e065      	b.n	8002b3c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d048      	beq.n	8002b0a <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002a78:	4b1d      	ldr	r3, [pc, #116]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f023 0219 	bic.w	r2, r3, #25
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	491a      	ldr	r1, [pc, #104]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a8a:	f7fe fe57 	bl	800173c <HAL_GetTick>
 8002a8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a90:	e008      	b.n	8002aa4 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a92:	f7fe fe53 	bl	800173c <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e308      	b.n	80030b6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002aa4:	4b12      	ldr	r3, [pc, #72]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0304 	and.w	r3, r3, #4
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d0f0      	beq.n	8002a92 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ab0:	f7fe fe74 	bl	800179c <HAL_GetREVID>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	f241 0203 	movw	r2, #4099	; 0x1003
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d81a      	bhi.n	8002af4 <HAL_RCC_OscConfig+0x28c>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	2b40      	cmp	r3, #64	; 0x40
 8002ac4:	d108      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x270>
 8002ac6:	4b0a      	ldr	r3, [pc, #40]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002ace:	4a08      	ldr	r2, [pc, #32]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 8002ad0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ad4:	6053      	str	r3, [r2, #4]
 8002ad6:	e031      	b.n	8002b3c <HAL_RCC_OscConfig+0x2d4>
 8002ad8:	4b05      	ldr	r3, [pc, #20]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	031b      	lsls	r3, r3, #12
 8002ae6:	4902      	ldr	r1, [pc, #8]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	604b      	str	r3, [r1, #4]
 8002aec:	e026      	b.n	8002b3c <HAL_RCC_OscConfig+0x2d4>
 8002aee:	bf00      	nop
 8002af0:	58024400 	.word	0x58024400
 8002af4:	4b9a      	ldr	r3, [pc, #616]	; (8002d60 <HAL_RCC_OscConfig+0x4f8>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	061b      	lsls	r3, r3, #24
 8002b02:	4997      	ldr	r1, [pc, #604]	; (8002d60 <HAL_RCC_OscConfig+0x4f8>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	604b      	str	r3, [r1, #4]
 8002b08:	e018      	b.n	8002b3c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b0a:	4b95      	ldr	r3, [pc, #596]	; (8002d60 <HAL_RCC_OscConfig+0x4f8>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a94      	ldr	r2, [pc, #592]	; (8002d60 <HAL_RCC_OscConfig+0x4f8>)
 8002b10:	f023 0301 	bic.w	r3, r3, #1
 8002b14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b16:	f7fe fe11 	bl	800173c <HAL_GetTick>
 8002b1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b1c:	e008      	b.n	8002b30 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b1e:	f7fe fe0d 	bl	800173c <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d901      	bls.n	8002b30 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e2c2      	b.n	80030b6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b30:	4b8b      	ldr	r3, [pc, #556]	; (8002d60 <HAL_RCC_OscConfig+0x4f8>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0304 	and.w	r3, r3, #4
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1f0      	bne.n	8002b1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0310 	and.w	r3, r3, #16
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f000 80a9 	beq.w	8002c9c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b4a:	4b85      	ldr	r3, [pc, #532]	; (8002d60 <HAL_RCC_OscConfig+0x4f8>)
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b52:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b54:	4b82      	ldr	r3, [pc, #520]	; (8002d60 <HAL_RCC_OscConfig+0x4f8>)
 8002b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b58:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	2b08      	cmp	r3, #8
 8002b5e:	d007      	beq.n	8002b70 <HAL_RCC_OscConfig+0x308>
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	2b18      	cmp	r3, #24
 8002b64:	d13a      	bne.n	8002bdc <HAL_RCC_OscConfig+0x374>
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	f003 0303 	and.w	r3, r3, #3
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d135      	bne.n	8002bdc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b70:	4b7b      	ldr	r3, [pc, #492]	; (8002d60 <HAL_RCC_OscConfig+0x4f8>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d005      	beq.n	8002b88 <HAL_RCC_OscConfig+0x320>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	69db      	ldr	r3, [r3, #28]
 8002b80:	2b80      	cmp	r3, #128	; 0x80
 8002b82:	d001      	beq.n	8002b88 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e296      	b.n	80030b6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b88:	f7fe fe08 	bl	800179c <HAL_GetREVID>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d817      	bhi.n	8002bc6 <HAL_RCC_OscConfig+0x35e>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a1b      	ldr	r3, [r3, #32]
 8002b9a:	2b20      	cmp	r3, #32
 8002b9c:	d108      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x348>
 8002b9e:	4b70      	ldr	r3, [pc, #448]	; (8002d60 <HAL_RCC_OscConfig+0x4f8>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002ba6:	4a6e      	ldr	r2, [pc, #440]	; (8002d60 <HAL_RCC_OscConfig+0x4f8>)
 8002ba8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002bac:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002bae:	e075      	b.n	8002c9c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002bb0:	4b6b      	ldr	r3, [pc, #428]	; (8002d60 <HAL_RCC_OscConfig+0x4f8>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	069b      	lsls	r3, r3, #26
 8002bbe:	4968      	ldr	r1, [pc, #416]	; (8002d60 <HAL_RCC_OscConfig+0x4f8>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002bc4:	e06a      	b.n	8002c9c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002bc6:	4b66      	ldr	r3, [pc, #408]	; (8002d60 <HAL_RCC_OscConfig+0x4f8>)
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	061b      	lsls	r3, r3, #24
 8002bd4:	4962      	ldr	r1, [pc, #392]	; (8002d60 <HAL_RCC_OscConfig+0x4f8>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002bda:	e05f      	b.n	8002c9c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	69db      	ldr	r3, [r3, #28]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d042      	beq.n	8002c6a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002be4:	4b5e      	ldr	r3, [pc, #376]	; (8002d60 <HAL_RCC_OscConfig+0x4f8>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a5d      	ldr	r2, [pc, #372]	; (8002d60 <HAL_RCC_OscConfig+0x4f8>)
 8002bea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf0:	f7fe fda4 	bl	800173c <HAL_GetTick>
 8002bf4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002bf8:	f7fe fda0 	bl	800173c <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e255      	b.n	80030b6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c0a:	4b55      	ldr	r3, [pc, #340]	; (8002d60 <HAL_RCC_OscConfig+0x4f8>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d0f0      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c16:	f7fe fdc1 	bl	800179c <HAL_GetREVID>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d817      	bhi.n	8002c54 <HAL_RCC_OscConfig+0x3ec>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a1b      	ldr	r3, [r3, #32]
 8002c28:	2b20      	cmp	r3, #32
 8002c2a:	d108      	bne.n	8002c3e <HAL_RCC_OscConfig+0x3d6>
 8002c2c:	4b4c      	ldr	r3, [pc, #304]	; (8002d60 <HAL_RCC_OscConfig+0x4f8>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002c34:	4a4a      	ldr	r2, [pc, #296]	; (8002d60 <HAL_RCC_OscConfig+0x4f8>)
 8002c36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c3a:	6053      	str	r3, [r2, #4]
 8002c3c:	e02e      	b.n	8002c9c <HAL_RCC_OscConfig+0x434>
 8002c3e:	4b48      	ldr	r3, [pc, #288]	; (8002d60 <HAL_RCC_OscConfig+0x4f8>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	069b      	lsls	r3, r3, #26
 8002c4c:	4944      	ldr	r1, [pc, #272]	; (8002d60 <HAL_RCC_OscConfig+0x4f8>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	604b      	str	r3, [r1, #4]
 8002c52:	e023      	b.n	8002c9c <HAL_RCC_OscConfig+0x434>
 8002c54:	4b42      	ldr	r3, [pc, #264]	; (8002d60 <HAL_RCC_OscConfig+0x4f8>)
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	061b      	lsls	r3, r3, #24
 8002c62:	493f      	ldr	r1, [pc, #252]	; (8002d60 <HAL_RCC_OscConfig+0x4f8>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	60cb      	str	r3, [r1, #12]
 8002c68:	e018      	b.n	8002c9c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002c6a:	4b3d      	ldr	r3, [pc, #244]	; (8002d60 <HAL_RCC_OscConfig+0x4f8>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a3c      	ldr	r2, [pc, #240]	; (8002d60 <HAL_RCC_OscConfig+0x4f8>)
 8002c70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c76:	f7fe fd61 	bl	800173c <HAL_GetTick>
 8002c7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002c7c:	e008      	b.n	8002c90 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002c7e:	f7fe fd5d 	bl	800173c <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d901      	bls.n	8002c90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e212      	b.n	80030b6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002c90:	4b33      	ldr	r3, [pc, #204]	; (8002d60 <HAL_RCC_OscConfig+0x4f8>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d1f0      	bne.n	8002c7e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0308 	and.w	r3, r3, #8
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d036      	beq.n	8002d16 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	695b      	ldr	r3, [r3, #20]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d019      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cb0:	4b2b      	ldr	r3, [pc, #172]	; (8002d60 <HAL_RCC_OscConfig+0x4f8>)
 8002cb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cb4:	4a2a      	ldr	r2, [pc, #168]	; (8002d60 <HAL_RCC_OscConfig+0x4f8>)
 8002cb6:	f043 0301 	orr.w	r3, r3, #1
 8002cba:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cbc:	f7fe fd3e 	bl	800173c <HAL_GetTick>
 8002cc0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002cc2:	e008      	b.n	8002cd6 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cc4:	f7fe fd3a 	bl	800173c <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e1ef      	b.n	80030b6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002cd6:	4b22      	ldr	r3, [pc, #136]	; (8002d60 <HAL_RCC_OscConfig+0x4f8>)
 8002cd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d0f0      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x45c>
 8002ce2:	e018      	b.n	8002d16 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ce4:	4b1e      	ldr	r3, [pc, #120]	; (8002d60 <HAL_RCC_OscConfig+0x4f8>)
 8002ce6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ce8:	4a1d      	ldr	r2, [pc, #116]	; (8002d60 <HAL_RCC_OscConfig+0x4f8>)
 8002cea:	f023 0301 	bic.w	r3, r3, #1
 8002cee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cf0:	f7fe fd24 	bl	800173c <HAL_GetTick>
 8002cf4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cf8:	f7fe fd20 	bl	800173c <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e1d5      	b.n	80030b6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d0a:	4b15      	ldr	r3, [pc, #84]	; (8002d60 <HAL_RCC_OscConfig+0x4f8>)
 8002d0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1f0      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0320 	and.w	r3, r3, #32
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d039      	beq.n	8002d96 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d01c      	beq.n	8002d64 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d2a:	4b0d      	ldr	r3, [pc, #52]	; (8002d60 <HAL_RCC_OscConfig+0x4f8>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a0c      	ldr	r2, [pc, #48]	; (8002d60 <HAL_RCC_OscConfig+0x4f8>)
 8002d30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d34:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002d36:	f7fe fd01 	bl	800173c <HAL_GetTick>
 8002d3a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d3c:	e008      	b.n	8002d50 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002d3e:	f7fe fcfd 	bl	800173c <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e1b2      	b.n	80030b6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d50:	4b03      	ldr	r3, [pc, #12]	; (8002d60 <HAL_RCC_OscConfig+0x4f8>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d0f0      	beq.n	8002d3e <HAL_RCC_OscConfig+0x4d6>
 8002d5c:	e01b      	b.n	8002d96 <HAL_RCC_OscConfig+0x52e>
 8002d5e:	bf00      	nop
 8002d60:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d64:	4b9b      	ldr	r3, [pc, #620]	; (8002fd4 <HAL_RCC_OscConfig+0x76c>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a9a      	ldr	r2, [pc, #616]	; (8002fd4 <HAL_RCC_OscConfig+0x76c>)
 8002d6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d6e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002d70:	f7fe fce4 	bl	800173c <HAL_GetTick>
 8002d74:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002d76:	e008      	b.n	8002d8a <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002d78:	f7fe fce0 	bl	800173c <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e195      	b.n	80030b6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002d8a:	4b92      	ldr	r3, [pc, #584]	; (8002fd4 <HAL_RCC_OscConfig+0x76c>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1f0      	bne.n	8002d78 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0304 	and.w	r3, r3, #4
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f000 8081 	beq.w	8002ea6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002da4:	4b8c      	ldr	r3, [pc, #560]	; (8002fd8 <HAL_RCC_OscConfig+0x770>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a8b      	ldr	r2, [pc, #556]	; (8002fd8 <HAL_RCC_OscConfig+0x770>)
 8002daa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002db0:	f7fe fcc4 	bl	800173c <HAL_GetTick>
 8002db4:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002db6:	e008      	b.n	8002dca <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002db8:	f7fe fcc0 	bl	800173c <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b64      	cmp	r3, #100	; 0x64
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e175      	b.n	80030b6 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002dca:	4b83      	ldr	r3, [pc, #524]	; (8002fd8 <HAL_RCC_OscConfig+0x770>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d0f0      	beq.n	8002db8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d106      	bne.n	8002dec <HAL_RCC_OscConfig+0x584>
 8002dde:	4b7d      	ldr	r3, [pc, #500]	; (8002fd4 <HAL_RCC_OscConfig+0x76c>)
 8002de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de2:	4a7c      	ldr	r2, [pc, #496]	; (8002fd4 <HAL_RCC_OscConfig+0x76c>)
 8002de4:	f043 0301 	orr.w	r3, r3, #1
 8002de8:	6713      	str	r3, [r2, #112]	; 0x70
 8002dea:	e02d      	b.n	8002e48 <HAL_RCC_OscConfig+0x5e0>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d10c      	bne.n	8002e0e <HAL_RCC_OscConfig+0x5a6>
 8002df4:	4b77      	ldr	r3, [pc, #476]	; (8002fd4 <HAL_RCC_OscConfig+0x76c>)
 8002df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df8:	4a76      	ldr	r2, [pc, #472]	; (8002fd4 <HAL_RCC_OscConfig+0x76c>)
 8002dfa:	f023 0301 	bic.w	r3, r3, #1
 8002dfe:	6713      	str	r3, [r2, #112]	; 0x70
 8002e00:	4b74      	ldr	r3, [pc, #464]	; (8002fd4 <HAL_RCC_OscConfig+0x76c>)
 8002e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e04:	4a73      	ldr	r2, [pc, #460]	; (8002fd4 <HAL_RCC_OscConfig+0x76c>)
 8002e06:	f023 0304 	bic.w	r3, r3, #4
 8002e0a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e0c:	e01c      	b.n	8002e48 <HAL_RCC_OscConfig+0x5e0>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	2b05      	cmp	r3, #5
 8002e14:	d10c      	bne.n	8002e30 <HAL_RCC_OscConfig+0x5c8>
 8002e16:	4b6f      	ldr	r3, [pc, #444]	; (8002fd4 <HAL_RCC_OscConfig+0x76c>)
 8002e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e1a:	4a6e      	ldr	r2, [pc, #440]	; (8002fd4 <HAL_RCC_OscConfig+0x76c>)
 8002e1c:	f043 0304 	orr.w	r3, r3, #4
 8002e20:	6713      	str	r3, [r2, #112]	; 0x70
 8002e22:	4b6c      	ldr	r3, [pc, #432]	; (8002fd4 <HAL_RCC_OscConfig+0x76c>)
 8002e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e26:	4a6b      	ldr	r2, [pc, #428]	; (8002fd4 <HAL_RCC_OscConfig+0x76c>)
 8002e28:	f043 0301 	orr.w	r3, r3, #1
 8002e2c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e2e:	e00b      	b.n	8002e48 <HAL_RCC_OscConfig+0x5e0>
 8002e30:	4b68      	ldr	r3, [pc, #416]	; (8002fd4 <HAL_RCC_OscConfig+0x76c>)
 8002e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e34:	4a67      	ldr	r2, [pc, #412]	; (8002fd4 <HAL_RCC_OscConfig+0x76c>)
 8002e36:	f023 0301 	bic.w	r3, r3, #1
 8002e3a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e3c:	4b65      	ldr	r3, [pc, #404]	; (8002fd4 <HAL_RCC_OscConfig+0x76c>)
 8002e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e40:	4a64      	ldr	r2, [pc, #400]	; (8002fd4 <HAL_RCC_OscConfig+0x76c>)
 8002e42:	f023 0304 	bic.w	r3, r3, #4
 8002e46:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d015      	beq.n	8002e7c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e50:	f7fe fc74 	bl	800173c <HAL_GetTick>
 8002e54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e56:	e00a      	b.n	8002e6e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e58:	f7fe fc70 	bl	800173c <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e123      	b.n	80030b6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e6e:	4b59      	ldr	r3, [pc, #356]	; (8002fd4 <HAL_RCC_OscConfig+0x76c>)
 8002e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d0ee      	beq.n	8002e58 <HAL_RCC_OscConfig+0x5f0>
 8002e7a:	e014      	b.n	8002ea6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e7c:	f7fe fc5e 	bl	800173c <HAL_GetTick>
 8002e80:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e82:	e00a      	b.n	8002e9a <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e84:	f7fe fc5a 	bl	800173c <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e10d      	b.n	80030b6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e9a:	4b4e      	ldr	r3, [pc, #312]	; (8002fd4 <HAL_RCC_OscConfig+0x76c>)
 8002e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1ee      	bne.n	8002e84 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	f000 8102 	beq.w	80030b4 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002eb0:	4b48      	ldr	r3, [pc, #288]	; (8002fd4 <HAL_RCC_OscConfig+0x76c>)
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002eb8:	2b18      	cmp	r3, #24
 8002eba:	f000 80bd 	beq.w	8003038 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	f040 809e 	bne.w	8003004 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ec8:	4b42      	ldr	r3, [pc, #264]	; (8002fd4 <HAL_RCC_OscConfig+0x76c>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a41      	ldr	r2, [pc, #260]	; (8002fd4 <HAL_RCC_OscConfig+0x76c>)
 8002ece:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ed2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed4:	f7fe fc32 	bl	800173c <HAL_GetTick>
 8002ed8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002eda:	e008      	b.n	8002eee <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002edc:	f7fe fc2e 	bl	800173c <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e0e3      	b.n	80030b6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002eee:	4b39      	ldr	r3, [pc, #228]	; (8002fd4 <HAL_RCC_OscConfig+0x76c>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1f0      	bne.n	8002edc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002efa:	4b36      	ldr	r3, [pc, #216]	; (8002fd4 <HAL_RCC_OscConfig+0x76c>)
 8002efc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002efe:	4b37      	ldr	r3, [pc, #220]	; (8002fdc <HAL_RCC_OscConfig+0x774>)
 8002f00:	4013      	ands	r3, r2
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002f0a:	0112      	lsls	r2, r2, #4
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	4931      	ldr	r1, [pc, #196]	; (8002fd4 <HAL_RCC_OscConfig+0x76c>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	628b      	str	r3, [r1, #40]	; 0x28
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f18:	3b01      	subs	r3, #1
 8002f1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f22:	3b01      	subs	r3, #1
 8002f24:	025b      	lsls	r3, r3, #9
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	431a      	orrs	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	041b      	lsls	r3, r3, #16
 8002f32:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002f36:	431a      	orrs	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	061b      	lsls	r3, r3, #24
 8002f40:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002f44:	4923      	ldr	r1, [pc, #140]	; (8002fd4 <HAL_RCC_OscConfig+0x76c>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002f4a:	4b22      	ldr	r3, [pc, #136]	; (8002fd4 <HAL_RCC_OscConfig+0x76c>)
 8002f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4e:	4a21      	ldr	r2, [pc, #132]	; (8002fd4 <HAL_RCC_OscConfig+0x76c>)
 8002f50:	f023 0301 	bic.w	r3, r3, #1
 8002f54:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002f56:	4b1f      	ldr	r3, [pc, #124]	; (8002fd4 <HAL_RCC_OscConfig+0x76c>)
 8002f58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f5a:	4b21      	ldr	r3, [pc, #132]	; (8002fe0 <HAL_RCC_OscConfig+0x778>)
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002f62:	00d2      	lsls	r2, r2, #3
 8002f64:	491b      	ldr	r1, [pc, #108]	; (8002fd4 <HAL_RCC_OscConfig+0x76c>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002f6a:	4b1a      	ldr	r3, [pc, #104]	; (8002fd4 <HAL_RCC_OscConfig+0x76c>)
 8002f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6e:	f023 020c 	bic.w	r2, r3, #12
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	4917      	ldr	r1, [pc, #92]	; (8002fd4 <HAL_RCC_OscConfig+0x76c>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002f7c:	4b15      	ldr	r3, [pc, #84]	; (8002fd4 <HAL_RCC_OscConfig+0x76c>)
 8002f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f80:	f023 0202 	bic.w	r2, r3, #2
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f88:	4912      	ldr	r1, [pc, #72]	; (8002fd4 <HAL_RCC_OscConfig+0x76c>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002f8e:	4b11      	ldr	r3, [pc, #68]	; (8002fd4 <HAL_RCC_OscConfig+0x76c>)
 8002f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f92:	4a10      	ldr	r2, [pc, #64]	; (8002fd4 <HAL_RCC_OscConfig+0x76c>)
 8002f94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f98:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f9a:	4b0e      	ldr	r3, [pc, #56]	; (8002fd4 <HAL_RCC_OscConfig+0x76c>)
 8002f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9e:	4a0d      	ldr	r2, [pc, #52]	; (8002fd4 <HAL_RCC_OscConfig+0x76c>)
 8002fa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fa4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002fa6:	4b0b      	ldr	r3, [pc, #44]	; (8002fd4 <HAL_RCC_OscConfig+0x76c>)
 8002fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002faa:	4a0a      	ldr	r2, [pc, #40]	; (8002fd4 <HAL_RCC_OscConfig+0x76c>)
 8002fac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fb0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002fb2:	4b08      	ldr	r3, [pc, #32]	; (8002fd4 <HAL_RCC_OscConfig+0x76c>)
 8002fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb6:	4a07      	ldr	r2, [pc, #28]	; (8002fd4 <HAL_RCC_OscConfig+0x76c>)
 8002fb8:	f043 0301 	orr.w	r3, r3, #1
 8002fbc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fbe:	4b05      	ldr	r3, [pc, #20]	; (8002fd4 <HAL_RCC_OscConfig+0x76c>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a04      	ldr	r2, [pc, #16]	; (8002fd4 <HAL_RCC_OscConfig+0x76c>)
 8002fc4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fca:	f7fe fbb7 	bl	800173c <HAL_GetTick>
 8002fce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002fd0:	e011      	b.n	8002ff6 <HAL_RCC_OscConfig+0x78e>
 8002fd2:	bf00      	nop
 8002fd4:	58024400 	.word	0x58024400
 8002fd8:	58024800 	.word	0x58024800
 8002fdc:	fffffc0c 	.word	0xfffffc0c
 8002fe0:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fe4:	f7fe fbaa 	bl	800173c <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e05f      	b.n	80030b6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ff6:	4b32      	ldr	r3, [pc, #200]	; (80030c0 <HAL_RCC_OscConfig+0x858>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d0f0      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x77c>
 8003002:	e057      	b.n	80030b4 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003004:	4b2e      	ldr	r3, [pc, #184]	; (80030c0 <HAL_RCC_OscConfig+0x858>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a2d      	ldr	r2, [pc, #180]	; (80030c0 <HAL_RCC_OscConfig+0x858>)
 800300a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800300e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003010:	f7fe fb94 	bl	800173c <HAL_GetTick>
 8003014:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003016:	e008      	b.n	800302a <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003018:	f7fe fb90 	bl	800173c <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b02      	cmp	r3, #2
 8003024:	d901      	bls.n	800302a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e045      	b.n	80030b6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800302a:	4b25      	ldr	r3, [pc, #148]	; (80030c0 <HAL_RCC_OscConfig+0x858>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1f0      	bne.n	8003018 <HAL_RCC_OscConfig+0x7b0>
 8003036:	e03d      	b.n	80030b4 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003038:	4b21      	ldr	r3, [pc, #132]	; (80030c0 <HAL_RCC_OscConfig+0x858>)
 800303a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800303e:	4b20      	ldr	r3, [pc, #128]	; (80030c0 <HAL_RCC_OscConfig+0x858>)
 8003040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003042:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003048:	2b01      	cmp	r3, #1
 800304a:	d031      	beq.n	80030b0 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	f003 0203 	and.w	r2, r3, #3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003056:	429a      	cmp	r2, r3
 8003058:	d12a      	bne.n	80030b0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	091b      	lsrs	r3, r3, #4
 800305e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003066:	429a      	cmp	r2, r3
 8003068:	d122      	bne.n	80030b0 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003074:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003076:	429a      	cmp	r2, r3
 8003078:	d11a      	bne.n	80030b0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	0a5b      	lsrs	r3, r3, #9
 800307e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003086:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003088:	429a      	cmp	r2, r3
 800308a:	d111      	bne.n	80030b0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	0c1b      	lsrs	r3, r3, #16
 8003090:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003098:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800309a:	429a      	cmp	r2, r3
 800309c:	d108      	bne.n	80030b0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	0e1b      	lsrs	r3, r3, #24
 80030a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030aa:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d001      	beq.n	80030b4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e000      	b.n	80030b6 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3730      	adds	r7, #48	; 0x30
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	58024400 	.word	0x58024400

080030c4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b086      	sub	sp, #24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d101      	bne.n	80030d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e19c      	b.n	8003412 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030d8:	4b8a      	ldr	r3, [pc, #552]	; (8003304 <HAL_RCC_ClockConfig+0x240>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 030f 	and.w	r3, r3, #15
 80030e0:	683a      	ldr	r2, [r7, #0]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d910      	bls.n	8003108 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030e6:	4b87      	ldr	r3, [pc, #540]	; (8003304 <HAL_RCC_ClockConfig+0x240>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f023 020f 	bic.w	r2, r3, #15
 80030ee:	4985      	ldr	r1, [pc, #532]	; (8003304 <HAL_RCC_ClockConfig+0x240>)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030f6:	4b83      	ldr	r3, [pc, #524]	; (8003304 <HAL_RCC_ClockConfig+0x240>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 030f 	and.w	r3, r3, #15
 80030fe:	683a      	ldr	r2, [r7, #0]
 8003100:	429a      	cmp	r2, r3
 8003102:	d001      	beq.n	8003108 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e184      	b.n	8003412 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0304 	and.w	r3, r3, #4
 8003110:	2b00      	cmp	r3, #0
 8003112:	d010      	beq.n	8003136 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	691a      	ldr	r2, [r3, #16]
 8003118:	4b7b      	ldr	r3, [pc, #492]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003120:	429a      	cmp	r2, r3
 8003122:	d908      	bls.n	8003136 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003124:	4b78      	ldr	r3, [pc, #480]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	4975      	ldr	r1, [pc, #468]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 8003132:	4313      	orrs	r3, r2
 8003134:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0308 	and.w	r3, r3, #8
 800313e:	2b00      	cmp	r3, #0
 8003140:	d010      	beq.n	8003164 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	695a      	ldr	r2, [r3, #20]
 8003146:	4b70      	ldr	r3, [pc, #448]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 8003148:	69db      	ldr	r3, [r3, #28]
 800314a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800314e:	429a      	cmp	r2, r3
 8003150:	d908      	bls.n	8003164 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003152:	4b6d      	ldr	r3, [pc, #436]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 8003154:	69db      	ldr	r3, [r3, #28]
 8003156:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	496a      	ldr	r1, [pc, #424]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 8003160:	4313      	orrs	r3, r2
 8003162:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0310 	and.w	r3, r3, #16
 800316c:	2b00      	cmp	r3, #0
 800316e:	d010      	beq.n	8003192 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	699a      	ldr	r2, [r3, #24]
 8003174:	4b64      	ldr	r3, [pc, #400]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 8003176:	69db      	ldr	r3, [r3, #28]
 8003178:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800317c:	429a      	cmp	r2, r3
 800317e:	d908      	bls.n	8003192 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003180:	4b61      	ldr	r3, [pc, #388]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 8003182:	69db      	ldr	r3, [r3, #28]
 8003184:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	495e      	ldr	r1, [pc, #376]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 800318e:	4313      	orrs	r3, r2
 8003190:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0320 	and.w	r3, r3, #32
 800319a:	2b00      	cmp	r3, #0
 800319c:	d010      	beq.n	80031c0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	69da      	ldr	r2, [r3, #28]
 80031a2:	4b59      	ldr	r3, [pc, #356]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d908      	bls.n	80031c0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80031ae:	4b56      	ldr	r3, [pc, #344]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 80031b0:	6a1b      	ldr	r3, [r3, #32]
 80031b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	69db      	ldr	r3, [r3, #28]
 80031ba:	4953      	ldr	r1, [pc, #332]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d010      	beq.n	80031ee <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	68da      	ldr	r2, [r3, #12]
 80031d0:	4b4d      	ldr	r3, [pc, #308]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	f003 030f 	and.w	r3, r3, #15
 80031d8:	429a      	cmp	r2, r3
 80031da:	d908      	bls.n	80031ee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031dc:	4b4a      	ldr	r3, [pc, #296]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	f023 020f 	bic.w	r2, r3, #15
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	4947      	ldr	r1, [pc, #284]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d055      	beq.n	80032a6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80031fa:	4b43      	ldr	r3, [pc, #268]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	4940      	ldr	r1, [pc, #256]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 8003208:	4313      	orrs	r3, r2
 800320a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	2b02      	cmp	r3, #2
 8003212:	d107      	bne.n	8003224 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003214:	4b3c      	ldr	r3, [pc, #240]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d121      	bne.n	8003264 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e0f6      	b.n	8003412 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	2b03      	cmp	r3, #3
 800322a:	d107      	bne.n	800323c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800322c:	4b36      	ldr	r3, [pc, #216]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d115      	bne.n	8003264 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e0ea      	b.n	8003412 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d107      	bne.n	8003254 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003244:	4b30      	ldr	r3, [pc, #192]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800324c:	2b00      	cmp	r3, #0
 800324e:	d109      	bne.n	8003264 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e0de      	b.n	8003412 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003254:	4b2c      	ldr	r3, [pc, #176]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0304 	and.w	r3, r3, #4
 800325c:	2b00      	cmp	r3, #0
 800325e:	d101      	bne.n	8003264 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e0d6      	b.n	8003412 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003264:	4b28      	ldr	r3, [pc, #160]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	f023 0207 	bic.w	r2, r3, #7
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	4925      	ldr	r1, [pc, #148]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 8003272:	4313      	orrs	r3, r2
 8003274:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003276:	f7fe fa61 	bl	800173c <HAL_GetTick>
 800327a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800327c:	e00a      	b.n	8003294 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800327e:	f7fe fa5d 	bl	800173c <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	f241 3288 	movw	r2, #5000	; 0x1388
 800328c:	4293      	cmp	r3, r2
 800328e:	d901      	bls.n	8003294 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e0be      	b.n	8003412 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003294:	4b1c      	ldr	r3, [pc, #112]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	00db      	lsls	r3, r3, #3
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d1eb      	bne.n	800327e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d010      	beq.n	80032d4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	68da      	ldr	r2, [r3, #12]
 80032b6:	4b14      	ldr	r3, [pc, #80]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	f003 030f 	and.w	r3, r3, #15
 80032be:	429a      	cmp	r2, r3
 80032c0:	d208      	bcs.n	80032d4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032c2:	4b11      	ldr	r3, [pc, #68]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	f023 020f 	bic.w	r2, r3, #15
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	490e      	ldr	r1, [pc, #56]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032d4:	4b0b      	ldr	r3, [pc, #44]	; (8003304 <HAL_RCC_ClockConfig+0x240>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 030f 	and.w	r3, r3, #15
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d214      	bcs.n	800330c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032e2:	4b08      	ldr	r3, [pc, #32]	; (8003304 <HAL_RCC_ClockConfig+0x240>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f023 020f 	bic.w	r2, r3, #15
 80032ea:	4906      	ldr	r1, [pc, #24]	; (8003304 <HAL_RCC_ClockConfig+0x240>)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032f2:	4b04      	ldr	r3, [pc, #16]	; (8003304 <HAL_RCC_ClockConfig+0x240>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 030f 	and.w	r3, r3, #15
 80032fa:	683a      	ldr	r2, [r7, #0]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d005      	beq.n	800330c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e086      	b.n	8003412 <HAL_RCC_ClockConfig+0x34e>
 8003304:	52002000 	.word	0x52002000
 8003308:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0304 	and.w	r3, r3, #4
 8003314:	2b00      	cmp	r3, #0
 8003316:	d010      	beq.n	800333a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	691a      	ldr	r2, [r3, #16]
 800331c:	4b3f      	ldr	r3, [pc, #252]	; (800341c <HAL_RCC_ClockConfig+0x358>)
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003324:	429a      	cmp	r2, r3
 8003326:	d208      	bcs.n	800333a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003328:	4b3c      	ldr	r3, [pc, #240]	; (800341c <HAL_RCC_ClockConfig+0x358>)
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	4939      	ldr	r1, [pc, #228]	; (800341c <HAL_RCC_ClockConfig+0x358>)
 8003336:	4313      	orrs	r3, r2
 8003338:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0308 	and.w	r3, r3, #8
 8003342:	2b00      	cmp	r3, #0
 8003344:	d010      	beq.n	8003368 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	695a      	ldr	r2, [r3, #20]
 800334a:	4b34      	ldr	r3, [pc, #208]	; (800341c <HAL_RCC_ClockConfig+0x358>)
 800334c:	69db      	ldr	r3, [r3, #28]
 800334e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003352:	429a      	cmp	r2, r3
 8003354:	d208      	bcs.n	8003368 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003356:	4b31      	ldr	r3, [pc, #196]	; (800341c <HAL_RCC_ClockConfig+0x358>)
 8003358:	69db      	ldr	r3, [r3, #28]
 800335a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	492e      	ldr	r1, [pc, #184]	; (800341c <HAL_RCC_ClockConfig+0x358>)
 8003364:	4313      	orrs	r3, r2
 8003366:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0310 	and.w	r3, r3, #16
 8003370:	2b00      	cmp	r3, #0
 8003372:	d010      	beq.n	8003396 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	699a      	ldr	r2, [r3, #24]
 8003378:	4b28      	ldr	r3, [pc, #160]	; (800341c <HAL_RCC_ClockConfig+0x358>)
 800337a:	69db      	ldr	r3, [r3, #28]
 800337c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003380:	429a      	cmp	r2, r3
 8003382:	d208      	bcs.n	8003396 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003384:	4b25      	ldr	r3, [pc, #148]	; (800341c <HAL_RCC_ClockConfig+0x358>)
 8003386:	69db      	ldr	r3, [r3, #28]
 8003388:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	4922      	ldr	r1, [pc, #136]	; (800341c <HAL_RCC_ClockConfig+0x358>)
 8003392:	4313      	orrs	r3, r2
 8003394:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0320 	and.w	r3, r3, #32
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d010      	beq.n	80033c4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	69da      	ldr	r2, [r3, #28]
 80033a6:	4b1d      	ldr	r3, [pc, #116]	; (800341c <HAL_RCC_ClockConfig+0x358>)
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d208      	bcs.n	80033c4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80033b2:	4b1a      	ldr	r3, [pc, #104]	; (800341c <HAL_RCC_ClockConfig+0x358>)
 80033b4:	6a1b      	ldr	r3, [r3, #32]
 80033b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	69db      	ldr	r3, [r3, #28]
 80033be:	4917      	ldr	r1, [pc, #92]	; (800341c <HAL_RCC_ClockConfig+0x358>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80033c4:	f000 f834 	bl	8003430 <HAL_RCC_GetSysClockFreq>
 80033c8:	4602      	mov	r2, r0
 80033ca:	4b14      	ldr	r3, [pc, #80]	; (800341c <HAL_RCC_ClockConfig+0x358>)
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	0a1b      	lsrs	r3, r3, #8
 80033d0:	f003 030f 	and.w	r3, r3, #15
 80033d4:	4912      	ldr	r1, [pc, #72]	; (8003420 <HAL_RCC_ClockConfig+0x35c>)
 80033d6:	5ccb      	ldrb	r3, [r1, r3]
 80033d8:	f003 031f 	and.w	r3, r3, #31
 80033dc:	fa22 f303 	lsr.w	r3, r2, r3
 80033e0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80033e2:	4b0e      	ldr	r3, [pc, #56]	; (800341c <HAL_RCC_ClockConfig+0x358>)
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	f003 030f 	and.w	r3, r3, #15
 80033ea:	4a0d      	ldr	r2, [pc, #52]	; (8003420 <HAL_RCC_ClockConfig+0x35c>)
 80033ec:	5cd3      	ldrb	r3, [r2, r3]
 80033ee:	f003 031f 	and.w	r3, r3, #31
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	fa22 f303 	lsr.w	r3, r2, r3
 80033f8:	4a0a      	ldr	r2, [pc, #40]	; (8003424 <HAL_RCC_ClockConfig+0x360>)
 80033fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80033fc:	4a0a      	ldr	r2, [pc, #40]	; (8003428 <HAL_RCC_ClockConfig+0x364>)
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003402:	4b0a      	ldr	r3, [pc, #40]	; (800342c <HAL_RCC_ClockConfig+0x368>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4618      	mov	r0, r3
 8003408:	f7fe f94e 	bl	80016a8 <HAL_InitTick>
 800340c:	4603      	mov	r3, r0
 800340e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003410:	7bfb      	ldrb	r3, [r7, #15]
}
 8003412:	4618      	mov	r0, r3
 8003414:	3718      	adds	r7, #24
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	58024400 	.word	0x58024400
 8003420:	0800675c 	.word	0x0800675c
 8003424:	24000014 	.word	0x24000014
 8003428:	24000010 	.word	0x24000010
 800342c:	24000018 	.word	0x24000018

08003430 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003430:	b480      	push	{r7}
 8003432:	b089      	sub	sp, #36	; 0x24
 8003434:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003436:	4bb3      	ldr	r3, [pc, #716]	; (8003704 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800343e:	2b18      	cmp	r3, #24
 8003440:	f200 8155 	bhi.w	80036ee <HAL_RCC_GetSysClockFreq+0x2be>
 8003444:	a201      	add	r2, pc, #4	; (adr r2, 800344c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800344a:	bf00      	nop
 800344c:	080034b1 	.word	0x080034b1
 8003450:	080036ef 	.word	0x080036ef
 8003454:	080036ef 	.word	0x080036ef
 8003458:	080036ef 	.word	0x080036ef
 800345c:	080036ef 	.word	0x080036ef
 8003460:	080036ef 	.word	0x080036ef
 8003464:	080036ef 	.word	0x080036ef
 8003468:	080036ef 	.word	0x080036ef
 800346c:	080034d7 	.word	0x080034d7
 8003470:	080036ef 	.word	0x080036ef
 8003474:	080036ef 	.word	0x080036ef
 8003478:	080036ef 	.word	0x080036ef
 800347c:	080036ef 	.word	0x080036ef
 8003480:	080036ef 	.word	0x080036ef
 8003484:	080036ef 	.word	0x080036ef
 8003488:	080036ef 	.word	0x080036ef
 800348c:	080034dd 	.word	0x080034dd
 8003490:	080036ef 	.word	0x080036ef
 8003494:	080036ef 	.word	0x080036ef
 8003498:	080036ef 	.word	0x080036ef
 800349c:	080036ef 	.word	0x080036ef
 80034a0:	080036ef 	.word	0x080036ef
 80034a4:	080036ef 	.word	0x080036ef
 80034a8:	080036ef 	.word	0x080036ef
 80034ac:	080034e3 	.word	0x080034e3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80034b0:	4b94      	ldr	r3, [pc, #592]	; (8003704 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0320 	and.w	r3, r3, #32
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d009      	beq.n	80034d0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80034bc:	4b91      	ldr	r3, [pc, #580]	; (8003704 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	08db      	lsrs	r3, r3, #3
 80034c2:	f003 0303 	and.w	r3, r3, #3
 80034c6:	4a90      	ldr	r2, [pc, #576]	; (8003708 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80034c8:	fa22 f303 	lsr.w	r3, r2, r3
 80034cc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80034ce:	e111      	b.n	80036f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80034d0:	4b8d      	ldr	r3, [pc, #564]	; (8003708 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80034d2:	61bb      	str	r3, [r7, #24]
    break;
 80034d4:	e10e      	b.n	80036f4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80034d6:	4b8d      	ldr	r3, [pc, #564]	; (800370c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80034d8:	61bb      	str	r3, [r7, #24]
    break;
 80034da:	e10b      	b.n	80036f4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80034dc:	4b8c      	ldr	r3, [pc, #560]	; (8003710 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80034de:	61bb      	str	r3, [r7, #24]
    break;
 80034e0:	e108      	b.n	80036f4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80034e2:	4b88      	ldr	r3, [pc, #544]	; (8003704 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e6:	f003 0303 	and.w	r3, r3, #3
 80034ea:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80034ec:	4b85      	ldr	r3, [pc, #532]	; (8003704 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f0:	091b      	lsrs	r3, r3, #4
 80034f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034f6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80034f8:	4b82      	ldr	r3, [pc, #520]	; (8003704 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003502:	4b80      	ldr	r3, [pc, #512]	; (8003704 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003506:	08db      	lsrs	r3, r3, #3
 8003508:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800350c:	68fa      	ldr	r2, [r7, #12]
 800350e:	fb02 f303 	mul.w	r3, r2, r3
 8003512:	ee07 3a90 	vmov	s15, r3
 8003516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800351a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	2b00      	cmp	r3, #0
 8003522:	f000 80e1 	beq.w	80036e8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	2b02      	cmp	r3, #2
 800352a:	f000 8083 	beq.w	8003634 <HAL_RCC_GetSysClockFreq+0x204>
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	2b02      	cmp	r3, #2
 8003532:	f200 80a1 	bhi.w	8003678 <HAL_RCC_GetSysClockFreq+0x248>
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d003      	beq.n	8003544 <HAL_RCC_GetSysClockFreq+0x114>
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d056      	beq.n	80035f0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003542:	e099      	b.n	8003678 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003544:	4b6f      	ldr	r3, [pc, #444]	; (8003704 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0320 	and.w	r3, r3, #32
 800354c:	2b00      	cmp	r3, #0
 800354e:	d02d      	beq.n	80035ac <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003550:	4b6c      	ldr	r3, [pc, #432]	; (8003704 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	08db      	lsrs	r3, r3, #3
 8003556:	f003 0303 	and.w	r3, r3, #3
 800355a:	4a6b      	ldr	r2, [pc, #428]	; (8003708 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800355c:	fa22 f303 	lsr.w	r3, r2, r3
 8003560:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	ee07 3a90 	vmov	s15, r3
 8003568:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	ee07 3a90 	vmov	s15, r3
 8003572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003576:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800357a:	4b62      	ldr	r3, [pc, #392]	; (8003704 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800357c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003582:	ee07 3a90 	vmov	s15, r3
 8003586:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800358a:	ed97 6a02 	vldr	s12, [r7, #8]
 800358e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003714 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003592:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003596:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800359a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800359e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035a6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80035aa:	e087      	b.n	80036bc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	ee07 3a90 	vmov	s15, r3
 80035b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035b6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003718 <HAL_RCC_GetSysClockFreq+0x2e8>
 80035ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035be:	4b51      	ldr	r3, [pc, #324]	; (8003704 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035c6:	ee07 3a90 	vmov	s15, r3
 80035ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80035d2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003714 <HAL_RCC_GetSysClockFreq+0x2e4>
 80035d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80035ee:	e065      	b.n	80036bc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	ee07 3a90 	vmov	s15, r3
 80035f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035fa:	eddf 6a48 	vldr	s13, [pc, #288]	; 800371c <HAL_RCC_GetSysClockFreq+0x2ec>
 80035fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003602:	4b40      	ldr	r3, [pc, #256]	; (8003704 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800360a:	ee07 3a90 	vmov	s15, r3
 800360e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003612:	ed97 6a02 	vldr	s12, [r7, #8]
 8003616:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003714 <HAL_RCC_GetSysClockFreq+0x2e4>
 800361a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800361e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003622:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003626:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800362a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800362e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003632:	e043      	b.n	80036bc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	ee07 3a90 	vmov	s15, r3
 800363a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800363e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003720 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003646:	4b2f      	ldr	r3, [pc, #188]	; (8003704 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800364e:	ee07 3a90 	vmov	s15, r3
 8003652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003656:	ed97 6a02 	vldr	s12, [r7, #8]
 800365a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003714 <HAL_RCC_GetSysClockFreq+0x2e4>
 800365e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003662:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003666:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800366a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800366e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003672:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003676:	e021      	b.n	80036bc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	ee07 3a90 	vmov	s15, r3
 800367e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003682:	eddf 6a26 	vldr	s13, [pc, #152]	; 800371c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800368a:	4b1e      	ldr	r3, [pc, #120]	; (8003704 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800368c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003692:	ee07 3a90 	vmov	s15, r3
 8003696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800369a:	ed97 6a02 	vldr	s12, [r7, #8]
 800369e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003714 <HAL_RCC_GetSysClockFreq+0x2e4>
 80036a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80036ba:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80036bc:	4b11      	ldr	r3, [pc, #68]	; (8003704 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c0:	0a5b      	lsrs	r3, r3, #9
 80036c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036c6:	3301      	adds	r3, #1
 80036c8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	ee07 3a90 	vmov	s15, r3
 80036d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80036d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80036d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036e0:	ee17 3a90 	vmov	r3, s15
 80036e4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80036e6:	e005      	b.n	80036f4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80036e8:	2300      	movs	r3, #0
 80036ea:	61bb      	str	r3, [r7, #24]
    break;
 80036ec:	e002      	b.n	80036f4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80036ee:	4b07      	ldr	r3, [pc, #28]	; (800370c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80036f0:	61bb      	str	r3, [r7, #24]
    break;
 80036f2:	bf00      	nop
  }

  return sysclockfreq;
 80036f4:	69bb      	ldr	r3, [r7, #24]
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3724      	adds	r7, #36	; 0x24
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	58024400 	.word	0x58024400
 8003708:	03d09000 	.word	0x03d09000
 800370c:	003d0900 	.word	0x003d0900
 8003710:	007a1200 	.word	0x007a1200
 8003714:	46000000 	.word	0x46000000
 8003718:	4c742400 	.word	0x4c742400
 800371c:	4a742400 	.word	0x4a742400
 8003720:	4af42400 	.word	0x4af42400

08003724 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800372a:	f7ff fe81 	bl	8003430 <HAL_RCC_GetSysClockFreq>
 800372e:	4602      	mov	r2, r0
 8003730:	4b10      	ldr	r3, [pc, #64]	; (8003774 <HAL_RCC_GetHCLKFreq+0x50>)
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	0a1b      	lsrs	r3, r3, #8
 8003736:	f003 030f 	and.w	r3, r3, #15
 800373a:	490f      	ldr	r1, [pc, #60]	; (8003778 <HAL_RCC_GetHCLKFreq+0x54>)
 800373c:	5ccb      	ldrb	r3, [r1, r3]
 800373e:	f003 031f 	and.w	r3, r3, #31
 8003742:	fa22 f303 	lsr.w	r3, r2, r3
 8003746:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003748:	4b0a      	ldr	r3, [pc, #40]	; (8003774 <HAL_RCC_GetHCLKFreq+0x50>)
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	f003 030f 	and.w	r3, r3, #15
 8003750:	4a09      	ldr	r2, [pc, #36]	; (8003778 <HAL_RCC_GetHCLKFreq+0x54>)
 8003752:	5cd3      	ldrb	r3, [r2, r3]
 8003754:	f003 031f 	and.w	r3, r3, #31
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	fa22 f303 	lsr.w	r3, r2, r3
 800375e:	4a07      	ldr	r2, [pc, #28]	; (800377c <HAL_RCC_GetHCLKFreq+0x58>)
 8003760:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003762:	4a07      	ldr	r2, [pc, #28]	; (8003780 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003768:	4b04      	ldr	r3, [pc, #16]	; (800377c <HAL_RCC_GetHCLKFreq+0x58>)
 800376a:	681b      	ldr	r3, [r3, #0]
}
 800376c:	4618      	mov	r0, r3
 800376e:	3708      	adds	r7, #8
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	58024400 	.word	0x58024400
 8003778:	0800675c 	.word	0x0800675c
 800377c:	24000014 	.word	0x24000014
 8003780:	24000010 	.word	0x24000010

08003784 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003788:	f7ff ffcc 	bl	8003724 <HAL_RCC_GetHCLKFreq>
 800378c:	4602      	mov	r2, r0
 800378e:	4b06      	ldr	r3, [pc, #24]	; (80037a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003790:	69db      	ldr	r3, [r3, #28]
 8003792:	091b      	lsrs	r3, r3, #4
 8003794:	f003 0307 	and.w	r3, r3, #7
 8003798:	4904      	ldr	r1, [pc, #16]	; (80037ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800379a:	5ccb      	ldrb	r3, [r1, r3]
 800379c:	f003 031f 	and.w	r3, r3, #31
 80037a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	58024400 	.word	0x58024400
 80037ac:	0800675c 	.word	0x0800675c

080037b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80037b4:	f7ff ffb6 	bl	8003724 <HAL_RCC_GetHCLKFreq>
 80037b8:	4602      	mov	r2, r0
 80037ba:	4b06      	ldr	r3, [pc, #24]	; (80037d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037bc:	69db      	ldr	r3, [r3, #28]
 80037be:	0a1b      	lsrs	r3, r3, #8
 80037c0:	f003 0307 	and.w	r3, r3, #7
 80037c4:	4904      	ldr	r1, [pc, #16]	; (80037d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80037c6:	5ccb      	ldrb	r3, [r1, r3]
 80037c8:	f003 031f 	and.w	r3, r3, #31
 80037cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	58024400 	.word	0x58024400
 80037d8:	0800675c 	.word	0x0800675c

080037dc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b086      	sub	sp, #24
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80037e4:	2300      	movs	r3, #0
 80037e6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037e8:	2300      	movs	r3, #0
 80037ea:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d03f      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003800:	d02a      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003802:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003806:	d824      	bhi.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003808:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800380c:	d018      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800380e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003812:	d81e      	bhi.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003814:	2b00      	cmp	r3, #0
 8003816:	d003      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003818:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800381c:	d007      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800381e:	e018      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003820:	4ba3      	ldr	r3, [pc, #652]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003824:	4aa2      	ldr	r2, [pc, #648]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003826:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800382a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800382c:	e015      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	3304      	adds	r3, #4
 8003832:	2102      	movs	r1, #2
 8003834:	4618      	mov	r0, r3
 8003836:	f001 f9d5 	bl	8004be4 <RCCEx_PLL2_Config>
 800383a:	4603      	mov	r3, r0
 800383c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800383e:	e00c      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	3324      	adds	r3, #36	; 0x24
 8003844:	2102      	movs	r1, #2
 8003846:	4618      	mov	r0, r3
 8003848:	f001 fa7e 	bl	8004d48 <RCCEx_PLL3_Config>
 800384c:	4603      	mov	r3, r0
 800384e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003850:	e003      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	75fb      	strb	r3, [r7, #23]
      break;
 8003856:	e000      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003858:	bf00      	nop
    }

    if(ret == HAL_OK)
 800385a:	7dfb      	ldrb	r3, [r7, #23]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d109      	bne.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003860:	4b93      	ldr	r3, [pc, #588]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003864:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800386c:	4990      	ldr	r1, [pc, #576]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800386e:	4313      	orrs	r3, r2
 8003870:	650b      	str	r3, [r1, #80]	; 0x50
 8003872:	e001      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003874:	7dfb      	ldrb	r3, [r7, #23]
 8003876:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003880:	2b00      	cmp	r3, #0
 8003882:	d03d      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003888:	2b04      	cmp	r3, #4
 800388a:	d826      	bhi.n	80038da <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800388c:	a201      	add	r2, pc, #4	; (adr r2, 8003894 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800388e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003892:	bf00      	nop
 8003894:	080038a9 	.word	0x080038a9
 8003898:	080038b7 	.word	0x080038b7
 800389c:	080038c9 	.word	0x080038c9
 80038a0:	080038e1 	.word	0x080038e1
 80038a4:	080038e1 	.word	0x080038e1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038a8:	4b81      	ldr	r3, [pc, #516]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80038aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ac:	4a80      	ldr	r2, [pc, #512]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80038ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80038b4:	e015      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	3304      	adds	r3, #4
 80038ba:	2100      	movs	r1, #0
 80038bc:	4618      	mov	r0, r3
 80038be:	f001 f991 	bl	8004be4 <RCCEx_PLL2_Config>
 80038c2:	4603      	mov	r3, r0
 80038c4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80038c6:	e00c      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	3324      	adds	r3, #36	; 0x24
 80038cc:	2100      	movs	r1, #0
 80038ce:	4618      	mov	r0, r3
 80038d0:	f001 fa3a 	bl	8004d48 <RCCEx_PLL3_Config>
 80038d4:	4603      	mov	r3, r0
 80038d6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80038d8:	e003      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	75fb      	strb	r3, [r7, #23]
      break;
 80038de:	e000      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80038e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038e2:	7dfb      	ldrb	r3, [r7, #23]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d109      	bne.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038e8:	4b71      	ldr	r3, [pc, #452]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80038ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ec:	f023 0207 	bic.w	r2, r3, #7
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038f4:	496e      	ldr	r1, [pc, #440]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	650b      	str	r3, [r1, #80]	; 0x50
 80038fa:	e001      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038fc:	7dfb      	ldrb	r3, [r7, #23]
 80038fe:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003908:	2b00      	cmp	r3, #0
 800390a:	d042      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003910:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003914:	d02b      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003916:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800391a:	d825      	bhi.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800391c:	2bc0      	cmp	r3, #192	; 0xc0
 800391e:	d028      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003920:	2bc0      	cmp	r3, #192	; 0xc0
 8003922:	d821      	bhi.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003924:	2b80      	cmp	r3, #128	; 0x80
 8003926:	d016      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003928:	2b80      	cmp	r3, #128	; 0x80
 800392a:	d81d      	bhi.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800392c:	2b00      	cmp	r3, #0
 800392e:	d002      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003930:	2b40      	cmp	r3, #64	; 0x40
 8003932:	d007      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003934:	e018      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003936:	4b5e      	ldr	r3, [pc, #376]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393a:	4a5d      	ldr	r2, [pc, #372]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800393c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003940:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003942:	e017      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	3304      	adds	r3, #4
 8003948:	2100      	movs	r1, #0
 800394a:	4618      	mov	r0, r3
 800394c:	f001 f94a 	bl	8004be4 <RCCEx_PLL2_Config>
 8003950:	4603      	mov	r3, r0
 8003952:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003954:	e00e      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	3324      	adds	r3, #36	; 0x24
 800395a:	2100      	movs	r1, #0
 800395c:	4618      	mov	r0, r3
 800395e:	f001 f9f3 	bl	8004d48 <RCCEx_PLL3_Config>
 8003962:	4603      	mov	r3, r0
 8003964:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003966:	e005      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	75fb      	strb	r3, [r7, #23]
      break;
 800396c:	e002      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800396e:	bf00      	nop
 8003970:	e000      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003972:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003974:	7dfb      	ldrb	r3, [r7, #23]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d109      	bne.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800397a:	4b4d      	ldr	r3, [pc, #308]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800397c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800397e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003986:	494a      	ldr	r1, [pc, #296]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003988:	4313      	orrs	r3, r2
 800398a:	650b      	str	r3, [r1, #80]	; 0x50
 800398c:	e001      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800398e:	7dfb      	ldrb	r3, [r7, #23]
 8003990:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800399a:	2b00      	cmp	r3, #0
 800399c:	d049      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80039a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039a8:	d030      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x230>
 80039aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039ae:	d82a      	bhi.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80039b0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80039b4:	d02c      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80039b6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80039ba:	d824      	bhi.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80039bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039c0:	d018      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80039c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039c6:	d81e      	bhi.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d003      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80039cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039d0:	d007      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80039d2:	e018      	b.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039d4:	4b36      	ldr	r3, [pc, #216]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80039d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d8:	4a35      	ldr	r2, [pc, #212]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80039da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80039e0:	e017      	b.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	3304      	adds	r3, #4
 80039e6:	2100      	movs	r1, #0
 80039e8:	4618      	mov	r0, r3
 80039ea:	f001 f8fb 	bl	8004be4 <RCCEx_PLL2_Config>
 80039ee:	4603      	mov	r3, r0
 80039f0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80039f2:	e00e      	b.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	3324      	adds	r3, #36	; 0x24
 80039f8:	2100      	movs	r1, #0
 80039fa:	4618      	mov	r0, r3
 80039fc:	f001 f9a4 	bl	8004d48 <RCCEx_PLL3_Config>
 8003a00:	4603      	mov	r3, r0
 8003a02:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a04:	e005      	b.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	75fb      	strb	r3, [r7, #23]
      break;
 8003a0a:	e002      	b.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003a0c:	bf00      	nop
 8003a0e:	e000      	b.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003a10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a12:	7dfb      	ldrb	r3, [r7, #23]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d10a      	bne.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003a18:	4b25      	ldr	r3, [pc, #148]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a1c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003a26:	4922      	ldr	r1, [pc, #136]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	658b      	str	r3, [r1, #88]	; 0x58
 8003a2c:	e001      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a2e:	7dfb      	ldrb	r3, [r7, #23]
 8003a30:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d04b      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003a44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a48:	d030      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003a4a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a4e:	d82a      	bhi.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003a50:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a54:	d02e      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8003a56:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a5a:	d824      	bhi.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003a5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a60:	d018      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003a62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a66:	d81e      	bhi.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d003      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003a6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a70:	d007      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003a72:	e018      	b.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a74:	4b0e      	ldr	r3, [pc, #56]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a78:	4a0d      	ldr	r2, [pc, #52]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003a7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a7e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a80:	e019      	b.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	3304      	adds	r3, #4
 8003a86:	2100      	movs	r1, #0
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f001 f8ab 	bl	8004be4 <RCCEx_PLL2_Config>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003a92:	e010      	b.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	3324      	adds	r3, #36	; 0x24
 8003a98:	2100      	movs	r1, #0
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f001 f954 	bl	8004d48 <RCCEx_PLL3_Config>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003aa4:	e007      	b.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	75fb      	strb	r3, [r7, #23]
      break;
 8003aaa:	e004      	b.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8003aac:	bf00      	nop
 8003aae:	e002      	b.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003ab0:	58024400 	.word	0x58024400
      break;
 8003ab4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ab6:	7dfb      	ldrb	r3, [r7, #23]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d10a      	bne.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003abc:	4b99      	ldr	r3, [pc, #612]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003aca:	4996      	ldr	r1, [pc, #600]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	658b      	str	r3, [r1, #88]	; 0x58
 8003ad0:	e001      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ad2:	7dfb      	ldrb	r3, [r7, #23]
 8003ad4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d032      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ae6:	2b30      	cmp	r3, #48	; 0x30
 8003ae8:	d01c      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8003aea:	2b30      	cmp	r3, #48	; 0x30
 8003aec:	d817      	bhi.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003aee:	2b20      	cmp	r3, #32
 8003af0:	d00c      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8003af2:	2b20      	cmp	r3, #32
 8003af4:	d813      	bhi.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d016      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003afa:	2b10      	cmp	r3, #16
 8003afc:	d10f      	bne.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003afe:	4b89      	ldr	r3, [pc, #548]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b02:	4a88      	ldr	r2, [pc, #544]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003b04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b08:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003b0a:	e00e      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	3304      	adds	r3, #4
 8003b10:	2102      	movs	r1, #2
 8003b12:	4618      	mov	r0, r3
 8003b14:	f001 f866 	bl	8004be4 <RCCEx_PLL2_Config>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003b1c:	e005      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	75fb      	strb	r3, [r7, #23]
      break;
 8003b22:	e002      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003b24:	bf00      	nop
 8003b26:	e000      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003b28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b2a:	7dfb      	ldrb	r3, [r7, #23]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d109      	bne.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003b30:	4b7c      	ldr	r3, [pc, #496]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003b32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b34:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b3c:	4979      	ldr	r1, [pc, #484]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003b42:	e001      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b44:	7dfb      	ldrb	r3, [r7, #23]
 8003b46:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d047      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b5c:	d030      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003b5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b62:	d82a      	bhi.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003b64:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b68:	d02c      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003b6a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b6e:	d824      	bhi.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003b70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b74:	d018      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003b76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b7a:	d81e      	bhi.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d003      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8003b80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b84:	d007      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8003b86:	e018      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b88:	4b66      	ldr	r3, [pc, #408]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8c:	4a65      	ldr	r2, [pc, #404]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003b8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b92:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003b94:	e017      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	3304      	adds	r3, #4
 8003b9a:	2100      	movs	r1, #0
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f001 f821 	bl	8004be4 <RCCEx_PLL2_Config>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003ba6:	e00e      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	3324      	adds	r3, #36	; 0x24
 8003bac:	2100      	movs	r1, #0
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f001 f8ca 	bl	8004d48 <RCCEx_PLL3_Config>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003bb8:	e005      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	75fb      	strb	r3, [r7, #23]
      break;
 8003bbe:	e002      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003bc0:	bf00      	nop
 8003bc2:	e000      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003bc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bc6:	7dfb      	ldrb	r3, [r7, #23]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d109      	bne.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003bcc:	4b55      	ldr	r3, [pc, #340]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bd0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bd8:	4952      	ldr	r1, [pc, #328]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	650b      	str	r3, [r1, #80]	; 0x50
 8003bde:	e001      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003be0:	7dfb      	ldrb	r3, [r7, #23]
 8003be2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d049      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bf4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bf8:	d02e      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003bfa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bfe:	d828      	bhi.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003c00:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c04:	d02a      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x480>
 8003c06:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c0a:	d822      	bhi.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003c0c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c10:	d026      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8003c12:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c16:	d81c      	bhi.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003c18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c1c:	d010      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8003c1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c22:	d816      	bhi.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d01d      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8003c28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c2c:	d111      	bne.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	3304      	adds	r3, #4
 8003c32:	2101      	movs	r1, #1
 8003c34:	4618      	mov	r0, r3
 8003c36:	f000 ffd5 	bl	8004be4 <RCCEx_PLL2_Config>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003c3e:	e012      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	3324      	adds	r3, #36	; 0x24
 8003c44:	2101      	movs	r1, #1
 8003c46:	4618      	mov	r0, r3
 8003c48:	f001 f87e 	bl	8004d48 <RCCEx_PLL3_Config>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003c50:	e009      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	75fb      	strb	r3, [r7, #23]
      break;
 8003c56:	e006      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003c58:	bf00      	nop
 8003c5a:	e004      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003c5c:	bf00      	nop
 8003c5e:	e002      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003c60:	bf00      	nop
 8003c62:	e000      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003c64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c66:	7dfb      	ldrb	r3, [r7, #23]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d109      	bne.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003c6c:	4b2d      	ldr	r3, [pc, #180]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003c6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c70:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c78:	492a      	ldr	r1, [pc, #168]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	650b      	str	r3, [r1, #80]	; 0x50
 8003c7e:	e001      	b.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c80:	7dfb      	ldrb	r3, [r7, #23]
 8003c82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d04d      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c9a:	d02e      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8003c9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ca0:	d828      	bhi.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ca6:	d02a      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cac:	d822      	bhi.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003cae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003cb2:	d026      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8003cb4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003cb8:	d81c      	bhi.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003cba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cbe:	d010      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003cc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cc4:	d816      	bhi.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d01d      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8003cca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cce:	d111      	bne.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	3304      	adds	r3, #4
 8003cd4:	2101      	movs	r1, #1
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f000 ff84 	bl	8004be4 <RCCEx_PLL2_Config>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003ce0:	e012      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	3324      	adds	r3, #36	; 0x24
 8003ce6:	2101      	movs	r1, #1
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f001 f82d 	bl	8004d48 <RCCEx_PLL3_Config>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003cf2:	e009      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	75fb      	strb	r3, [r7, #23]
      break;
 8003cf8:	e006      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003cfa:	bf00      	nop
 8003cfc:	e004      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003cfe:	bf00      	nop
 8003d00:	e002      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003d02:	bf00      	nop
 8003d04:	e000      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003d06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d08:	7dfb      	ldrb	r3, [r7, #23]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d10c      	bne.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003d0e:	4b05      	ldr	r3, [pc, #20]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d12:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003d1c:	4901      	ldr	r1, [pc, #4]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	658b      	str	r3, [r1, #88]	; 0x58
 8003d22:	e003      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003d24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d28:	7dfb      	ldrb	r3, [r7, #23]
 8003d2a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d02f      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d40:	d00e      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8003d42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d46:	d814      	bhi.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d015      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8003d4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d50:	d10f      	bne.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d52:	4baf      	ldr	r3, [pc, #700]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d56:	4aae      	ldr	r2, [pc, #696]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d5c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003d5e:	e00c      	b.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	3304      	adds	r3, #4
 8003d64:	2101      	movs	r1, #1
 8003d66:	4618      	mov	r0, r3
 8003d68:	f000 ff3c 	bl	8004be4 <RCCEx_PLL2_Config>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003d70:	e003      	b.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	75fb      	strb	r3, [r7, #23]
      break;
 8003d76:	e000      	b.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8003d78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d7a:	7dfb      	ldrb	r3, [r7, #23]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d109      	bne.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003d80:	4ba3      	ldr	r3, [pc, #652]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003d82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d84:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d8c:	49a0      	ldr	r1, [pc, #640]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	650b      	str	r3, [r1, #80]	; 0x50
 8003d92:	e001      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d94:	7dfb      	ldrb	r3, [r7, #23]
 8003d96:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d032      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da8:	2b03      	cmp	r3, #3
 8003daa:	d81b      	bhi.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003dac:	a201      	add	r2, pc, #4	; (adr r2, 8003db4 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8003dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db2:	bf00      	nop
 8003db4:	08003deb 	.word	0x08003deb
 8003db8:	08003dc5 	.word	0x08003dc5
 8003dbc:	08003dd3 	.word	0x08003dd3
 8003dc0:	08003deb 	.word	0x08003deb
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dc4:	4b92      	ldr	r3, [pc, #584]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc8:	4a91      	ldr	r2, [pc, #580]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003dca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003dd0:	e00c      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	3304      	adds	r3, #4
 8003dd6:	2102      	movs	r1, #2
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f000 ff03 	bl	8004be4 <RCCEx_PLL2_Config>
 8003dde:	4603      	mov	r3, r0
 8003de0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003de2:	e003      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	75fb      	strb	r3, [r7, #23]
      break;
 8003de8:	e000      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003dea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dec:	7dfb      	ldrb	r3, [r7, #23]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d109      	bne.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003df2:	4b87      	ldr	r3, [pc, #540]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003df6:	f023 0203 	bic.w	r2, r3, #3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfe:	4984      	ldr	r1, [pc, #528]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003e04:	e001      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e06:	7dfb      	ldrb	r3, [r7, #23]
 8003e08:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f000 8086 	beq.w	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e18:	4b7e      	ldr	r3, [pc, #504]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a7d      	ldr	r2, [pc, #500]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e22:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e24:	f7fd fc8a 	bl	800173c <HAL_GetTick>
 8003e28:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e2a:	e009      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e2c:	f7fd fc86 	bl	800173c <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	2b64      	cmp	r3, #100	; 0x64
 8003e38:	d902      	bls.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	75fb      	strb	r3, [r7, #23]
        break;
 8003e3e:	e005      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e40:	4b74      	ldr	r3, [pc, #464]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d0ef      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003e4c:	7dfb      	ldrb	r3, [r7, #23]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d166      	bne.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003e52:	4b6f      	ldr	r3, [pc, #444]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e54:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e5c:	4053      	eors	r3, r2
 8003e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d013      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e66:	4b6a      	ldr	r3, [pc, #424]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e6e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e70:	4b67      	ldr	r3, [pc, #412]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e74:	4a66      	ldr	r2, [pc, #408]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e7a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e7c:	4b64      	ldr	r3, [pc, #400]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e80:	4a63      	ldr	r2, [pc, #396]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e86:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003e88:	4a61      	ldr	r2, [pc, #388]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e98:	d115      	bne.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e9a:	f7fd fc4f 	bl	800173c <HAL_GetTick>
 8003e9e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ea0:	e00b      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ea2:	f7fd fc4b 	bl	800173c <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d902      	bls.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	75fb      	strb	r3, [r7, #23]
            break;
 8003eb8:	e005      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003eba:	4b55      	ldr	r3, [pc, #340]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d0ed      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003ec6:	7dfb      	ldrb	r3, [r7, #23]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d126      	bne.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ed2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ed6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003eda:	d10d      	bne.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003edc:	4b4c      	ldr	r3, [pc, #304]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003eea:	0919      	lsrs	r1, r3, #4
 8003eec:	4b4a      	ldr	r3, [pc, #296]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8003eee:	400b      	ands	r3, r1
 8003ef0:	4947      	ldr	r1, [pc, #284]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	610b      	str	r3, [r1, #16]
 8003ef6:	e005      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003ef8:	4b45      	ldr	r3, [pc, #276]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	4a44      	ldr	r2, [pc, #272]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003efe:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003f02:	6113      	str	r3, [r2, #16]
 8003f04:	4b42      	ldr	r3, [pc, #264]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003f06:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f12:	493f      	ldr	r1, [pc, #252]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	670b      	str	r3, [r1, #112]	; 0x70
 8003f18:	e004      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f1a:	7dfb      	ldrb	r3, [r7, #23]
 8003f1c:	75bb      	strb	r3, [r7, #22]
 8003f1e:	e001      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f20:	7dfb      	ldrb	r3, [r7, #23]
 8003f22:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0301 	and.w	r3, r3, #1
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f000 8085 	beq.w	800403c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f36:	2b28      	cmp	r3, #40	; 0x28
 8003f38:	d866      	bhi.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003f3a:	a201      	add	r2, pc, #4	; (adr r2, 8003f40 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f40:	0800401d 	.word	0x0800401d
 8003f44:	08004009 	.word	0x08004009
 8003f48:	08004009 	.word	0x08004009
 8003f4c:	08004009 	.word	0x08004009
 8003f50:	08004009 	.word	0x08004009
 8003f54:	08004009 	.word	0x08004009
 8003f58:	08004009 	.word	0x08004009
 8003f5c:	08004009 	.word	0x08004009
 8003f60:	08003fe5 	.word	0x08003fe5
 8003f64:	08004009 	.word	0x08004009
 8003f68:	08004009 	.word	0x08004009
 8003f6c:	08004009 	.word	0x08004009
 8003f70:	08004009 	.word	0x08004009
 8003f74:	08004009 	.word	0x08004009
 8003f78:	08004009 	.word	0x08004009
 8003f7c:	08004009 	.word	0x08004009
 8003f80:	08003ff7 	.word	0x08003ff7
 8003f84:	08004009 	.word	0x08004009
 8003f88:	08004009 	.word	0x08004009
 8003f8c:	08004009 	.word	0x08004009
 8003f90:	08004009 	.word	0x08004009
 8003f94:	08004009 	.word	0x08004009
 8003f98:	08004009 	.word	0x08004009
 8003f9c:	08004009 	.word	0x08004009
 8003fa0:	0800401d 	.word	0x0800401d
 8003fa4:	08004009 	.word	0x08004009
 8003fa8:	08004009 	.word	0x08004009
 8003fac:	08004009 	.word	0x08004009
 8003fb0:	08004009 	.word	0x08004009
 8003fb4:	08004009 	.word	0x08004009
 8003fb8:	08004009 	.word	0x08004009
 8003fbc:	08004009 	.word	0x08004009
 8003fc0:	0800401d 	.word	0x0800401d
 8003fc4:	08004009 	.word	0x08004009
 8003fc8:	08004009 	.word	0x08004009
 8003fcc:	08004009 	.word	0x08004009
 8003fd0:	08004009 	.word	0x08004009
 8003fd4:	08004009 	.word	0x08004009
 8003fd8:	08004009 	.word	0x08004009
 8003fdc:	08004009 	.word	0x08004009
 8003fe0:	0800401d 	.word	0x0800401d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	3304      	adds	r3, #4
 8003fe8:	2101      	movs	r1, #1
 8003fea:	4618      	mov	r0, r3
 8003fec:	f000 fdfa 	bl	8004be4 <RCCEx_PLL2_Config>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003ff4:	e013      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	3324      	adds	r3, #36	; 0x24
 8003ffa:	2101      	movs	r1, #1
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f000 fea3 	bl	8004d48 <RCCEx_PLL3_Config>
 8004002:	4603      	mov	r3, r0
 8004004:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004006:	e00a      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	75fb      	strb	r3, [r7, #23]
      break;
 800400c:	e007      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x842>
 800400e:	bf00      	nop
 8004010:	58024400 	.word	0x58024400
 8004014:	58024800 	.word	0x58024800
 8004018:	00ffffcf 	.word	0x00ffffcf
      break;
 800401c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800401e:	7dfb      	ldrb	r3, [r7, #23]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d109      	bne.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004024:	4b96      	ldr	r3, [pc, #600]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004028:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004030:	4993      	ldr	r1, [pc, #588]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004032:	4313      	orrs	r3, r2
 8004034:	654b      	str	r3, [r1, #84]	; 0x54
 8004036:	e001      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004038:	7dfb      	ldrb	r3, [r7, #23]
 800403a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0302 	and.w	r3, r3, #2
 8004044:	2b00      	cmp	r3, #0
 8004046:	d038      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800404c:	2b05      	cmp	r3, #5
 800404e:	d821      	bhi.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8004050:	a201      	add	r2, pc, #4	; (adr r2, 8004058 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8004052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004056:	bf00      	nop
 8004058:	0800409b 	.word	0x0800409b
 800405c:	08004071 	.word	0x08004071
 8004060:	08004083 	.word	0x08004083
 8004064:	0800409b 	.word	0x0800409b
 8004068:	0800409b 	.word	0x0800409b
 800406c:	0800409b 	.word	0x0800409b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	3304      	adds	r3, #4
 8004074:	2101      	movs	r1, #1
 8004076:	4618      	mov	r0, r3
 8004078:	f000 fdb4 	bl	8004be4 <RCCEx_PLL2_Config>
 800407c:	4603      	mov	r3, r0
 800407e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004080:	e00c      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	3324      	adds	r3, #36	; 0x24
 8004086:	2101      	movs	r1, #1
 8004088:	4618      	mov	r0, r3
 800408a:	f000 fe5d 	bl	8004d48 <RCCEx_PLL3_Config>
 800408e:	4603      	mov	r3, r0
 8004090:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004092:	e003      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	75fb      	strb	r3, [r7, #23]
      break;
 8004098:	e000      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800409a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800409c:	7dfb      	ldrb	r3, [r7, #23]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d109      	bne.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80040a2:	4b77      	ldr	r3, [pc, #476]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80040a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a6:	f023 0207 	bic.w	r2, r3, #7
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040ae:	4974      	ldr	r1, [pc, #464]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	654b      	str	r3, [r1, #84]	; 0x54
 80040b4:	e001      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b6:	7dfb      	ldrb	r3, [r7, #23]
 80040b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0304 	and.w	r3, r3, #4
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d03a      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040cc:	2b05      	cmp	r3, #5
 80040ce:	d821      	bhi.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80040d0:	a201      	add	r2, pc, #4	; (adr r2, 80040d8 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80040d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d6:	bf00      	nop
 80040d8:	0800411b 	.word	0x0800411b
 80040dc:	080040f1 	.word	0x080040f1
 80040e0:	08004103 	.word	0x08004103
 80040e4:	0800411b 	.word	0x0800411b
 80040e8:	0800411b 	.word	0x0800411b
 80040ec:	0800411b 	.word	0x0800411b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	3304      	adds	r3, #4
 80040f4:	2101      	movs	r1, #1
 80040f6:	4618      	mov	r0, r3
 80040f8:	f000 fd74 	bl	8004be4 <RCCEx_PLL2_Config>
 80040fc:	4603      	mov	r3, r0
 80040fe:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004100:	e00c      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	3324      	adds	r3, #36	; 0x24
 8004106:	2101      	movs	r1, #1
 8004108:	4618      	mov	r0, r3
 800410a:	f000 fe1d 	bl	8004d48 <RCCEx_PLL3_Config>
 800410e:	4603      	mov	r3, r0
 8004110:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004112:	e003      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	75fb      	strb	r3, [r7, #23]
      break;
 8004118:	e000      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800411a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800411c:	7dfb      	ldrb	r3, [r7, #23]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d10a      	bne.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004122:	4b57      	ldr	r3, [pc, #348]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004126:	f023 0207 	bic.w	r2, r3, #7
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004130:	4953      	ldr	r1, [pc, #332]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004132:	4313      	orrs	r3, r2
 8004134:	658b      	str	r3, [r1, #88]	; 0x58
 8004136:	e001      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004138:	7dfb      	ldrb	r3, [r7, #23]
 800413a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0320 	and.w	r3, r3, #32
 8004144:	2b00      	cmp	r3, #0
 8004146:	d04b      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800414e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004152:	d02e      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004154:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004158:	d828      	bhi.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800415a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800415e:	d02a      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004164:	d822      	bhi.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004166:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800416a:	d026      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800416c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004170:	d81c      	bhi.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004172:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004176:	d010      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8004178:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800417c:	d816      	bhi.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800417e:	2b00      	cmp	r3, #0
 8004180:	d01d      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8004182:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004186:	d111      	bne.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	3304      	adds	r3, #4
 800418c:	2100      	movs	r1, #0
 800418e:	4618      	mov	r0, r3
 8004190:	f000 fd28 	bl	8004be4 <RCCEx_PLL2_Config>
 8004194:	4603      	mov	r3, r0
 8004196:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004198:	e012      	b.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	3324      	adds	r3, #36	; 0x24
 800419e:	2102      	movs	r1, #2
 80041a0:	4618      	mov	r0, r3
 80041a2:	f000 fdd1 	bl	8004d48 <RCCEx_PLL3_Config>
 80041a6:	4603      	mov	r3, r0
 80041a8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80041aa:	e009      	b.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	75fb      	strb	r3, [r7, #23]
      break;
 80041b0:	e006      	b.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80041b2:	bf00      	nop
 80041b4:	e004      	b.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80041b6:	bf00      	nop
 80041b8:	e002      	b.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80041ba:	bf00      	nop
 80041bc:	e000      	b.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80041be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041c0:	7dfb      	ldrb	r3, [r7, #23]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10a      	bne.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041c6:	4b2e      	ldr	r3, [pc, #184]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80041c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ca:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041d4:	492a      	ldr	r1, [pc, #168]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	654b      	str	r3, [r1, #84]	; 0x54
 80041da:	e001      	b.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041dc:	7dfb      	ldrb	r3, [r7, #23]
 80041de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d04d      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041f2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80041f6:	d02e      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80041f8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80041fc:	d828      	bhi.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80041fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004202:	d02a      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004204:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004208:	d822      	bhi.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800420a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800420e:	d026      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004210:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004214:	d81c      	bhi.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004216:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800421a:	d010      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800421c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004220:	d816      	bhi.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004222:	2b00      	cmp	r3, #0
 8004224:	d01d      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8004226:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800422a:	d111      	bne.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	3304      	adds	r3, #4
 8004230:	2100      	movs	r1, #0
 8004232:	4618      	mov	r0, r3
 8004234:	f000 fcd6 	bl	8004be4 <RCCEx_PLL2_Config>
 8004238:	4603      	mov	r3, r0
 800423a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800423c:	e012      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	3324      	adds	r3, #36	; 0x24
 8004242:	2102      	movs	r1, #2
 8004244:	4618      	mov	r0, r3
 8004246:	f000 fd7f 	bl	8004d48 <RCCEx_PLL3_Config>
 800424a:	4603      	mov	r3, r0
 800424c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800424e:	e009      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	75fb      	strb	r3, [r7, #23]
      break;
 8004254:	e006      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004256:	bf00      	nop
 8004258:	e004      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800425a:	bf00      	nop
 800425c:	e002      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800425e:	bf00      	nop
 8004260:	e000      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004262:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004264:	7dfb      	ldrb	r3, [r7, #23]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d10c      	bne.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800426a:	4b05      	ldr	r3, [pc, #20]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800426c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800426e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004278:	4901      	ldr	r1, [pc, #4]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800427a:	4313      	orrs	r3, r2
 800427c:	658b      	str	r3, [r1, #88]	; 0x58
 800427e:	e003      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8004280:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004284:	7dfb      	ldrb	r3, [r7, #23]
 8004286:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004290:	2b00      	cmp	r3, #0
 8004292:	d04b      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800429a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800429e:	d02e      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80042a0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80042a4:	d828      	bhi.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80042a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042aa:	d02a      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80042ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042b0:	d822      	bhi.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80042b2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80042b6:	d026      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80042b8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80042bc:	d81c      	bhi.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80042be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042c2:	d010      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80042c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042c8:	d816      	bhi.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d01d      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80042ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042d2:	d111      	bne.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	3304      	adds	r3, #4
 80042d8:	2100      	movs	r1, #0
 80042da:	4618      	mov	r0, r3
 80042dc:	f000 fc82 	bl	8004be4 <RCCEx_PLL2_Config>
 80042e0:	4603      	mov	r3, r0
 80042e2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80042e4:	e012      	b.n	800430c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	3324      	adds	r3, #36	; 0x24
 80042ea:	2102      	movs	r1, #2
 80042ec:	4618      	mov	r0, r3
 80042ee:	f000 fd2b 	bl	8004d48 <RCCEx_PLL3_Config>
 80042f2:	4603      	mov	r3, r0
 80042f4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80042f6:	e009      	b.n	800430c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	75fb      	strb	r3, [r7, #23]
      break;
 80042fc:	e006      	b.n	800430c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80042fe:	bf00      	nop
 8004300:	e004      	b.n	800430c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004302:	bf00      	nop
 8004304:	e002      	b.n	800430c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004306:	bf00      	nop
 8004308:	e000      	b.n	800430c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800430a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800430c:	7dfb      	ldrb	r3, [r7, #23]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d10a      	bne.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004312:	4b9d      	ldr	r3, [pc, #628]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004316:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004320:	4999      	ldr	r1, [pc, #612]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004322:	4313      	orrs	r3, r2
 8004324:	658b      	str	r3, [r1, #88]	; 0x58
 8004326:	e001      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004328:	7dfb      	ldrb	r3, [r7, #23]
 800432a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0308 	and.w	r3, r3, #8
 8004334:	2b00      	cmp	r3, #0
 8004336:	d01a      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800433e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004342:	d10a      	bne.n	800435a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	3324      	adds	r3, #36	; 0x24
 8004348:	2102      	movs	r1, #2
 800434a:	4618      	mov	r0, r3
 800434c:	f000 fcfc 	bl	8004d48 <RCCEx_PLL3_Config>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d001      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800435a:	4b8b      	ldr	r3, [pc, #556]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800435c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800435e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004368:	4987      	ldr	r1, [pc, #540]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800436a:	4313      	orrs	r3, r2
 800436c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0310 	and.w	r3, r3, #16
 8004376:	2b00      	cmp	r3, #0
 8004378:	d01a      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004380:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004384:	d10a      	bne.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	3324      	adds	r3, #36	; 0x24
 800438a:	2102      	movs	r1, #2
 800438c:	4618      	mov	r0, r3
 800438e:	f000 fcdb 	bl	8004d48 <RCCEx_PLL3_Config>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d001      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800439c:	4b7a      	ldr	r3, [pc, #488]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800439e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043aa:	4977      	ldr	r1, [pc, #476]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d034      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80043c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043c6:	d01d      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80043c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043cc:	d817      	bhi.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d003      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80043d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043d6:	d009      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80043d8:	e011      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	3304      	adds	r3, #4
 80043de:	2100      	movs	r1, #0
 80043e0:	4618      	mov	r0, r3
 80043e2:	f000 fbff 	bl	8004be4 <RCCEx_PLL2_Config>
 80043e6:	4603      	mov	r3, r0
 80043e8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80043ea:	e00c      	b.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	3324      	adds	r3, #36	; 0x24
 80043f0:	2102      	movs	r1, #2
 80043f2:	4618      	mov	r0, r3
 80043f4:	f000 fca8 	bl	8004d48 <RCCEx_PLL3_Config>
 80043f8:	4603      	mov	r3, r0
 80043fa:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80043fc:	e003      	b.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	75fb      	strb	r3, [r7, #23]
      break;
 8004402:	e000      	b.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004404:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004406:	7dfb      	ldrb	r3, [r7, #23]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d10a      	bne.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800440c:	4b5e      	ldr	r3, [pc, #376]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800440e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004410:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800441a:	495b      	ldr	r1, [pc, #364]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800441c:	4313      	orrs	r3, r2
 800441e:	658b      	str	r3, [r1, #88]	; 0x58
 8004420:	e001      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004422:	7dfb      	ldrb	r3, [r7, #23]
 8004424:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d033      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004438:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800443c:	d01c      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800443e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004442:	d816      	bhi.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8004444:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004448:	d003      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800444a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800444e:	d007      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8004450:	e00f      	b.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004452:	4b4d      	ldr	r3, [pc, #308]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004456:	4a4c      	ldr	r2, [pc, #304]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004458:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800445c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800445e:	e00c      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	3324      	adds	r3, #36	; 0x24
 8004464:	2101      	movs	r1, #1
 8004466:	4618      	mov	r0, r3
 8004468:	f000 fc6e 	bl	8004d48 <RCCEx_PLL3_Config>
 800446c:	4603      	mov	r3, r0
 800446e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004470:	e003      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	75fb      	strb	r3, [r7, #23]
      break;
 8004476:	e000      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8004478:	bf00      	nop
    }

    if(ret == HAL_OK)
 800447a:	7dfb      	ldrb	r3, [r7, #23]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d10a      	bne.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004480:	4b41      	ldr	r3, [pc, #260]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004484:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800448e:	493e      	ldr	r1, [pc, #248]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004490:	4313      	orrs	r3, r2
 8004492:	654b      	str	r3, [r1, #84]	; 0x54
 8004494:	e001      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004496:	7dfb      	ldrb	r3, [r7, #23]
 8004498:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d029      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d003      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80044ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044b2:	d007      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80044b4:	e00f      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044b6:	4b34      	ldr	r3, [pc, #208]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80044b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ba:	4a33      	ldr	r2, [pc, #204]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80044bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80044c2:	e00b      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	3304      	adds	r3, #4
 80044c8:	2102      	movs	r1, #2
 80044ca:	4618      	mov	r0, r3
 80044cc:	f000 fb8a 	bl	8004be4 <RCCEx_PLL2_Config>
 80044d0:	4603      	mov	r3, r0
 80044d2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80044d4:	e002      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	75fb      	strb	r3, [r7, #23]
      break;
 80044da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044dc:	7dfb      	ldrb	r3, [r7, #23]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d109      	bne.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80044e2:	4b29      	ldr	r3, [pc, #164]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80044e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044e6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ee:	4926      	ldr	r1, [pc, #152]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80044f4:	e001      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044f6:	7dfb      	ldrb	r3, [r7, #23]
 80044f8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00a      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	3324      	adds	r3, #36	; 0x24
 800450a:	2102      	movs	r1, #2
 800450c:	4618      	mov	r0, r3
 800450e:	f000 fc1b 	bl	8004d48 <RCCEx_PLL3_Config>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d001      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d033      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800452c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004530:	d017      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8004532:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004536:	d811      	bhi.n	800455c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004538:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800453c:	d013      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800453e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004542:	d80b      	bhi.n	800455c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004544:	2b00      	cmp	r3, #0
 8004546:	d010      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8004548:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800454c:	d106      	bne.n	800455c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800454e:	4b0e      	ldr	r3, [pc, #56]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004552:	4a0d      	ldr	r2, [pc, #52]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004558:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800455a:	e007      	b.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	75fb      	strb	r3, [r7, #23]
      break;
 8004560:	e004      	b.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004562:	bf00      	nop
 8004564:	e002      	b.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004566:	bf00      	nop
 8004568:	e000      	b.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800456a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800456c:	7dfb      	ldrb	r3, [r7, #23]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d10c      	bne.n	800458c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004572:	4b05      	ldr	r3, [pc, #20]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004576:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800457e:	4902      	ldr	r1, [pc, #8]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004580:	4313      	orrs	r3, r2
 8004582:	654b      	str	r3, [r1, #84]	; 0x54
 8004584:	e004      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8004586:	bf00      	nop
 8004588:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800458c:	7dfb      	ldrb	r3, [r7, #23]
 800458e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d008      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800459c:	4b31      	ldr	r3, [pc, #196]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800459e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045a0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a8:	492e      	ldr	r1, [pc, #184]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d009      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80045ba:	4b2a      	ldr	r3, [pc, #168]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80045c8:	4926      	ldr	r1, [pc, #152]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d008      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80045da:	4b22      	ldr	r3, [pc, #136]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80045dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045de:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045e6:	491f      	ldr	r1, [pc, #124]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00d      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80045f8:	4b1a      	ldr	r3, [pc, #104]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	4a19      	ldr	r2, [pc, #100]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80045fe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004602:	6113      	str	r3, [r2, #16]
 8004604:	4b17      	ldr	r3, [pc, #92]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004606:	691a      	ldr	r2, [r3, #16]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800460e:	4915      	ldr	r1, [pc, #84]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004610:	4313      	orrs	r3, r2
 8004612:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	da08      	bge.n	800462e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800461c:	4b11      	ldr	r3, [pc, #68]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800461e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004620:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004628:	490e      	ldr	r1, [pc, #56]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800462a:	4313      	orrs	r3, r2
 800462c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d009      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800463a:	4b0a      	ldr	r3, [pc, #40]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800463c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800463e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004648:	4906      	ldr	r1, [pc, #24]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800464a:	4313      	orrs	r3, r2
 800464c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800464e:	7dbb      	ldrb	r3, [r7, #22]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d101      	bne.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8004654:	2300      	movs	r3, #0
 8004656:	e000      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
}
 800465a:	4618      	mov	r0, r3
 800465c:	3718      	adds	r7, #24
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	58024400 	.word	0x58024400

08004668 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800466c:	f7ff f85a 	bl	8003724 <HAL_RCC_GetHCLKFreq>
 8004670:	4602      	mov	r2, r0
 8004672:	4b06      	ldr	r3, [pc, #24]	; (800468c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004674:	6a1b      	ldr	r3, [r3, #32]
 8004676:	091b      	lsrs	r3, r3, #4
 8004678:	f003 0307 	and.w	r3, r3, #7
 800467c:	4904      	ldr	r1, [pc, #16]	; (8004690 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800467e:	5ccb      	ldrb	r3, [r1, r3]
 8004680:	f003 031f 	and.w	r3, r3, #31
 8004684:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004688:	4618      	mov	r0, r3
 800468a:	bd80      	pop	{r7, pc}
 800468c:	58024400 	.word	0x58024400
 8004690:	0800675c 	.word	0x0800675c

08004694 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004694:	b480      	push	{r7}
 8004696:	b089      	sub	sp, #36	; 0x24
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800469c:	4ba1      	ldr	r3, [pc, #644]	; (8004924 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800469e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a0:	f003 0303 	and.w	r3, r3, #3
 80046a4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80046a6:	4b9f      	ldr	r3, [pc, #636]	; (8004924 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046aa:	0b1b      	lsrs	r3, r3, #12
 80046ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046b0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80046b2:	4b9c      	ldr	r3, [pc, #624]	; (8004924 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b6:	091b      	lsrs	r3, r3, #4
 80046b8:	f003 0301 	and.w	r3, r3, #1
 80046bc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80046be:	4b99      	ldr	r3, [pc, #612]	; (8004924 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046c2:	08db      	lsrs	r3, r3, #3
 80046c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80046c8:	693a      	ldr	r2, [r7, #16]
 80046ca:	fb02 f303 	mul.w	r3, r2, r3
 80046ce:	ee07 3a90 	vmov	s15, r3
 80046d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	f000 8111 	beq.w	8004904 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	f000 8083 	beq.w	80047f0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	f200 80a1 	bhi.w	8004834 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d003      	beq.n	8004700 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d056      	beq.n	80047ac <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80046fe:	e099      	b.n	8004834 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004700:	4b88      	ldr	r3, [pc, #544]	; (8004924 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0320 	and.w	r3, r3, #32
 8004708:	2b00      	cmp	r3, #0
 800470a:	d02d      	beq.n	8004768 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800470c:	4b85      	ldr	r3, [pc, #532]	; (8004924 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	08db      	lsrs	r3, r3, #3
 8004712:	f003 0303 	and.w	r3, r3, #3
 8004716:	4a84      	ldr	r2, [pc, #528]	; (8004928 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004718:	fa22 f303 	lsr.w	r3, r2, r3
 800471c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	ee07 3a90 	vmov	s15, r3
 8004724:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	ee07 3a90 	vmov	s15, r3
 800472e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004732:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004736:	4b7b      	ldr	r3, [pc, #492]	; (8004924 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800473e:	ee07 3a90 	vmov	s15, r3
 8004742:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004746:	ed97 6a03 	vldr	s12, [r7, #12]
 800474a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800492c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800474e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004752:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004756:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800475a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800475e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004762:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004766:	e087      	b.n	8004878 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	ee07 3a90 	vmov	s15, r3
 800476e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004772:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004930 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004776:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800477a:	4b6a      	ldr	r3, [pc, #424]	; (8004924 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800477c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004782:	ee07 3a90 	vmov	s15, r3
 8004786:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800478a:	ed97 6a03 	vldr	s12, [r7, #12]
 800478e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800492c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004792:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004796:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800479a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800479e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80047aa:	e065      	b.n	8004878 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	ee07 3a90 	vmov	s15, r3
 80047b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047b6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004934 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80047ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047be:	4b59      	ldr	r3, [pc, #356]	; (8004924 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047c6:	ee07 3a90 	vmov	s15, r3
 80047ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80047d2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800492c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80047ee:	e043      	b.n	8004878 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	ee07 3a90 	vmov	s15, r3
 80047f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047fa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004938 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80047fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004802:	4b48      	ldr	r3, [pc, #288]	; (8004924 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800480a:	ee07 3a90 	vmov	s15, r3
 800480e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004812:	ed97 6a03 	vldr	s12, [r7, #12]
 8004816:	eddf 5a45 	vldr	s11, [pc, #276]	; 800492c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800481a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800481e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004822:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004826:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800482a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800482e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004832:	e021      	b.n	8004878 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	ee07 3a90 	vmov	s15, r3
 800483a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800483e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004934 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004842:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004846:	4b37      	ldr	r3, [pc, #220]	; (8004924 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800484e:	ee07 3a90 	vmov	s15, r3
 8004852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004856:	ed97 6a03 	vldr	s12, [r7, #12]
 800485a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800492c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800485e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004862:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004866:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800486a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800486e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004872:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004876:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004878:	4b2a      	ldr	r3, [pc, #168]	; (8004924 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800487a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800487c:	0a5b      	lsrs	r3, r3, #9
 800487e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004882:	ee07 3a90 	vmov	s15, r3
 8004886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800488a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800488e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004892:	edd7 6a07 	vldr	s13, [r7, #28]
 8004896:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800489a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800489e:	ee17 2a90 	vmov	r2, s15
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80048a6:	4b1f      	ldr	r3, [pc, #124]	; (8004924 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048aa:	0c1b      	lsrs	r3, r3, #16
 80048ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048b0:	ee07 3a90 	vmov	s15, r3
 80048b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80048c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048cc:	ee17 2a90 	vmov	r2, s15
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80048d4:	4b13      	ldr	r3, [pc, #76]	; (8004924 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d8:	0e1b      	lsrs	r3, r3, #24
 80048da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048de:	ee07 3a90 	vmov	s15, r3
 80048e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80048f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048fa:	ee17 2a90 	vmov	r2, s15
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004902:	e008      	b.n	8004916 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	609a      	str	r2, [r3, #8]
}
 8004916:	bf00      	nop
 8004918:	3724      	adds	r7, #36	; 0x24
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	58024400 	.word	0x58024400
 8004928:	03d09000 	.word	0x03d09000
 800492c:	46000000 	.word	0x46000000
 8004930:	4c742400 	.word	0x4c742400
 8004934:	4a742400 	.word	0x4a742400
 8004938:	4af42400 	.word	0x4af42400

0800493c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800493c:	b480      	push	{r7}
 800493e:	b089      	sub	sp, #36	; 0x24
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004944:	4ba1      	ldr	r3, [pc, #644]	; (8004bcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004948:	f003 0303 	and.w	r3, r3, #3
 800494c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800494e:	4b9f      	ldr	r3, [pc, #636]	; (8004bcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004952:	0d1b      	lsrs	r3, r3, #20
 8004954:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004958:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800495a:	4b9c      	ldr	r3, [pc, #624]	; (8004bcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800495c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495e:	0a1b      	lsrs	r3, r3, #8
 8004960:	f003 0301 	and.w	r3, r3, #1
 8004964:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004966:	4b99      	ldr	r3, [pc, #612]	; (8004bcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800496a:	08db      	lsrs	r3, r3, #3
 800496c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	fb02 f303 	mul.w	r3, r2, r3
 8004976:	ee07 3a90 	vmov	s15, r3
 800497a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800497e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	2b00      	cmp	r3, #0
 8004986:	f000 8111 	beq.w	8004bac <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	2b02      	cmp	r3, #2
 800498e:	f000 8083 	beq.w	8004a98 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	2b02      	cmp	r3, #2
 8004996:	f200 80a1 	bhi.w	8004adc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d003      	beq.n	80049a8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d056      	beq.n	8004a54 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80049a6:	e099      	b.n	8004adc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049a8:	4b88      	ldr	r3, [pc, #544]	; (8004bcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0320 	and.w	r3, r3, #32
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d02d      	beq.n	8004a10 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80049b4:	4b85      	ldr	r3, [pc, #532]	; (8004bcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	08db      	lsrs	r3, r3, #3
 80049ba:	f003 0303 	and.w	r3, r3, #3
 80049be:	4a84      	ldr	r2, [pc, #528]	; (8004bd0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80049c0:	fa22 f303 	lsr.w	r3, r2, r3
 80049c4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	ee07 3a90 	vmov	s15, r3
 80049cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	ee07 3a90 	vmov	s15, r3
 80049d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049de:	4b7b      	ldr	r3, [pc, #492]	; (8004bcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049e6:	ee07 3a90 	vmov	s15, r3
 80049ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80049f2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80049f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a0a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004a0e:	e087      	b.n	8004b20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	ee07 3a90 	vmov	s15, r3
 8004a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a1a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004a1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a22:	4b6a      	ldr	r3, [pc, #424]	; (8004bcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a2a:	ee07 3a90 	vmov	s15, r3
 8004a2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a32:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a36:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a52:	e065      	b.n	8004b20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	ee07 3a90 	vmov	s15, r3
 8004a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a5e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004bdc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004a62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a66:	4b59      	ldr	r3, [pc, #356]	; (8004bcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a6e:	ee07 3a90 	vmov	s15, r3
 8004a72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a76:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a7a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a92:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a96:	e043      	b.n	8004b20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	ee07 3a90 	vmov	s15, r3
 8004a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aa2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004be0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004aa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aaa:	4b48      	ldr	r3, [pc, #288]	; (8004bcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ab2:	ee07 3a90 	vmov	s15, r3
 8004ab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aba:	ed97 6a03 	vldr	s12, [r7, #12]
 8004abe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004aca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ace:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ad6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004ada:	e021      	b.n	8004b20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	ee07 3a90 	vmov	s15, r3
 8004ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ae6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004bdc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004aea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aee:	4b37      	ldr	r3, [pc, #220]	; (8004bcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004af6:	ee07 3a90 	vmov	s15, r3
 8004afa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004afe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b02:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b1a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004b1e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004b20:	4b2a      	ldr	r3, [pc, #168]	; (8004bcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b24:	0a5b      	lsrs	r3, r3, #9
 8004b26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b2a:	ee07 3a90 	vmov	s15, r3
 8004b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b46:	ee17 2a90 	vmov	r2, s15
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004b4e:	4b1f      	ldr	r3, [pc, #124]	; (8004bcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b52:	0c1b      	lsrs	r3, r3, #16
 8004b54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b58:	ee07 3a90 	vmov	s15, r3
 8004b5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b64:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b68:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b74:	ee17 2a90 	vmov	r2, s15
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004b7c:	4b13      	ldr	r3, [pc, #76]	; (8004bcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b80:	0e1b      	lsrs	r3, r3, #24
 8004b82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b86:	ee07 3a90 	vmov	s15, r3
 8004b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b96:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ba2:	ee17 2a90 	vmov	r2, s15
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004baa:	e008      	b.n	8004bbe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	609a      	str	r2, [r3, #8]
}
 8004bbe:	bf00      	nop
 8004bc0:	3724      	adds	r7, #36	; 0x24
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop
 8004bcc:	58024400 	.word	0x58024400
 8004bd0:	03d09000 	.word	0x03d09000
 8004bd4:	46000000 	.word	0x46000000
 8004bd8:	4c742400 	.word	0x4c742400
 8004bdc:	4a742400 	.word	0x4a742400
 8004be0:	4af42400 	.word	0x4af42400

08004be4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004bf2:	4b53      	ldr	r3, [pc, #332]	; (8004d40 <RCCEx_PLL2_Config+0x15c>)
 8004bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf6:	f003 0303 	and.w	r3, r3, #3
 8004bfa:	2b03      	cmp	r3, #3
 8004bfc:	d101      	bne.n	8004c02 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e099      	b.n	8004d36 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004c02:	4b4f      	ldr	r3, [pc, #316]	; (8004d40 <RCCEx_PLL2_Config+0x15c>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a4e      	ldr	r2, [pc, #312]	; (8004d40 <RCCEx_PLL2_Config+0x15c>)
 8004c08:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c0e:	f7fc fd95 	bl	800173c <HAL_GetTick>
 8004c12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004c14:	e008      	b.n	8004c28 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004c16:	f7fc fd91 	bl	800173c <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d901      	bls.n	8004c28 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e086      	b.n	8004d36 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004c28:	4b45      	ldr	r3, [pc, #276]	; (8004d40 <RCCEx_PLL2_Config+0x15c>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d1f0      	bne.n	8004c16 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004c34:	4b42      	ldr	r3, [pc, #264]	; (8004d40 <RCCEx_PLL2_Config+0x15c>)
 8004c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c38:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	031b      	lsls	r3, r3, #12
 8004c42:	493f      	ldr	r1, [pc, #252]	; (8004d40 <RCCEx_PLL2_Config+0x15c>)
 8004c44:	4313      	orrs	r3, r2
 8004c46:	628b      	str	r3, [r1, #40]	; 0x28
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	3b01      	subs	r3, #1
 8004c58:	025b      	lsls	r3, r3, #9
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	431a      	orrs	r2, r3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	3b01      	subs	r3, #1
 8004c64:	041b      	lsls	r3, r3, #16
 8004c66:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004c6a:	431a      	orrs	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	3b01      	subs	r3, #1
 8004c72:	061b      	lsls	r3, r3, #24
 8004c74:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004c78:	4931      	ldr	r1, [pc, #196]	; (8004d40 <RCCEx_PLL2_Config+0x15c>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004c7e:	4b30      	ldr	r3, [pc, #192]	; (8004d40 <RCCEx_PLL2_Config+0x15c>)
 8004c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c82:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	695b      	ldr	r3, [r3, #20]
 8004c8a:	492d      	ldr	r1, [pc, #180]	; (8004d40 <RCCEx_PLL2_Config+0x15c>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004c90:	4b2b      	ldr	r3, [pc, #172]	; (8004d40 <RCCEx_PLL2_Config+0x15c>)
 8004c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c94:	f023 0220 	bic.w	r2, r3, #32
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	699b      	ldr	r3, [r3, #24]
 8004c9c:	4928      	ldr	r1, [pc, #160]	; (8004d40 <RCCEx_PLL2_Config+0x15c>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004ca2:	4b27      	ldr	r3, [pc, #156]	; (8004d40 <RCCEx_PLL2_Config+0x15c>)
 8004ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca6:	4a26      	ldr	r2, [pc, #152]	; (8004d40 <RCCEx_PLL2_Config+0x15c>)
 8004ca8:	f023 0310 	bic.w	r3, r3, #16
 8004cac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004cae:	4b24      	ldr	r3, [pc, #144]	; (8004d40 <RCCEx_PLL2_Config+0x15c>)
 8004cb0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cb2:	4b24      	ldr	r3, [pc, #144]	; (8004d44 <RCCEx_PLL2_Config+0x160>)
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	69d2      	ldr	r2, [r2, #28]
 8004cba:	00d2      	lsls	r2, r2, #3
 8004cbc:	4920      	ldr	r1, [pc, #128]	; (8004d40 <RCCEx_PLL2_Config+0x15c>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004cc2:	4b1f      	ldr	r3, [pc, #124]	; (8004d40 <RCCEx_PLL2_Config+0x15c>)
 8004cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc6:	4a1e      	ldr	r2, [pc, #120]	; (8004d40 <RCCEx_PLL2_Config+0x15c>)
 8004cc8:	f043 0310 	orr.w	r3, r3, #16
 8004ccc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d106      	bne.n	8004ce2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004cd4:	4b1a      	ldr	r3, [pc, #104]	; (8004d40 <RCCEx_PLL2_Config+0x15c>)
 8004cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd8:	4a19      	ldr	r2, [pc, #100]	; (8004d40 <RCCEx_PLL2_Config+0x15c>)
 8004cda:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004cde:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ce0:	e00f      	b.n	8004d02 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d106      	bne.n	8004cf6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004ce8:	4b15      	ldr	r3, [pc, #84]	; (8004d40 <RCCEx_PLL2_Config+0x15c>)
 8004cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cec:	4a14      	ldr	r2, [pc, #80]	; (8004d40 <RCCEx_PLL2_Config+0x15c>)
 8004cee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cf2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004cf4:	e005      	b.n	8004d02 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004cf6:	4b12      	ldr	r3, [pc, #72]	; (8004d40 <RCCEx_PLL2_Config+0x15c>)
 8004cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cfa:	4a11      	ldr	r2, [pc, #68]	; (8004d40 <RCCEx_PLL2_Config+0x15c>)
 8004cfc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004d00:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004d02:	4b0f      	ldr	r3, [pc, #60]	; (8004d40 <RCCEx_PLL2_Config+0x15c>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a0e      	ldr	r2, [pc, #56]	; (8004d40 <RCCEx_PLL2_Config+0x15c>)
 8004d08:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d0e:	f7fc fd15 	bl	800173c <HAL_GetTick>
 8004d12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d14:	e008      	b.n	8004d28 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004d16:	f7fc fd11 	bl	800173c <HAL_GetTick>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d901      	bls.n	8004d28 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	e006      	b.n	8004d36 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d28:	4b05      	ldr	r3, [pc, #20]	; (8004d40 <RCCEx_PLL2_Config+0x15c>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d0f0      	beq.n	8004d16 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3710      	adds	r7, #16
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	58024400 	.word	0x58024400
 8004d44:	ffff0007 	.word	0xffff0007

08004d48 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d52:	2300      	movs	r3, #0
 8004d54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d56:	4b53      	ldr	r3, [pc, #332]	; (8004ea4 <RCCEx_PLL3_Config+0x15c>)
 8004d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d5a:	f003 0303 	and.w	r3, r3, #3
 8004d5e:	2b03      	cmp	r3, #3
 8004d60:	d101      	bne.n	8004d66 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e099      	b.n	8004e9a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004d66:	4b4f      	ldr	r3, [pc, #316]	; (8004ea4 <RCCEx_PLL3_Config+0x15c>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a4e      	ldr	r2, [pc, #312]	; (8004ea4 <RCCEx_PLL3_Config+0x15c>)
 8004d6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d72:	f7fc fce3 	bl	800173c <HAL_GetTick>
 8004d76:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004d78:	e008      	b.n	8004d8c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004d7a:	f7fc fcdf 	bl	800173c <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d901      	bls.n	8004d8c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e086      	b.n	8004e9a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004d8c:	4b45      	ldr	r3, [pc, #276]	; (8004ea4 <RCCEx_PLL3_Config+0x15c>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d1f0      	bne.n	8004d7a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004d98:	4b42      	ldr	r3, [pc, #264]	; (8004ea4 <RCCEx_PLL3_Config+0x15c>)
 8004d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d9c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	051b      	lsls	r3, r3, #20
 8004da6:	493f      	ldr	r1, [pc, #252]	; (8004ea4 <RCCEx_PLL3_Config+0x15c>)
 8004da8:	4313      	orrs	r3, r2
 8004daa:	628b      	str	r3, [r1, #40]	; 0x28
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	3b01      	subs	r3, #1
 8004db2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	025b      	lsls	r3, r3, #9
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	431a      	orrs	r2, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	041b      	lsls	r3, r3, #16
 8004dca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004dce:	431a      	orrs	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	061b      	lsls	r3, r3, #24
 8004dd8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004ddc:	4931      	ldr	r1, [pc, #196]	; (8004ea4 <RCCEx_PLL3_Config+0x15c>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004de2:	4b30      	ldr	r3, [pc, #192]	; (8004ea4 <RCCEx_PLL3_Config+0x15c>)
 8004de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	695b      	ldr	r3, [r3, #20]
 8004dee:	492d      	ldr	r1, [pc, #180]	; (8004ea4 <RCCEx_PLL3_Config+0x15c>)
 8004df0:	4313      	orrs	r3, r2
 8004df2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004df4:	4b2b      	ldr	r3, [pc, #172]	; (8004ea4 <RCCEx_PLL3_Config+0x15c>)
 8004df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	699b      	ldr	r3, [r3, #24]
 8004e00:	4928      	ldr	r1, [pc, #160]	; (8004ea4 <RCCEx_PLL3_Config+0x15c>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004e06:	4b27      	ldr	r3, [pc, #156]	; (8004ea4 <RCCEx_PLL3_Config+0x15c>)
 8004e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0a:	4a26      	ldr	r2, [pc, #152]	; (8004ea4 <RCCEx_PLL3_Config+0x15c>)
 8004e0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e10:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004e12:	4b24      	ldr	r3, [pc, #144]	; (8004ea4 <RCCEx_PLL3_Config+0x15c>)
 8004e14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e16:	4b24      	ldr	r3, [pc, #144]	; (8004ea8 <RCCEx_PLL3_Config+0x160>)
 8004e18:	4013      	ands	r3, r2
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	69d2      	ldr	r2, [r2, #28]
 8004e1e:	00d2      	lsls	r2, r2, #3
 8004e20:	4920      	ldr	r1, [pc, #128]	; (8004ea4 <RCCEx_PLL3_Config+0x15c>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004e26:	4b1f      	ldr	r3, [pc, #124]	; (8004ea4 <RCCEx_PLL3_Config+0x15c>)
 8004e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2a:	4a1e      	ldr	r2, [pc, #120]	; (8004ea4 <RCCEx_PLL3_Config+0x15c>)
 8004e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e30:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d106      	bne.n	8004e46 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004e38:	4b1a      	ldr	r3, [pc, #104]	; (8004ea4 <RCCEx_PLL3_Config+0x15c>)
 8004e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3c:	4a19      	ldr	r2, [pc, #100]	; (8004ea4 <RCCEx_PLL3_Config+0x15c>)
 8004e3e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004e42:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004e44:	e00f      	b.n	8004e66 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d106      	bne.n	8004e5a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004e4c:	4b15      	ldr	r3, [pc, #84]	; (8004ea4 <RCCEx_PLL3_Config+0x15c>)
 8004e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e50:	4a14      	ldr	r2, [pc, #80]	; (8004ea4 <RCCEx_PLL3_Config+0x15c>)
 8004e52:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004e56:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004e58:	e005      	b.n	8004e66 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004e5a:	4b12      	ldr	r3, [pc, #72]	; (8004ea4 <RCCEx_PLL3_Config+0x15c>)
 8004e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5e:	4a11      	ldr	r2, [pc, #68]	; (8004ea4 <RCCEx_PLL3_Config+0x15c>)
 8004e60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e64:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004e66:	4b0f      	ldr	r3, [pc, #60]	; (8004ea4 <RCCEx_PLL3_Config+0x15c>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a0e      	ldr	r2, [pc, #56]	; (8004ea4 <RCCEx_PLL3_Config+0x15c>)
 8004e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e72:	f7fc fc63 	bl	800173c <HAL_GetTick>
 8004e76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004e78:	e008      	b.n	8004e8c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004e7a:	f7fc fc5f 	bl	800173c <HAL_GetTick>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d901      	bls.n	8004e8c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e006      	b.n	8004e9a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004e8c:	4b05      	ldr	r3, [pc, #20]	; (8004ea4 <RCCEx_PLL3_Config+0x15c>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d0f0      	beq.n	8004e7a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3710      	adds	r7, #16
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	58024400 	.word	0x58024400
 8004ea8:	ffff0007 	.word	0xffff0007

08004eac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d101      	bne.n	8004ebe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e042      	b.n	8004f44 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d106      	bne.n	8004ed6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f7fc f9f1 	bl	80012b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2224      	movs	r2, #36	; 0x24
 8004eda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f022 0201 	bic.w	r2, r2, #1
 8004eec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 f82c 	bl	8004f4c <UART_SetConfig>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d101      	bne.n	8004efe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e022      	b.n	8004f44 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d002      	beq.n	8004f0c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 fd88 	bl	8005a1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	685a      	ldr	r2, [r3, #4]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	689a      	ldr	r2, [r3, #8]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f042 0201 	orr.w	r2, r2, #1
 8004f3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f000 fe0f 	bl	8005b60 <UART_CheckIdleState>
 8004f42:	4603      	mov	r3, r0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3708      	adds	r7, #8
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f50:	b092      	sub	sp, #72	; 0x48
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f56:	2300      	movs	r3, #0
 8004f58:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	689a      	ldr	r2, [r3, #8]
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	691b      	ldr	r3, [r3, #16]
 8004f64:	431a      	orrs	r2, r3
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	695b      	ldr	r3, [r3, #20]
 8004f6a:	431a      	orrs	r2, r3
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	69db      	ldr	r3, [r3, #28]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	4bbe      	ldr	r3, [pc, #760]	; (8005274 <UART_SetConfig+0x328>)
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	697a      	ldr	r2, [r7, #20]
 8004f80:	6812      	ldr	r2, [r2, #0]
 8004f82:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004f84:	430b      	orrs	r3, r1
 8004f86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	68da      	ldr	r2, [r3, #12]
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	430a      	orrs	r2, r1
 8004f9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	699b      	ldr	r3, [r3, #24]
 8004fa2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4ab3      	ldr	r2, [pc, #716]	; (8005278 <UART_SetConfig+0x32c>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d004      	beq.n	8004fb8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	6a1b      	ldr	r3, [r3, #32]
 8004fb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	689a      	ldr	r2, [r3, #8]
 8004fbe:	4baf      	ldr	r3, [pc, #700]	; (800527c <UART_SetConfig+0x330>)
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	697a      	ldr	r2, [r7, #20]
 8004fc4:	6812      	ldr	r2, [r2, #0]
 8004fc6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004fc8:	430b      	orrs	r3, r1
 8004fca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd2:	f023 010f 	bic.w	r1, r3, #15
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4aa6      	ldr	r2, [pc, #664]	; (8005280 <UART_SetConfig+0x334>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d177      	bne.n	80050dc <UART_SetConfig+0x190>
 8004fec:	4ba5      	ldr	r3, [pc, #660]	; (8005284 <UART_SetConfig+0x338>)
 8004fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ff0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ff4:	2b28      	cmp	r3, #40	; 0x28
 8004ff6:	d86d      	bhi.n	80050d4 <UART_SetConfig+0x188>
 8004ff8:	a201      	add	r2, pc, #4	; (adr r2, 8005000 <UART_SetConfig+0xb4>)
 8004ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ffe:	bf00      	nop
 8005000:	080050a5 	.word	0x080050a5
 8005004:	080050d5 	.word	0x080050d5
 8005008:	080050d5 	.word	0x080050d5
 800500c:	080050d5 	.word	0x080050d5
 8005010:	080050d5 	.word	0x080050d5
 8005014:	080050d5 	.word	0x080050d5
 8005018:	080050d5 	.word	0x080050d5
 800501c:	080050d5 	.word	0x080050d5
 8005020:	080050ad 	.word	0x080050ad
 8005024:	080050d5 	.word	0x080050d5
 8005028:	080050d5 	.word	0x080050d5
 800502c:	080050d5 	.word	0x080050d5
 8005030:	080050d5 	.word	0x080050d5
 8005034:	080050d5 	.word	0x080050d5
 8005038:	080050d5 	.word	0x080050d5
 800503c:	080050d5 	.word	0x080050d5
 8005040:	080050b5 	.word	0x080050b5
 8005044:	080050d5 	.word	0x080050d5
 8005048:	080050d5 	.word	0x080050d5
 800504c:	080050d5 	.word	0x080050d5
 8005050:	080050d5 	.word	0x080050d5
 8005054:	080050d5 	.word	0x080050d5
 8005058:	080050d5 	.word	0x080050d5
 800505c:	080050d5 	.word	0x080050d5
 8005060:	080050bd 	.word	0x080050bd
 8005064:	080050d5 	.word	0x080050d5
 8005068:	080050d5 	.word	0x080050d5
 800506c:	080050d5 	.word	0x080050d5
 8005070:	080050d5 	.word	0x080050d5
 8005074:	080050d5 	.word	0x080050d5
 8005078:	080050d5 	.word	0x080050d5
 800507c:	080050d5 	.word	0x080050d5
 8005080:	080050c5 	.word	0x080050c5
 8005084:	080050d5 	.word	0x080050d5
 8005088:	080050d5 	.word	0x080050d5
 800508c:	080050d5 	.word	0x080050d5
 8005090:	080050d5 	.word	0x080050d5
 8005094:	080050d5 	.word	0x080050d5
 8005098:	080050d5 	.word	0x080050d5
 800509c:	080050d5 	.word	0x080050d5
 80050a0:	080050cd 	.word	0x080050cd
 80050a4:	2301      	movs	r3, #1
 80050a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050aa:	e222      	b.n	80054f2 <UART_SetConfig+0x5a6>
 80050ac:	2304      	movs	r3, #4
 80050ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050b2:	e21e      	b.n	80054f2 <UART_SetConfig+0x5a6>
 80050b4:	2308      	movs	r3, #8
 80050b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050ba:	e21a      	b.n	80054f2 <UART_SetConfig+0x5a6>
 80050bc:	2310      	movs	r3, #16
 80050be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050c2:	e216      	b.n	80054f2 <UART_SetConfig+0x5a6>
 80050c4:	2320      	movs	r3, #32
 80050c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050ca:	e212      	b.n	80054f2 <UART_SetConfig+0x5a6>
 80050cc:	2340      	movs	r3, #64	; 0x40
 80050ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050d2:	e20e      	b.n	80054f2 <UART_SetConfig+0x5a6>
 80050d4:	2380      	movs	r3, #128	; 0x80
 80050d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050da:	e20a      	b.n	80054f2 <UART_SetConfig+0x5a6>
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a69      	ldr	r2, [pc, #420]	; (8005288 <UART_SetConfig+0x33c>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d130      	bne.n	8005148 <UART_SetConfig+0x1fc>
 80050e6:	4b67      	ldr	r3, [pc, #412]	; (8005284 <UART_SetConfig+0x338>)
 80050e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ea:	f003 0307 	and.w	r3, r3, #7
 80050ee:	2b05      	cmp	r3, #5
 80050f0:	d826      	bhi.n	8005140 <UART_SetConfig+0x1f4>
 80050f2:	a201      	add	r2, pc, #4	; (adr r2, 80050f8 <UART_SetConfig+0x1ac>)
 80050f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f8:	08005111 	.word	0x08005111
 80050fc:	08005119 	.word	0x08005119
 8005100:	08005121 	.word	0x08005121
 8005104:	08005129 	.word	0x08005129
 8005108:	08005131 	.word	0x08005131
 800510c:	08005139 	.word	0x08005139
 8005110:	2300      	movs	r3, #0
 8005112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005116:	e1ec      	b.n	80054f2 <UART_SetConfig+0x5a6>
 8005118:	2304      	movs	r3, #4
 800511a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800511e:	e1e8      	b.n	80054f2 <UART_SetConfig+0x5a6>
 8005120:	2308      	movs	r3, #8
 8005122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005126:	e1e4      	b.n	80054f2 <UART_SetConfig+0x5a6>
 8005128:	2310      	movs	r3, #16
 800512a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800512e:	e1e0      	b.n	80054f2 <UART_SetConfig+0x5a6>
 8005130:	2320      	movs	r3, #32
 8005132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005136:	e1dc      	b.n	80054f2 <UART_SetConfig+0x5a6>
 8005138:	2340      	movs	r3, #64	; 0x40
 800513a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800513e:	e1d8      	b.n	80054f2 <UART_SetConfig+0x5a6>
 8005140:	2380      	movs	r3, #128	; 0x80
 8005142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005146:	e1d4      	b.n	80054f2 <UART_SetConfig+0x5a6>
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a4f      	ldr	r2, [pc, #316]	; (800528c <UART_SetConfig+0x340>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d130      	bne.n	80051b4 <UART_SetConfig+0x268>
 8005152:	4b4c      	ldr	r3, [pc, #304]	; (8005284 <UART_SetConfig+0x338>)
 8005154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005156:	f003 0307 	and.w	r3, r3, #7
 800515a:	2b05      	cmp	r3, #5
 800515c:	d826      	bhi.n	80051ac <UART_SetConfig+0x260>
 800515e:	a201      	add	r2, pc, #4	; (adr r2, 8005164 <UART_SetConfig+0x218>)
 8005160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005164:	0800517d 	.word	0x0800517d
 8005168:	08005185 	.word	0x08005185
 800516c:	0800518d 	.word	0x0800518d
 8005170:	08005195 	.word	0x08005195
 8005174:	0800519d 	.word	0x0800519d
 8005178:	080051a5 	.word	0x080051a5
 800517c:	2300      	movs	r3, #0
 800517e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005182:	e1b6      	b.n	80054f2 <UART_SetConfig+0x5a6>
 8005184:	2304      	movs	r3, #4
 8005186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800518a:	e1b2      	b.n	80054f2 <UART_SetConfig+0x5a6>
 800518c:	2308      	movs	r3, #8
 800518e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005192:	e1ae      	b.n	80054f2 <UART_SetConfig+0x5a6>
 8005194:	2310      	movs	r3, #16
 8005196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800519a:	e1aa      	b.n	80054f2 <UART_SetConfig+0x5a6>
 800519c:	2320      	movs	r3, #32
 800519e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051a2:	e1a6      	b.n	80054f2 <UART_SetConfig+0x5a6>
 80051a4:	2340      	movs	r3, #64	; 0x40
 80051a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051aa:	e1a2      	b.n	80054f2 <UART_SetConfig+0x5a6>
 80051ac:	2380      	movs	r3, #128	; 0x80
 80051ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051b2:	e19e      	b.n	80054f2 <UART_SetConfig+0x5a6>
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a35      	ldr	r2, [pc, #212]	; (8005290 <UART_SetConfig+0x344>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d130      	bne.n	8005220 <UART_SetConfig+0x2d4>
 80051be:	4b31      	ldr	r3, [pc, #196]	; (8005284 <UART_SetConfig+0x338>)
 80051c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051c2:	f003 0307 	and.w	r3, r3, #7
 80051c6:	2b05      	cmp	r3, #5
 80051c8:	d826      	bhi.n	8005218 <UART_SetConfig+0x2cc>
 80051ca:	a201      	add	r2, pc, #4	; (adr r2, 80051d0 <UART_SetConfig+0x284>)
 80051cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d0:	080051e9 	.word	0x080051e9
 80051d4:	080051f1 	.word	0x080051f1
 80051d8:	080051f9 	.word	0x080051f9
 80051dc:	08005201 	.word	0x08005201
 80051e0:	08005209 	.word	0x08005209
 80051e4:	08005211 	.word	0x08005211
 80051e8:	2300      	movs	r3, #0
 80051ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051ee:	e180      	b.n	80054f2 <UART_SetConfig+0x5a6>
 80051f0:	2304      	movs	r3, #4
 80051f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051f6:	e17c      	b.n	80054f2 <UART_SetConfig+0x5a6>
 80051f8:	2308      	movs	r3, #8
 80051fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051fe:	e178      	b.n	80054f2 <UART_SetConfig+0x5a6>
 8005200:	2310      	movs	r3, #16
 8005202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005206:	e174      	b.n	80054f2 <UART_SetConfig+0x5a6>
 8005208:	2320      	movs	r3, #32
 800520a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800520e:	e170      	b.n	80054f2 <UART_SetConfig+0x5a6>
 8005210:	2340      	movs	r3, #64	; 0x40
 8005212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005216:	e16c      	b.n	80054f2 <UART_SetConfig+0x5a6>
 8005218:	2380      	movs	r3, #128	; 0x80
 800521a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800521e:	e168      	b.n	80054f2 <UART_SetConfig+0x5a6>
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a1b      	ldr	r2, [pc, #108]	; (8005294 <UART_SetConfig+0x348>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d142      	bne.n	80052b0 <UART_SetConfig+0x364>
 800522a:	4b16      	ldr	r3, [pc, #88]	; (8005284 <UART_SetConfig+0x338>)
 800522c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800522e:	f003 0307 	and.w	r3, r3, #7
 8005232:	2b05      	cmp	r3, #5
 8005234:	d838      	bhi.n	80052a8 <UART_SetConfig+0x35c>
 8005236:	a201      	add	r2, pc, #4	; (adr r2, 800523c <UART_SetConfig+0x2f0>)
 8005238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800523c:	08005255 	.word	0x08005255
 8005240:	0800525d 	.word	0x0800525d
 8005244:	08005265 	.word	0x08005265
 8005248:	0800526d 	.word	0x0800526d
 800524c:	08005299 	.word	0x08005299
 8005250:	080052a1 	.word	0x080052a1
 8005254:	2300      	movs	r3, #0
 8005256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800525a:	e14a      	b.n	80054f2 <UART_SetConfig+0x5a6>
 800525c:	2304      	movs	r3, #4
 800525e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005262:	e146      	b.n	80054f2 <UART_SetConfig+0x5a6>
 8005264:	2308      	movs	r3, #8
 8005266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800526a:	e142      	b.n	80054f2 <UART_SetConfig+0x5a6>
 800526c:	2310      	movs	r3, #16
 800526e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005272:	e13e      	b.n	80054f2 <UART_SetConfig+0x5a6>
 8005274:	cfff69f3 	.word	0xcfff69f3
 8005278:	58000c00 	.word	0x58000c00
 800527c:	11fff4ff 	.word	0x11fff4ff
 8005280:	40011000 	.word	0x40011000
 8005284:	58024400 	.word	0x58024400
 8005288:	40004400 	.word	0x40004400
 800528c:	40004800 	.word	0x40004800
 8005290:	40004c00 	.word	0x40004c00
 8005294:	40005000 	.word	0x40005000
 8005298:	2320      	movs	r3, #32
 800529a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800529e:	e128      	b.n	80054f2 <UART_SetConfig+0x5a6>
 80052a0:	2340      	movs	r3, #64	; 0x40
 80052a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052a6:	e124      	b.n	80054f2 <UART_SetConfig+0x5a6>
 80052a8:	2380      	movs	r3, #128	; 0x80
 80052aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052ae:	e120      	b.n	80054f2 <UART_SetConfig+0x5a6>
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4acb      	ldr	r2, [pc, #812]	; (80055e4 <UART_SetConfig+0x698>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d176      	bne.n	80053a8 <UART_SetConfig+0x45c>
 80052ba:	4bcb      	ldr	r3, [pc, #812]	; (80055e8 <UART_SetConfig+0x69c>)
 80052bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052c2:	2b28      	cmp	r3, #40	; 0x28
 80052c4:	d86c      	bhi.n	80053a0 <UART_SetConfig+0x454>
 80052c6:	a201      	add	r2, pc, #4	; (adr r2, 80052cc <UART_SetConfig+0x380>)
 80052c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052cc:	08005371 	.word	0x08005371
 80052d0:	080053a1 	.word	0x080053a1
 80052d4:	080053a1 	.word	0x080053a1
 80052d8:	080053a1 	.word	0x080053a1
 80052dc:	080053a1 	.word	0x080053a1
 80052e0:	080053a1 	.word	0x080053a1
 80052e4:	080053a1 	.word	0x080053a1
 80052e8:	080053a1 	.word	0x080053a1
 80052ec:	08005379 	.word	0x08005379
 80052f0:	080053a1 	.word	0x080053a1
 80052f4:	080053a1 	.word	0x080053a1
 80052f8:	080053a1 	.word	0x080053a1
 80052fc:	080053a1 	.word	0x080053a1
 8005300:	080053a1 	.word	0x080053a1
 8005304:	080053a1 	.word	0x080053a1
 8005308:	080053a1 	.word	0x080053a1
 800530c:	08005381 	.word	0x08005381
 8005310:	080053a1 	.word	0x080053a1
 8005314:	080053a1 	.word	0x080053a1
 8005318:	080053a1 	.word	0x080053a1
 800531c:	080053a1 	.word	0x080053a1
 8005320:	080053a1 	.word	0x080053a1
 8005324:	080053a1 	.word	0x080053a1
 8005328:	080053a1 	.word	0x080053a1
 800532c:	08005389 	.word	0x08005389
 8005330:	080053a1 	.word	0x080053a1
 8005334:	080053a1 	.word	0x080053a1
 8005338:	080053a1 	.word	0x080053a1
 800533c:	080053a1 	.word	0x080053a1
 8005340:	080053a1 	.word	0x080053a1
 8005344:	080053a1 	.word	0x080053a1
 8005348:	080053a1 	.word	0x080053a1
 800534c:	08005391 	.word	0x08005391
 8005350:	080053a1 	.word	0x080053a1
 8005354:	080053a1 	.word	0x080053a1
 8005358:	080053a1 	.word	0x080053a1
 800535c:	080053a1 	.word	0x080053a1
 8005360:	080053a1 	.word	0x080053a1
 8005364:	080053a1 	.word	0x080053a1
 8005368:	080053a1 	.word	0x080053a1
 800536c:	08005399 	.word	0x08005399
 8005370:	2301      	movs	r3, #1
 8005372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005376:	e0bc      	b.n	80054f2 <UART_SetConfig+0x5a6>
 8005378:	2304      	movs	r3, #4
 800537a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800537e:	e0b8      	b.n	80054f2 <UART_SetConfig+0x5a6>
 8005380:	2308      	movs	r3, #8
 8005382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005386:	e0b4      	b.n	80054f2 <UART_SetConfig+0x5a6>
 8005388:	2310      	movs	r3, #16
 800538a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800538e:	e0b0      	b.n	80054f2 <UART_SetConfig+0x5a6>
 8005390:	2320      	movs	r3, #32
 8005392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005396:	e0ac      	b.n	80054f2 <UART_SetConfig+0x5a6>
 8005398:	2340      	movs	r3, #64	; 0x40
 800539a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800539e:	e0a8      	b.n	80054f2 <UART_SetConfig+0x5a6>
 80053a0:	2380      	movs	r3, #128	; 0x80
 80053a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053a6:	e0a4      	b.n	80054f2 <UART_SetConfig+0x5a6>
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a8f      	ldr	r2, [pc, #572]	; (80055ec <UART_SetConfig+0x6a0>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d130      	bne.n	8005414 <UART_SetConfig+0x4c8>
 80053b2:	4b8d      	ldr	r3, [pc, #564]	; (80055e8 <UART_SetConfig+0x69c>)
 80053b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053b6:	f003 0307 	and.w	r3, r3, #7
 80053ba:	2b05      	cmp	r3, #5
 80053bc:	d826      	bhi.n	800540c <UART_SetConfig+0x4c0>
 80053be:	a201      	add	r2, pc, #4	; (adr r2, 80053c4 <UART_SetConfig+0x478>)
 80053c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c4:	080053dd 	.word	0x080053dd
 80053c8:	080053e5 	.word	0x080053e5
 80053cc:	080053ed 	.word	0x080053ed
 80053d0:	080053f5 	.word	0x080053f5
 80053d4:	080053fd 	.word	0x080053fd
 80053d8:	08005405 	.word	0x08005405
 80053dc:	2300      	movs	r3, #0
 80053de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053e2:	e086      	b.n	80054f2 <UART_SetConfig+0x5a6>
 80053e4:	2304      	movs	r3, #4
 80053e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053ea:	e082      	b.n	80054f2 <UART_SetConfig+0x5a6>
 80053ec:	2308      	movs	r3, #8
 80053ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053f2:	e07e      	b.n	80054f2 <UART_SetConfig+0x5a6>
 80053f4:	2310      	movs	r3, #16
 80053f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053fa:	e07a      	b.n	80054f2 <UART_SetConfig+0x5a6>
 80053fc:	2320      	movs	r3, #32
 80053fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005402:	e076      	b.n	80054f2 <UART_SetConfig+0x5a6>
 8005404:	2340      	movs	r3, #64	; 0x40
 8005406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800540a:	e072      	b.n	80054f2 <UART_SetConfig+0x5a6>
 800540c:	2380      	movs	r3, #128	; 0x80
 800540e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005412:	e06e      	b.n	80054f2 <UART_SetConfig+0x5a6>
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a75      	ldr	r2, [pc, #468]	; (80055f0 <UART_SetConfig+0x6a4>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d130      	bne.n	8005480 <UART_SetConfig+0x534>
 800541e:	4b72      	ldr	r3, [pc, #456]	; (80055e8 <UART_SetConfig+0x69c>)
 8005420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005422:	f003 0307 	and.w	r3, r3, #7
 8005426:	2b05      	cmp	r3, #5
 8005428:	d826      	bhi.n	8005478 <UART_SetConfig+0x52c>
 800542a:	a201      	add	r2, pc, #4	; (adr r2, 8005430 <UART_SetConfig+0x4e4>)
 800542c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005430:	08005449 	.word	0x08005449
 8005434:	08005451 	.word	0x08005451
 8005438:	08005459 	.word	0x08005459
 800543c:	08005461 	.word	0x08005461
 8005440:	08005469 	.word	0x08005469
 8005444:	08005471 	.word	0x08005471
 8005448:	2300      	movs	r3, #0
 800544a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800544e:	e050      	b.n	80054f2 <UART_SetConfig+0x5a6>
 8005450:	2304      	movs	r3, #4
 8005452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005456:	e04c      	b.n	80054f2 <UART_SetConfig+0x5a6>
 8005458:	2308      	movs	r3, #8
 800545a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800545e:	e048      	b.n	80054f2 <UART_SetConfig+0x5a6>
 8005460:	2310      	movs	r3, #16
 8005462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005466:	e044      	b.n	80054f2 <UART_SetConfig+0x5a6>
 8005468:	2320      	movs	r3, #32
 800546a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800546e:	e040      	b.n	80054f2 <UART_SetConfig+0x5a6>
 8005470:	2340      	movs	r3, #64	; 0x40
 8005472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005476:	e03c      	b.n	80054f2 <UART_SetConfig+0x5a6>
 8005478:	2380      	movs	r3, #128	; 0x80
 800547a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800547e:	e038      	b.n	80054f2 <UART_SetConfig+0x5a6>
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a5b      	ldr	r2, [pc, #364]	; (80055f4 <UART_SetConfig+0x6a8>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d130      	bne.n	80054ec <UART_SetConfig+0x5a0>
 800548a:	4b57      	ldr	r3, [pc, #348]	; (80055e8 <UART_SetConfig+0x69c>)
 800548c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800548e:	f003 0307 	and.w	r3, r3, #7
 8005492:	2b05      	cmp	r3, #5
 8005494:	d826      	bhi.n	80054e4 <UART_SetConfig+0x598>
 8005496:	a201      	add	r2, pc, #4	; (adr r2, 800549c <UART_SetConfig+0x550>)
 8005498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800549c:	080054b5 	.word	0x080054b5
 80054a0:	080054bd 	.word	0x080054bd
 80054a4:	080054c5 	.word	0x080054c5
 80054a8:	080054cd 	.word	0x080054cd
 80054ac:	080054d5 	.word	0x080054d5
 80054b0:	080054dd 	.word	0x080054dd
 80054b4:	2302      	movs	r3, #2
 80054b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054ba:	e01a      	b.n	80054f2 <UART_SetConfig+0x5a6>
 80054bc:	2304      	movs	r3, #4
 80054be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054c2:	e016      	b.n	80054f2 <UART_SetConfig+0x5a6>
 80054c4:	2308      	movs	r3, #8
 80054c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054ca:	e012      	b.n	80054f2 <UART_SetConfig+0x5a6>
 80054cc:	2310      	movs	r3, #16
 80054ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054d2:	e00e      	b.n	80054f2 <UART_SetConfig+0x5a6>
 80054d4:	2320      	movs	r3, #32
 80054d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054da:	e00a      	b.n	80054f2 <UART_SetConfig+0x5a6>
 80054dc:	2340      	movs	r3, #64	; 0x40
 80054de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054e2:	e006      	b.n	80054f2 <UART_SetConfig+0x5a6>
 80054e4:	2380      	movs	r3, #128	; 0x80
 80054e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054ea:	e002      	b.n	80054f2 <UART_SetConfig+0x5a6>
 80054ec:	2380      	movs	r3, #128	; 0x80
 80054ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a3f      	ldr	r2, [pc, #252]	; (80055f4 <UART_SetConfig+0x6a8>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	f040 80f8 	bne.w	80056ee <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80054fe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005502:	2b20      	cmp	r3, #32
 8005504:	dc46      	bgt.n	8005594 <UART_SetConfig+0x648>
 8005506:	2b02      	cmp	r3, #2
 8005508:	f2c0 8082 	blt.w	8005610 <UART_SetConfig+0x6c4>
 800550c:	3b02      	subs	r3, #2
 800550e:	2b1e      	cmp	r3, #30
 8005510:	d87e      	bhi.n	8005610 <UART_SetConfig+0x6c4>
 8005512:	a201      	add	r2, pc, #4	; (adr r2, 8005518 <UART_SetConfig+0x5cc>)
 8005514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005518:	0800559b 	.word	0x0800559b
 800551c:	08005611 	.word	0x08005611
 8005520:	080055a3 	.word	0x080055a3
 8005524:	08005611 	.word	0x08005611
 8005528:	08005611 	.word	0x08005611
 800552c:	08005611 	.word	0x08005611
 8005530:	080055b3 	.word	0x080055b3
 8005534:	08005611 	.word	0x08005611
 8005538:	08005611 	.word	0x08005611
 800553c:	08005611 	.word	0x08005611
 8005540:	08005611 	.word	0x08005611
 8005544:	08005611 	.word	0x08005611
 8005548:	08005611 	.word	0x08005611
 800554c:	08005611 	.word	0x08005611
 8005550:	080055c3 	.word	0x080055c3
 8005554:	08005611 	.word	0x08005611
 8005558:	08005611 	.word	0x08005611
 800555c:	08005611 	.word	0x08005611
 8005560:	08005611 	.word	0x08005611
 8005564:	08005611 	.word	0x08005611
 8005568:	08005611 	.word	0x08005611
 800556c:	08005611 	.word	0x08005611
 8005570:	08005611 	.word	0x08005611
 8005574:	08005611 	.word	0x08005611
 8005578:	08005611 	.word	0x08005611
 800557c:	08005611 	.word	0x08005611
 8005580:	08005611 	.word	0x08005611
 8005584:	08005611 	.word	0x08005611
 8005588:	08005611 	.word	0x08005611
 800558c:	08005611 	.word	0x08005611
 8005590:	08005603 	.word	0x08005603
 8005594:	2b40      	cmp	r3, #64	; 0x40
 8005596:	d037      	beq.n	8005608 <UART_SetConfig+0x6bc>
 8005598:	e03a      	b.n	8005610 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800559a:	f7ff f865 	bl	8004668 <HAL_RCCEx_GetD3PCLK1Freq>
 800559e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80055a0:	e03c      	b.n	800561c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7ff f874 	bl	8004694 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80055ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055b0:	e034      	b.n	800561c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80055b2:	f107 0318 	add.w	r3, r7, #24
 80055b6:	4618      	mov	r0, r3
 80055b8:	f7ff f9c0 	bl	800493c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055c0:	e02c      	b.n	800561c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055c2:	4b09      	ldr	r3, [pc, #36]	; (80055e8 <UART_SetConfig+0x69c>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 0320 	and.w	r3, r3, #32
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d016      	beq.n	80055fc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80055ce:	4b06      	ldr	r3, [pc, #24]	; (80055e8 <UART_SetConfig+0x69c>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	08db      	lsrs	r3, r3, #3
 80055d4:	f003 0303 	and.w	r3, r3, #3
 80055d8:	4a07      	ldr	r2, [pc, #28]	; (80055f8 <UART_SetConfig+0x6ac>)
 80055da:	fa22 f303 	lsr.w	r3, r2, r3
 80055de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80055e0:	e01c      	b.n	800561c <UART_SetConfig+0x6d0>
 80055e2:	bf00      	nop
 80055e4:	40011400 	.word	0x40011400
 80055e8:	58024400 	.word	0x58024400
 80055ec:	40007800 	.word	0x40007800
 80055f0:	40007c00 	.word	0x40007c00
 80055f4:	58000c00 	.word	0x58000c00
 80055f8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80055fc:	4b9d      	ldr	r3, [pc, #628]	; (8005874 <UART_SetConfig+0x928>)
 80055fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005600:	e00c      	b.n	800561c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005602:	4b9d      	ldr	r3, [pc, #628]	; (8005878 <UART_SetConfig+0x92c>)
 8005604:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005606:	e009      	b.n	800561c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005608:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800560c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800560e:	e005      	b.n	800561c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005610:	2300      	movs	r3, #0
 8005612:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800561a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800561c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800561e:	2b00      	cmp	r3, #0
 8005620:	f000 81de 	beq.w	80059e0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005628:	4a94      	ldr	r2, [pc, #592]	; (800587c <UART_SetConfig+0x930>)
 800562a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800562e:	461a      	mov	r2, r3
 8005630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005632:	fbb3 f3f2 	udiv	r3, r3, r2
 8005636:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	685a      	ldr	r2, [r3, #4]
 800563c:	4613      	mov	r3, r2
 800563e:	005b      	lsls	r3, r3, #1
 8005640:	4413      	add	r3, r2
 8005642:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005644:	429a      	cmp	r2, r3
 8005646:	d305      	bcc.n	8005654 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800564e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005650:	429a      	cmp	r2, r3
 8005652:	d903      	bls.n	800565c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800565a:	e1c1      	b.n	80059e0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800565c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800565e:	2200      	movs	r2, #0
 8005660:	60bb      	str	r3, [r7, #8]
 8005662:	60fa      	str	r2, [r7, #12]
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005668:	4a84      	ldr	r2, [pc, #528]	; (800587c <UART_SetConfig+0x930>)
 800566a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800566e:	b29b      	uxth	r3, r3
 8005670:	2200      	movs	r2, #0
 8005672:	603b      	str	r3, [r7, #0]
 8005674:	607a      	str	r2, [r7, #4]
 8005676:	e9d7 2300 	ldrd	r2, r3, [r7]
 800567a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800567e:	f7fa fe2b 	bl	80002d8 <__aeabi_uldivmod>
 8005682:	4602      	mov	r2, r0
 8005684:	460b      	mov	r3, r1
 8005686:	4610      	mov	r0, r2
 8005688:	4619      	mov	r1, r3
 800568a:	f04f 0200 	mov.w	r2, #0
 800568e:	f04f 0300 	mov.w	r3, #0
 8005692:	020b      	lsls	r3, r1, #8
 8005694:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005698:	0202      	lsls	r2, r0, #8
 800569a:	6979      	ldr	r1, [r7, #20]
 800569c:	6849      	ldr	r1, [r1, #4]
 800569e:	0849      	lsrs	r1, r1, #1
 80056a0:	2000      	movs	r0, #0
 80056a2:	460c      	mov	r4, r1
 80056a4:	4605      	mov	r5, r0
 80056a6:	eb12 0804 	adds.w	r8, r2, r4
 80056aa:	eb43 0905 	adc.w	r9, r3, r5
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	469a      	mov	sl, r3
 80056b6:	4693      	mov	fp, r2
 80056b8:	4652      	mov	r2, sl
 80056ba:	465b      	mov	r3, fp
 80056bc:	4640      	mov	r0, r8
 80056be:	4649      	mov	r1, r9
 80056c0:	f7fa fe0a 	bl	80002d8 <__aeabi_uldivmod>
 80056c4:	4602      	mov	r2, r0
 80056c6:	460b      	mov	r3, r1
 80056c8:	4613      	mov	r3, r2
 80056ca:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80056cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056d2:	d308      	bcc.n	80056e6 <UART_SetConfig+0x79a>
 80056d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056da:	d204      	bcs.n	80056e6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056e2:	60da      	str	r2, [r3, #12]
 80056e4:	e17c      	b.n	80059e0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80056ec:	e178      	b.n	80059e0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	69db      	ldr	r3, [r3, #28]
 80056f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056f6:	f040 80c5 	bne.w	8005884 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80056fa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80056fe:	2b20      	cmp	r3, #32
 8005700:	dc48      	bgt.n	8005794 <UART_SetConfig+0x848>
 8005702:	2b00      	cmp	r3, #0
 8005704:	db7b      	blt.n	80057fe <UART_SetConfig+0x8b2>
 8005706:	2b20      	cmp	r3, #32
 8005708:	d879      	bhi.n	80057fe <UART_SetConfig+0x8b2>
 800570a:	a201      	add	r2, pc, #4	; (adr r2, 8005710 <UART_SetConfig+0x7c4>)
 800570c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005710:	0800579b 	.word	0x0800579b
 8005714:	080057a3 	.word	0x080057a3
 8005718:	080057ff 	.word	0x080057ff
 800571c:	080057ff 	.word	0x080057ff
 8005720:	080057ab 	.word	0x080057ab
 8005724:	080057ff 	.word	0x080057ff
 8005728:	080057ff 	.word	0x080057ff
 800572c:	080057ff 	.word	0x080057ff
 8005730:	080057bb 	.word	0x080057bb
 8005734:	080057ff 	.word	0x080057ff
 8005738:	080057ff 	.word	0x080057ff
 800573c:	080057ff 	.word	0x080057ff
 8005740:	080057ff 	.word	0x080057ff
 8005744:	080057ff 	.word	0x080057ff
 8005748:	080057ff 	.word	0x080057ff
 800574c:	080057ff 	.word	0x080057ff
 8005750:	080057cb 	.word	0x080057cb
 8005754:	080057ff 	.word	0x080057ff
 8005758:	080057ff 	.word	0x080057ff
 800575c:	080057ff 	.word	0x080057ff
 8005760:	080057ff 	.word	0x080057ff
 8005764:	080057ff 	.word	0x080057ff
 8005768:	080057ff 	.word	0x080057ff
 800576c:	080057ff 	.word	0x080057ff
 8005770:	080057ff 	.word	0x080057ff
 8005774:	080057ff 	.word	0x080057ff
 8005778:	080057ff 	.word	0x080057ff
 800577c:	080057ff 	.word	0x080057ff
 8005780:	080057ff 	.word	0x080057ff
 8005784:	080057ff 	.word	0x080057ff
 8005788:	080057ff 	.word	0x080057ff
 800578c:	080057ff 	.word	0x080057ff
 8005790:	080057f1 	.word	0x080057f1
 8005794:	2b40      	cmp	r3, #64	; 0x40
 8005796:	d02e      	beq.n	80057f6 <UART_SetConfig+0x8aa>
 8005798:	e031      	b.n	80057fe <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800579a:	f7fd fff3 	bl	8003784 <HAL_RCC_GetPCLK1Freq>
 800579e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80057a0:	e033      	b.n	800580a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057a2:	f7fe f805 	bl	80037b0 <HAL_RCC_GetPCLK2Freq>
 80057a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80057a8:	e02f      	b.n	800580a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057ae:	4618      	mov	r0, r3
 80057b0:	f7fe ff70 	bl	8004694 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80057b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057b8:	e027      	b.n	800580a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057ba:	f107 0318 	add.w	r3, r7, #24
 80057be:	4618      	mov	r0, r3
 80057c0:	f7ff f8bc 	bl	800493c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057c8:	e01f      	b.n	800580a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057ca:	4b2d      	ldr	r3, [pc, #180]	; (8005880 <UART_SetConfig+0x934>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 0320 	and.w	r3, r3, #32
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d009      	beq.n	80057ea <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80057d6:	4b2a      	ldr	r3, [pc, #168]	; (8005880 <UART_SetConfig+0x934>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	08db      	lsrs	r3, r3, #3
 80057dc:	f003 0303 	and.w	r3, r3, #3
 80057e0:	4a24      	ldr	r2, [pc, #144]	; (8005874 <UART_SetConfig+0x928>)
 80057e2:	fa22 f303 	lsr.w	r3, r2, r3
 80057e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80057e8:	e00f      	b.n	800580a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80057ea:	4b22      	ldr	r3, [pc, #136]	; (8005874 <UART_SetConfig+0x928>)
 80057ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057ee:	e00c      	b.n	800580a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80057f0:	4b21      	ldr	r3, [pc, #132]	; (8005878 <UART_SetConfig+0x92c>)
 80057f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057f4:	e009      	b.n	800580a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057fc:	e005      	b.n	800580a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80057fe:	2300      	movs	r3, #0
 8005800:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005808:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800580a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800580c:	2b00      	cmp	r3, #0
 800580e:	f000 80e7 	beq.w	80059e0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005816:	4a19      	ldr	r2, [pc, #100]	; (800587c <UART_SetConfig+0x930>)
 8005818:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800581c:	461a      	mov	r2, r3
 800581e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005820:	fbb3 f3f2 	udiv	r3, r3, r2
 8005824:	005a      	lsls	r2, r3, #1
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	085b      	lsrs	r3, r3, #1
 800582c:	441a      	add	r2, r3
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	fbb2 f3f3 	udiv	r3, r2, r3
 8005836:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800583a:	2b0f      	cmp	r3, #15
 800583c:	d916      	bls.n	800586c <UART_SetConfig+0x920>
 800583e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005844:	d212      	bcs.n	800586c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005848:	b29b      	uxth	r3, r3
 800584a:	f023 030f 	bic.w	r3, r3, #15
 800584e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005852:	085b      	lsrs	r3, r3, #1
 8005854:	b29b      	uxth	r3, r3
 8005856:	f003 0307 	and.w	r3, r3, #7
 800585a:	b29a      	uxth	r2, r3
 800585c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800585e:	4313      	orrs	r3, r2
 8005860:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005868:	60da      	str	r2, [r3, #12]
 800586a:	e0b9      	b.n	80059e0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005872:	e0b5      	b.n	80059e0 <UART_SetConfig+0xa94>
 8005874:	03d09000 	.word	0x03d09000
 8005878:	003d0900 	.word	0x003d0900
 800587c:	0800676c 	.word	0x0800676c
 8005880:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005884:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005888:	2b20      	cmp	r3, #32
 800588a:	dc49      	bgt.n	8005920 <UART_SetConfig+0x9d4>
 800588c:	2b00      	cmp	r3, #0
 800588e:	db7c      	blt.n	800598a <UART_SetConfig+0xa3e>
 8005890:	2b20      	cmp	r3, #32
 8005892:	d87a      	bhi.n	800598a <UART_SetConfig+0xa3e>
 8005894:	a201      	add	r2, pc, #4	; (adr r2, 800589c <UART_SetConfig+0x950>)
 8005896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800589a:	bf00      	nop
 800589c:	08005927 	.word	0x08005927
 80058a0:	0800592f 	.word	0x0800592f
 80058a4:	0800598b 	.word	0x0800598b
 80058a8:	0800598b 	.word	0x0800598b
 80058ac:	08005937 	.word	0x08005937
 80058b0:	0800598b 	.word	0x0800598b
 80058b4:	0800598b 	.word	0x0800598b
 80058b8:	0800598b 	.word	0x0800598b
 80058bc:	08005947 	.word	0x08005947
 80058c0:	0800598b 	.word	0x0800598b
 80058c4:	0800598b 	.word	0x0800598b
 80058c8:	0800598b 	.word	0x0800598b
 80058cc:	0800598b 	.word	0x0800598b
 80058d0:	0800598b 	.word	0x0800598b
 80058d4:	0800598b 	.word	0x0800598b
 80058d8:	0800598b 	.word	0x0800598b
 80058dc:	08005957 	.word	0x08005957
 80058e0:	0800598b 	.word	0x0800598b
 80058e4:	0800598b 	.word	0x0800598b
 80058e8:	0800598b 	.word	0x0800598b
 80058ec:	0800598b 	.word	0x0800598b
 80058f0:	0800598b 	.word	0x0800598b
 80058f4:	0800598b 	.word	0x0800598b
 80058f8:	0800598b 	.word	0x0800598b
 80058fc:	0800598b 	.word	0x0800598b
 8005900:	0800598b 	.word	0x0800598b
 8005904:	0800598b 	.word	0x0800598b
 8005908:	0800598b 	.word	0x0800598b
 800590c:	0800598b 	.word	0x0800598b
 8005910:	0800598b 	.word	0x0800598b
 8005914:	0800598b 	.word	0x0800598b
 8005918:	0800598b 	.word	0x0800598b
 800591c:	0800597d 	.word	0x0800597d
 8005920:	2b40      	cmp	r3, #64	; 0x40
 8005922:	d02e      	beq.n	8005982 <UART_SetConfig+0xa36>
 8005924:	e031      	b.n	800598a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005926:	f7fd ff2d 	bl	8003784 <HAL_RCC_GetPCLK1Freq>
 800592a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800592c:	e033      	b.n	8005996 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800592e:	f7fd ff3f 	bl	80037b0 <HAL_RCC_GetPCLK2Freq>
 8005932:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005934:	e02f      	b.n	8005996 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005936:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800593a:	4618      	mov	r0, r3
 800593c:	f7fe feaa 	bl	8004694 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005942:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005944:	e027      	b.n	8005996 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005946:	f107 0318 	add.w	r3, r7, #24
 800594a:	4618      	mov	r0, r3
 800594c:	f7fe fff6 	bl	800493c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005954:	e01f      	b.n	8005996 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005956:	4b2d      	ldr	r3, [pc, #180]	; (8005a0c <UART_SetConfig+0xac0>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0320 	and.w	r3, r3, #32
 800595e:	2b00      	cmp	r3, #0
 8005960:	d009      	beq.n	8005976 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005962:	4b2a      	ldr	r3, [pc, #168]	; (8005a0c <UART_SetConfig+0xac0>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	08db      	lsrs	r3, r3, #3
 8005968:	f003 0303 	and.w	r3, r3, #3
 800596c:	4a28      	ldr	r2, [pc, #160]	; (8005a10 <UART_SetConfig+0xac4>)
 800596e:	fa22 f303 	lsr.w	r3, r2, r3
 8005972:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005974:	e00f      	b.n	8005996 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005976:	4b26      	ldr	r3, [pc, #152]	; (8005a10 <UART_SetConfig+0xac4>)
 8005978:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800597a:	e00c      	b.n	8005996 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800597c:	4b25      	ldr	r3, [pc, #148]	; (8005a14 <UART_SetConfig+0xac8>)
 800597e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005980:	e009      	b.n	8005996 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005982:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005986:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005988:	e005      	b.n	8005996 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800598a:	2300      	movs	r3, #0
 800598c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005994:	bf00      	nop
    }

    if (pclk != 0U)
 8005996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005998:	2b00      	cmp	r3, #0
 800599a:	d021      	beq.n	80059e0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a0:	4a1d      	ldr	r2, [pc, #116]	; (8005a18 <UART_SetConfig+0xacc>)
 80059a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059a6:	461a      	mov	r2, r3
 80059a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059aa:	fbb3 f2f2 	udiv	r2, r3, r2
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	085b      	lsrs	r3, r3, #1
 80059b4:	441a      	add	r2, r3
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80059be:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c2:	2b0f      	cmp	r3, #15
 80059c4:	d909      	bls.n	80059da <UART_SetConfig+0xa8e>
 80059c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059cc:	d205      	bcs.n	80059da <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80059ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d0:	b29a      	uxth	r2, r3
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	60da      	str	r2, [r3, #12]
 80059d8:	e002      	b.n	80059e0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	2200      	movs	r2, #0
 80059f4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	2200      	movs	r2, #0
 80059fa:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80059fc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3748      	adds	r7, #72	; 0x48
 8005a04:	46bd      	mov	sp, r7
 8005a06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a0a:	bf00      	nop
 8005a0c:	58024400 	.word	0x58024400
 8005a10:	03d09000 	.word	0x03d09000
 8005a14:	003d0900 	.word	0x003d0900
 8005a18:	0800676c 	.word	0x0800676c

08005a1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a28:	f003 0301 	and.w	r3, r3, #1
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00a      	beq.n	8005a46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	430a      	orrs	r2, r1
 8005a44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a4a:	f003 0302 	and.w	r3, r3, #2
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00a      	beq.n	8005a68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	430a      	orrs	r2, r1
 8005a66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a6c:	f003 0304 	and.w	r3, r3, #4
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d00a      	beq.n	8005a8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	430a      	orrs	r2, r1
 8005a88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a8e:	f003 0308 	and.w	r3, r3, #8
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d00a      	beq.n	8005aac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	430a      	orrs	r2, r1
 8005aaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab0:	f003 0310 	and.w	r3, r3, #16
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d00a      	beq.n	8005ace <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	430a      	orrs	r2, r1
 8005acc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad2:	f003 0320 	and.w	r3, r3, #32
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00a      	beq.n	8005af0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	430a      	orrs	r2, r1
 8005aee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d01a      	beq.n	8005b32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	430a      	orrs	r2, r1
 8005b10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b1a:	d10a      	bne.n	8005b32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	430a      	orrs	r2, r1
 8005b30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00a      	beq.n	8005b54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	430a      	orrs	r2, r1
 8005b52:	605a      	str	r2, [r3, #4]
  }
}
 8005b54:	bf00      	nop
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b086      	sub	sp, #24
 8005b64:	af02      	add	r7, sp, #8
 8005b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b70:	f7fb fde4 	bl	800173c <HAL_GetTick>
 8005b74:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 0308 	and.w	r3, r3, #8
 8005b80:	2b08      	cmp	r3, #8
 8005b82:	d10e      	bne.n	8005ba2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b88:	9300      	str	r3, [sp, #0]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 f82f 	bl	8005bf6 <UART_WaitOnFlagUntilTimeout>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d001      	beq.n	8005ba2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e025      	b.n	8005bee <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 0304 	and.w	r3, r3, #4
 8005bac:	2b04      	cmp	r3, #4
 8005bae:	d10e      	bne.n	8005bce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005bb4:	9300      	str	r3, [sp, #0]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 f819 	bl	8005bf6 <UART_WaitOnFlagUntilTimeout>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d001      	beq.n	8005bce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bca:	2303      	movs	r3, #3
 8005bcc:	e00f      	b.n	8005bee <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2220      	movs	r2, #32
 8005bd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2220      	movs	r2, #32
 8005bda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3710      	adds	r7, #16
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}

08005bf6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b09c      	sub	sp, #112	; 0x70
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	60f8      	str	r0, [r7, #12]
 8005bfe:	60b9      	str	r1, [r7, #8]
 8005c00:	603b      	str	r3, [r7, #0]
 8005c02:	4613      	mov	r3, r2
 8005c04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c06:	e0a9      	b.n	8005d5c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c0e:	f000 80a5 	beq.w	8005d5c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c12:	f7fb fd93 	bl	800173c <HAL_GetTick>
 8005c16:	4602      	mov	r2, r0
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d302      	bcc.n	8005c28 <UART_WaitOnFlagUntilTimeout+0x32>
 8005c22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d140      	bne.n	8005caa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c30:	e853 3f00 	ldrex	r3, [r3]
 8005c34:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005c36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c38:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c3c:	667b      	str	r3, [r7, #100]	; 0x64
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	461a      	mov	r2, r3
 8005c44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c48:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c4a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005c4c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005c4e:	e841 2300 	strex	r3, r2, [r1]
 8005c52:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005c54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d1e6      	bne.n	8005c28 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	3308      	adds	r3, #8
 8005c60:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c64:	e853 3f00 	ldrex	r3, [r3]
 8005c68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c6c:	f023 0301 	bic.w	r3, r3, #1
 8005c70:	663b      	str	r3, [r7, #96]	; 0x60
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	3308      	adds	r3, #8
 8005c78:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005c7a:	64ba      	str	r2, [r7, #72]	; 0x48
 8005c7c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005c80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c82:	e841 2300 	strex	r3, r2, [r1]
 8005c86:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005c88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d1e5      	bne.n	8005c5a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2220      	movs	r2, #32
 8005c92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2220      	movs	r2, #32
 8005c9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	e069      	b.n	8005d7e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 0304 	and.w	r3, r3, #4
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d051      	beq.n	8005d5c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	69db      	ldr	r3, [r3, #28]
 8005cbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cc6:	d149      	bne.n	8005d5c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005cd0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cda:	e853 3f00 	ldrex	r3, [r3]
 8005cde:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ce6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	461a      	mov	r2, r3
 8005cee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cf0:	637b      	str	r3, [r7, #52]	; 0x34
 8005cf2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005cf6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cf8:	e841 2300 	strex	r3, r2, [r1]
 8005cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d1e6      	bne.n	8005cd2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	3308      	adds	r3, #8
 8005d0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	e853 3f00 	ldrex	r3, [r3]
 8005d12:	613b      	str	r3, [r7, #16]
   return(result);
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	f023 0301 	bic.w	r3, r3, #1
 8005d1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	3308      	adds	r3, #8
 8005d22:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005d24:	623a      	str	r2, [r7, #32]
 8005d26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d28:	69f9      	ldr	r1, [r7, #28]
 8005d2a:	6a3a      	ldr	r2, [r7, #32]
 8005d2c:	e841 2300 	strex	r3, r2, [r1]
 8005d30:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d32:	69bb      	ldr	r3, [r7, #24]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d1e5      	bne.n	8005d04 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2220      	movs	r2, #32
 8005d3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2220      	movs	r2, #32
 8005d44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2220      	movs	r2, #32
 8005d4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005d58:	2303      	movs	r3, #3
 8005d5a:	e010      	b.n	8005d7e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	69da      	ldr	r2, [r3, #28]
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	4013      	ands	r3, r2
 8005d66:	68ba      	ldr	r2, [r7, #8]
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	bf0c      	ite	eq
 8005d6c:	2301      	moveq	r3, #1
 8005d6e:	2300      	movne	r3, #0
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	461a      	mov	r2, r3
 8005d74:	79fb      	ldrb	r3, [r7, #7]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	f43f af46 	beq.w	8005c08 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3770      	adds	r7, #112	; 0x70
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}

08005d86 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005d86:	b480      	push	{r7}
 8005d88:	b085      	sub	sp, #20
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d101      	bne.n	8005d9c <HAL_UARTEx_DisableFifoMode+0x16>
 8005d98:	2302      	movs	r3, #2
 8005d9a:	e027      	b.n	8005dec <HAL_UARTEx_DisableFifoMode+0x66>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2224      	movs	r2, #36	; 0x24
 8005da8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f022 0201 	bic.w	r2, r2, #1
 8005dc2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005dca:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68fa      	ldr	r2, [r7, #12]
 8005dd8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2220      	movs	r2, #32
 8005dde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005dea:	2300      	movs	r3, #0
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3714      	adds	r7, #20
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d101      	bne.n	8005e10 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005e0c:	2302      	movs	r3, #2
 8005e0e:	e02d      	b.n	8005e6c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2224      	movs	r2, #36	; 0x24
 8005e1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f022 0201 	bic.w	r2, r2, #1
 8005e36:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	683a      	ldr	r2, [r7, #0]
 8005e48:	430a      	orrs	r2, r1
 8005e4a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f000 f84f 	bl	8005ef0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68fa      	ldr	r2, [r7, #12]
 8005e58:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2220      	movs	r2, #32
 8005e5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005e6a:	2300      	movs	r3, #0
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3710      	adds	r7, #16
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d101      	bne.n	8005e8c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005e88:	2302      	movs	r3, #2
 8005e8a:	e02d      	b.n	8005ee8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2224      	movs	r2, #36	; 0x24
 8005e98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f022 0201 	bic.w	r2, r2, #1
 8005eb2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	683a      	ldr	r2, [r7, #0]
 8005ec4:	430a      	orrs	r2, r1
 8005ec6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f000 f811 	bl	8005ef0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2220      	movs	r2, #32
 8005eda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005ee6:	2300      	movs	r3, #0
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3710      	adds	r7, #16
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b085      	sub	sp, #20
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d108      	bne.n	8005f12 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005f10:	e031      	b.n	8005f76 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005f12:	2310      	movs	r3, #16
 8005f14:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005f16:	2310      	movs	r3, #16
 8005f18:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	0e5b      	lsrs	r3, r3, #25
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	f003 0307 	and.w	r3, r3, #7
 8005f28:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	0f5b      	lsrs	r3, r3, #29
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	f003 0307 	and.w	r3, r3, #7
 8005f38:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f3a:	7bbb      	ldrb	r3, [r7, #14]
 8005f3c:	7b3a      	ldrb	r2, [r7, #12]
 8005f3e:	4911      	ldr	r1, [pc, #68]	; (8005f84 <UARTEx_SetNbDataToProcess+0x94>)
 8005f40:	5c8a      	ldrb	r2, [r1, r2]
 8005f42:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005f46:	7b3a      	ldrb	r2, [r7, #12]
 8005f48:	490f      	ldr	r1, [pc, #60]	; (8005f88 <UARTEx_SetNbDataToProcess+0x98>)
 8005f4a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f4c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005f50:	b29a      	uxth	r2, r3
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f58:	7bfb      	ldrb	r3, [r7, #15]
 8005f5a:	7b7a      	ldrb	r2, [r7, #13]
 8005f5c:	4909      	ldr	r1, [pc, #36]	; (8005f84 <UARTEx_SetNbDataToProcess+0x94>)
 8005f5e:	5c8a      	ldrb	r2, [r1, r2]
 8005f60:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005f64:	7b7a      	ldrb	r2, [r7, #13]
 8005f66:	4908      	ldr	r1, [pc, #32]	; (8005f88 <UARTEx_SetNbDataToProcess+0x98>)
 8005f68:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f6a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005f6e:	b29a      	uxth	r2, r3
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005f76:	bf00      	nop
 8005f78:	3714      	adds	r7, #20
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop
 8005f84:	08006784 	.word	0x08006784
 8005f88:	0800678c 	.word	0x0800678c

08005f8c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f8c:	b084      	sub	sp, #16
 8005f8e:	b580      	push	{r7, lr}
 8005f90:	b084      	sub	sp, #16
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
 8005f96:	f107 001c 	add.w	r0, r7, #28
 8005f9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d120      	bne.n	8005fe6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	68da      	ldr	r2, [r3, #12]
 8005fb4:	4b2a      	ldr	r3, [pc, #168]	; (8006060 <USB_CoreInit+0xd4>)
 8005fb6:	4013      	ands	r3, r2
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005fc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d105      	bne.n	8005fda <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 faac 	bl	8006538 <USB_CoreReset>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	73fb      	strb	r3, [r7, #15]
 8005fe4:	e01a      	b.n	800601c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 faa0 	bl	8006538 <USB_CoreReset>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005ffc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d106      	bne.n	8006010 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006006:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	639a      	str	r2, [r3, #56]	; 0x38
 800600e:	e005      	b.n	800601c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006014:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800601c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800601e:	2b01      	cmp	r3, #1
 8006020:	d116      	bne.n	8006050 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006026:	b29a      	uxth	r2, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006030:	4b0c      	ldr	r3, [pc, #48]	; (8006064 <USB_CoreInit+0xd8>)
 8006032:	4313      	orrs	r3, r2
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	f043 0206 	orr.w	r2, r3, #6
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	f043 0220 	orr.w	r2, r3, #32
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006050:	7bfb      	ldrb	r3, [r7, #15]
}
 8006052:	4618      	mov	r0, r3
 8006054:	3710      	adds	r7, #16
 8006056:	46bd      	mov	sp, r7
 8006058:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800605c:	b004      	add	sp, #16
 800605e:	4770      	bx	lr
 8006060:	ffbdffbf 	.word	0xffbdffbf
 8006064:	03ee0000 	.word	0x03ee0000

08006068 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006068:	b480      	push	{r7}
 800606a:	b083      	sub	sp, #12
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	f023 0201 	bic.w	r2, r3, #1
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	370c      	adds	r7, #12
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr

0800608a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800608a:	b580      	push	{r7, lr}
 800608c:	b084      	sub	sp, #16
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
 8006092:	460b      	mov	r3, r1
 8006094:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006096:	2300      	movs	r3, #0
 8006098:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	68db      	ldr	r3, [r3, #12]
 800609e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80060a6:	78fb      	ldrb	r3, [r7, #3]
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d115      	bne.n	80060d8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80060b8:	2001      	movs	r0, #1
 80060ba:	f7fb fb4b 	bl	8001754 <HAL_Delay>
      ms++;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	3301      	adds	r3, #1
 80060c2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f000 fa29 	bl	800651c <USB_GetMode>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d01e      	beq.n	800610e <USB_SetCurrentMode+0x84>
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2b31      	cmp	r3, #49	; 0x31
 80060d4:	d9f0      	bls.n	80060b8 <USB_SetCurrentMode+0x2e>
 80060d6:	e01a      	b.n	800610e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80060d8:	78fb      	ldrb	r3, [r7, #3]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d115      	bne.n	800610a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80060ea:	2001      	movs	r0, #1
 80060ec:	f7fb fb32 	bl	8001754 <HAL_Delay>
      ms++;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	3301      	adds	r3, #1
 80060f4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 fa10 	bl	800651c <USB_GetMode>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d005      	beq.n	800610e <USB_SetCurrentMode+0x84>
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2b31      	cmp	r3, #49	; 0x31
 8006106:	d9f0      	bls.n	80060ea <USB_SetCurrentMode+0x60>
 8006108:	e001      	b.n	800610e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e005      	b.n	800611a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2b32      	cmp	r3, #50	; 0x32
 8006112:	d101      	bne.n	8006118 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	e000      	b.n	800611a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006118:	2300      	movs	r3, #0
}
 800611a:	4618      	mov	r0, r3
 800611c:	3710      	adds	r7, #16
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
	...

08006124 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006124:	b084      	sub	sp, #16
 8006126:	b580      	push	{r7, lr}
 8006128:	b086      	sub	sp, #24
 800612a:	af00      	add	r7, sp, #0
 800612c:	6078      	str	r0, [r7, #4]
 800612e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006132:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006136:	2300      	movs	r3, #0
 8006138:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800613e:	2300      	movs	r3, #0
 8006140:	613b      	str	r3, [r7, #16]
 8006142:	e009      	b.n	8006158 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	3340      	adds	r3, #64	; 0x40
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	4413      	add	r3, r2
 800614e:	2200      	movs	r2, #0
 8006150:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	3301      	adds	r3, #1
 8006156:	613b      	str	r3, [r7, #16]
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	2b0e      	cmp	r3, #14
 800615c:	d9f2      	bls.n	8006144 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800615e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006160:	2b00      	cmp	r3, #0
 8006162:	d11c      	bne.n	800619e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	68fa      	ldr	r2, [r7, #12]
 800616e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006172:	f043 0302 	orr.w	r3, r3, #2
 8006176:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800617c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	601a      	str	r2, [r3, #0]
 800619c:	e005      	b.n	80061aa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80061b0:	461a      	mov	r2, r3
 80061b2:	2300      	movs	r3, #0
 80061b4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061bc:	4619      	mov	r1, r3
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061c4:	461a      	mov	r2, r3
 80061c6:	680b      	ldr	r3, [r1, #0]
 80061c8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80061ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d10c      	bne.n	80061ea <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80061d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d104      	bne.n	80061e0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80061d6:	2100      	movs	r1, #0
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f000 f965 	bl	80064a8 <USB_SetDevSpeed>
 80061de:	e008      	b.n	80061f2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80061e0:	2101      	movs	r1, #1
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 f960 	bl	80064a8 <USB_SetDevSpeed>
 80061e8:	e003      	b.n	80061f2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80061ea:	2103      	movs	r1, #3
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f000 f95b 	bl	80064a8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80061f2:	2110      	movs	r1, #16
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 f8f3 	bl	80063e0 <USB_FlushTxFifo>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d001      	beq.n	8006204 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f000 f91f 	bl	8006448 <USB_FlushRxFifo>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d001      	beq.n	8006214 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800621a:	461a      	mov	r2, r3
 800621c:	2300      	movs	r3, #0
 800621e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006226:	461a      	mov	r2, r3
 8006228:	2300      	movs	r3, #0
 800622a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006232:	461a      	mov	r2, r3
 8006234:	2300      	movs	r3, #0
 8006236:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006238:	2300      	movs	r3, #0
 800623a:	613b      	str	r3, [r7, #16]
 800623c:	e043      	b.n	80062c6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	015a      	lsls	r2, r3, #5
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	4413      	add	r3, r2
 8006246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006250:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006254:	d118      	bne.n	8006288 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d10a      	bne.n	8006272 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	015a      	lsls	r2, r3, #5
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	4413      	add	r3, r2
 8006264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006268:	461a      	mov	r2, r3
 800626a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800626e:	6013      	str	r3, [r2, #0]
 8006270:	e013      	b.n	800629a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	015a      	lsls	r2, r3, #5
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	4413      	add	r3, r2
 800627a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800627e:	461a      	mov	r2, r3
 8006280:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006284:	6013      	str	r3, [r2, #0]
 8006286:	e008      	b.n	800629a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	015a      	lsls	r2, r3, #5
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	4413      	add	r3, r2
 8006290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006294:	461a      	mov	r2, r3
 8006296:	2300      	movs	r3, #0
 8006298:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	015a      	lsls	r2, r3, #5
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	4413      	add	r3, r2
 80062a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062a6:	461a      	mov	r2, r3
 80062a8:	2300      	movs	r3, #0
 80062aa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	015a      	lsls	r2, r3, #5
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	4413      	add	r3, r2
 80062b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062b8:	461a      	mov	r2, r3
 80062ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80062be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	3301      	adds	r3, #1
 80062c4:	613b      	str	r3, [r7, #16]
 80062c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c8:	693a      	ldr	r2, [r7, #16]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d3b7      	bcc.n	800623e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062ce:	2300      	movs	r3, #0
 80062d0:	613b      	str	r3, [r7, #16]
 80062d2:	e043      	b.n	800635c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	015a      	lsls	r2, r3, #5
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	4413      	add	r3, r2
 80062dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062ea:	d118      	bne.n	800631e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d10a      	bne.n	8006308 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	015a      	lsls	r2, r3, #5
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	4413      	add	r3, r2
 80062fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062fe:	461a      	mov	r2, r3
 8006300:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006304:	6013      	str	r3, [r2, #0]
 8006306:	e013      	b.n	8006330 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	015a      	lsls	r2, r3, #5
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	4413      	add	r3, r2
 8006310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006314:	461a      	mov	r2, r3
 8006316:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800631a:	6013      	str	r3, [r2, #0]
 800631c:	e008      	b.n	8006330 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	015a      	lsls	r2, r3, #5
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	4413      	add	r3, r2
 8006326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800632a:	461a      	mov	r2, r3
 800632c:	2300      	movs	r3, #0
 800632e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	015a      	lsls	r2, r3, #5
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	4413      	add	r3, r2
 8006338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800633c:	461a      	mov	r2, r3
 800633e:	2300      	movs	r3, #0
 8006340:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	015a      	lsls	r2, r3, #5
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	4413      	add	r3, r2
 800634a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800634e:	461a      	mov	r2, r3
 8006350:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006354:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	3301      	adds	r3, #1
 800635a:	613b      	str	r3, [r7, #16]
 800635c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635e:	693a      	ldr	r2, [r7, #16]
 8006360:	429a      	cmp	r2, r3
 8006362:	d3b7      	bcc.n	80062d4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006372:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006376:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006384:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006388:	2b00      	cmp	r3, #0
 800638a:	d105      	bne.n	8006398 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	699b      	ldr	r3, [r3, #24]
 8006390:	f043 0210 	orr.w	r2, r3, #16
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	699a      	ldr	r2, [r3, #24]
 800639c:	4b0e      	ldr	r3, [pc, #56]	; (80063d8 <USB_DevInit+0x2b4>)
 800639e:	4313      	orrs	r3, r2
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80063a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d005      	beq.n	80063b6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	699b      	ldr	r3, [r3, #24]
 80063ae:	f043 0208 	orr.w	r2, r3, #8
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80063b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d105      	bne.n	80063c8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	699a      	ldr	r2, [r3, #24]
 80063c0:	4b06      	ldr	r3, [pc, #24]	; (80063dc <USB_DevInit+0x2b8>)
 80063c2:	4313      	orrs	r3, r2
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80063c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3718      	adds	r7, #24
 80063ce:	46bd      	mov	sp, r7
 80063d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80063d4:	b004      	add	sp, #16
 80063d6:	4770      	bx	lr
 80063d8:	803c3800 	.word	0x803c3800
 80063dc:	40000004 	.word	0x40000004

080063e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b085      	sub	sp, #20
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80063ea:	2300      	movs	r3, #0
 80063ec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	3301      	adds	r3, #1
 80063f2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	4a13      	ldr	r2, [pc, #76]	; (8006444 <USB_FlushTxFifo+0x64>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d901      	bls.n	8006400 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80063fc:	2303      	movs	r3, #3
 80063fe:	e01b      	b.n	8006438 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	691b      	ldr	r3, [r3, #16]
 8006404:	2b00      	cmp	r3, #0
 8006406:	daf2      	bge.n	80063ee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006408:	2300      	movs	r3, #0
 800640a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	019b      	lsls	r3, r3, #6
 8006410:	f043 0220 	orr.w	r2, r3, #32
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	3301      	adds	r3, #1
 800641c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	4a08      	ldr	r2, [pc, #32]	; (8006444 <USB_FlushTxFifo+0x64>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d901      	bls.n	800642a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006426:	2303      	movs	r3, #3
 8006428:	e006      	b.n	8006438 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	f003 0320 	and.w	r3, r3, #32
 8006432:	2b20      	cmp	r3, #32
 8006434:	d0f0      	beq.n	8006418 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006436:	2300      	movs	r3, #0
}
 8006438:	4618      	mov	r0, r3
 800643a:	3714      	adds	r7, #20
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr
 8006444:	00030d40 	.word	0x00030d40

08006448 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006448:	b480      	push	{r7}
 800644a:	b085      	sub	sp, #20
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006450:	2300      	movs	r3, #0
 8006452:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	3301      	adds	r3, #1
 8006458:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	4a11      	ldr	r2, [pc, #68]	; (80064a4 <USB_FlushRxFifo+0x5c>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d901      	bls.n	8006466 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006462:	2303      	movs	r3, #3
 8006464:	e018      	b.n	8006498 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	2b00      	cmp	r3, #0
 800646c:	daf2      	bge.n	8006454 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800646e:	2300      	movs	r3, #0
 8006470:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2210      	movs	r2, #16
 8006476:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	3301      	adds	r3, #1
 800647c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	4a08      	ldr	r2, [pc, #32]	; (80064a4 <USB_FlushRxFifo+0x5c>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d901      	bls.n	800648a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006486:	2303      	movs	r3, #3
 8006488:	e006      	b.n	8006498 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	f003 0310 	and.w	r3, r3, #16
 8006492:	2b10      	cmp	r3, #16
 8006494:	d0f0      	beq.n	8006478 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006496:	2300      	movs	r3, #0
}
 8006498:	4618      	mov	r0, r3
 800649a:	3714      	adds	r7, #20
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr
 80064a4:	00030d40 	.word	0x00030d40

080064a8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b085      	sub	sp, #20
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	460b      	mov	r3, r1
 80064b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	78fb      	ldrb	r3, [r7, #3]
 80064c2:	68f9      	ldr	r1, [r7, #12]
 80064c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064c8:	4313      	orrs	r3, r2
 80064ca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80064cc:	2300      	movs	r3, #0
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3714      	adds	r7, #20
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr

080064da <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80064da:	b480      	push	{r7}
 80064dc:	b085      	sub	sp, #20
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	68fa      	ldr	r2, [r7, #12]
 80064f0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80064f4:	f023 0303 	bic.w	r3, r3, #3
 80064f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006508:	f043 0302 	orr.w	r3, r3, #2
 800650c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800650e:	2300      	movs	r3, #0
}
 8006510:	4618      	mov	r0, r3
 8006512:	3714      	adds	r7, #20
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	695b      	ldr	r3, [r3, #20]
 8006528:	f003 0301 	and.w	r3, r3, #1
}
 800652c:	4618      	mov	r0, r3
 800652e:	370c      	adds	r7, #12
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr

08006538 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006538:	b480      	push	{r7}
 800653a:	b085      	sub	sp, #20
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006540:	2300      	movs	r3, #0
 8006542:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	3301      	adds	r3, #1
 8006548:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	4a13      	ldr	r2, [pc, #76]	; (800659c <USB_CoreReset+0x64>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d901      	bls.n	8006556 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006552:	2303      	movs	r3, #3
 8006554:	e01b      	b.n	800658e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	691b      	ldr	r3, [r3, #16]
 800655a:	2b00      	cmp	r3, #0
 800655c:	daf2      	bge.n	8006544 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800655e:	2300      	movs	r3, #0
 8006560:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	f043 0201 	orr.w	r2, r3, #1
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	3301      	adds	r3, #1
 8006572:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	4a09      	ldr	r2, [pc, #36]	; (800659c <USB_CoreReset+0x64>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d901      	bls.n	8006580 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800657c:	2303      	movs	r3, #3
 800657e:	e006      	b.n	800658e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	691b      	ldr	r3, [r3, #16]
 8006584:	f003 0301 	and.w	r3, r3, #1
 8006588:	2b01      	cmp	r3, #1
 800658a:	d0f0      	beq.n	800656e <USB_CoreReset+0x36>

  return HAL_OK;
 800658c:	2300      	movs	r3, #0
}
 800658e:	4618      	mov	r0, r3
 8006590:	3714      	adds	r7, #20
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop
 800659c:	00030d40 	.word	0x00030d40

080065a0 <__libc_init_array>:
 80065a0:	b570      	push	{r4, r5, r6, lr}
 80065a2:	4d0d      	ldr	r5, [pc, #52]	; (80065d8 <__libc_init_array+0x38>)
 80065a4:	4c0d      	ldr	r4, [pc, #52]	; (80065dc <__libc_init_array+0x3c>)
 80065a6:	1b64      	subs	r4, r4, r5
 80065a8:	10a4      	asrs	r4, r4, #2
 80065aa:	2600      	movs	r6, #0
 80065ac:	42a6      	cmp	r6, r4
 80065ae:	d109      	bne.n	80065c4 <__libc_init_array+0x24>
 80065b0:	4d0b      	ldr	r5, [pc, #44]	; (80065e0 <__libc_init_array+0x40>)
 80065b2:	4c0c      	ldr	r4, [pc, #48]	; (80065e4 <__libc_init_array+0x44>)
 80065b4:	f000 f87c 	bl	80066b0 <_init>
 80065b8:	1b64      	subs	r4, r4, r5
 80065ba:	10a4      	asrs	r4, r4, #2
 80065bc:	2600      	movs	r6, #0
 80065be:	42a6      	cmp	r6, r4
 80065c0:	d105      	bne.n	80065ce <__libc_init_array+0x2e>
 80065c2:	bd70      	pop	{r4, r5, r6, pc}
 80065c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80065c8:	4798      	blx	r3
 80065ca:	3601      	adds	r6, #1
 80065cc:	e7ee      	b.n	80065ac <__libc_init_array+0xc>
 80065ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80065d2:	4798      	blx	r3
 80065d4:	3601      	adds	r6, #1
 80065d6:	e7f2      	b.n	80065be <__libc_init_array+0x1e>
 80065d8:	080067c4 	.word	0x080067c4
 80065dc:	080067c4 	.word	0x080067c4
 80065e0:	080067c4 	.word	0x080067c4
 80065e4:	080067c8 	.word	0x080067c8

080065e8 <__itoa>:
 80065e8:	1e93      	subs	r3, r2, #2
 80065ea:	2b22      	cmp	r3, #34	; 0x22
 80065ec:	b510      	push	{r4, lr}
 80065ee:	460c      	mov	r4, r1
 80065f0:	d904      	bls.n	80065fc <__itoa+0x14>
 80065f2:	2300      	movs	r3, #0
 80065f4:	700b      	strb	r3, [r1, #0]
 80065f6:	461c      	mov	r4, r3
 80065f8:	4620      	mov	r0, r4
 80065fa:	bd10      	pop	{r4, pc}
 80065fc:	2a0a      	cmp	r2, #10
 80065fe:	d109      	bne.n	8006614 <__itoa+0x2c>
 8006600:	2800      	cmp	r0, #0
 8006602:	da07      	bge.n	8006614 <__itoa+0x2c>
 8006604:	232d      	movs	r3, #45	; 0x2d
 8006606:	700b      	strb	r3, [r1, #0]
 8006608:	4240      	negs	r0, r0
 800660a:	2101      	movs	r1, #1
 800660c:	4421      	add	r1, r4
 800660e:	f000 f80d 	bl	800662c <__utoa>
 8006612:	e7f1      	b.n	80065f8 <__itoa+0x10>
 8006614:	2100      	movs	r1, #0
 8006616:	e7f9      	b.n	800660c <__itoa+0x24>

08006618 <itoa>:
 8006618:	f7ff bfe6 	b.w	80065e8 <__itoa>

0800661c <memset>:
 800661c:	4402      	add	r2, r0
 800661e:	4603      	mov	r3, r0
 8006620:	4293      	cmp	r3, r2
 8006622:	d100      	bne.n	8006626 <memset+0xa>
 8006624:	4770      	bx	lr
 8006626:	f803 1b01 	strb.w	r1, [r3], #1
 800662a:	e7f9      	b.n	8006620 <memset+0x4>

0800662c <__utoa>:
 800662c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800662e:	4c1f      	ldr	r4, [pc, #124]	; (80066ac <__utoa+0x80>)
 8006630:	b08b      	sub	sp, #44	; 0x2c
 8006632:	4605      	mov	r5, r0
 8006634:	460b      	mov	r3, r1
 8006636:	466e      	mov	r6, sp
 8006638:	f104 0c20 	add.w	ip, r4, #32
 800663c:	6820      	ldr	r0, [r4, #0]
 800663e:	6861      	ldr	r1, [r4, #4]
 8006640:	4637      	mov	r7, r6
 8006642:	c703      	stmia	r7!, {r0, r1}
 8006644:	3408      	adds	r4, #8
 8006646:	4564      	cmp	r4, ip
 8006648:	463e      	mov	r6, r7
 800664a:	d1f7      	bne.n	800663c <__utoa+0x10>
 800664c:	7921      	ldrb	r1, [r4, #4]
 800664e:	7139      	strb	r1, [r7, #4]
 8006650:	1e91      	subs	r1, r2, #2
 8006652:	6820      	ldr	r0, [r4, #0]
 8006654:	6038      	str	r0, [r7, #0]
 8006656:	2922      	cmp	r1, #34	; 0x22
 8006658:	f04f 0100 	mov.w	r1, #0
 800665c:	d904      	bls.n	8006668 <__utoa+0x3c>
 800665e:	7019      	strb	r1, [r3, #0]
 8006660:	460b      	mov	r3, r1
 8006662:	4618      	mov	r0, r3
 8006664:	b00b      	add	sp, #44	; 0x2c
 8006666:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006668:	1e58      	subs	r0, r3, #1
 800666a:	4684      	mov	ip, r0
 800666c:	fbb5 f7f2 	udiv	r7, r5, r2
 8006670:	fb02 5617 	mls	r6, r2, r7, r5
 8006674:	3628      	adds	r6, #40	; 0x28
 8006676:	446e      	add	r6, sp
 8006678:	460c      	mov	r4, r1
 800667a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800667e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8006682:	462e      	mov	r6, r5
 8006684:	42b2      	cmp	r2, r6
 8006686:	f101 0101 	add.w	r1, r1, #1
 800668a:	463d      	mov	r5, r7
 800668c:	d9ee      	bls.n	800666c <__utoa+0x40>
 800668e:	2200      	movs	r2, #0
 8006690:	545a      	strb	r2, [r3, r1]
 8006692:	1919      	adds	r1, r3, r4
 8006694:	1aa5      	subs	r5, r4, r2
 8006696:	42aa      	cmp	r2, r5
 8006698:	dae3      	bge.n	8006662 <__utoa+0x36>
 800669a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800669e:	780e      	ldrb	r6, [r1, #0]
 80066a0:	7006      	strb	r6, [r0, #0]
 80066a2:	3201      	adds	r2, #1
 80066a4:	f801 5901 	strb.w	r5, [r1], #-1
 80066a8:	e7f4      	b.n	8006694 <__utoa+0x68>
 80066aa:	bf00      	nop
 80066ac:	08006794 	.word	0x08006794

080066b0 <_init>:
 80066b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066b2:	bf00      	nop
 80066b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066b6:	bc08      	pop	{r3}
 80066b8:	469e      	mov	lr, r3
 80066ba:	4770      	bx	lr

080066bc <_fini>:
 80066bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066be:	bf00      	nop
 80066c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066c2:	bc08      	pop	{r3}
 80066c4:	469e      	mov	lr, r3
 80066c6:	4770      	bx	lr
